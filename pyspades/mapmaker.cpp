/* Generated by Cython 0.14.1 on Tue Mar 05 15:51:22 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__pyspades__mapmaker
#include "vxl_c.cpp"
#include "classicgen_c.cpp"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mapmaker.pyx",
  "vxl.pxd",
};

/* Type declarations */

/* "vxl.pxd":37
 *     cpdef get_color(self, int x, int y, int z)
 *     cpdef tuple get_random_point(self, int x1, int y1, int x2, int y2)
 *     cpdef int get_z(self, int x, int y, int start = ?)             # <<<<<<<<<<<<<<
 *     cpdef int get_height(self, int x, int y)
 *     cpdef bint has_neighbors(self, int x, int y, int z)
 */

struct __pyx_opt_args_8pyspades_3vxl_7VXLData_get_z {
  int __pyx_n;
  int start;
};

/* "vxl.pxd":42
 *     cpdef bint is_surface(self, int x, int y, int z)
 *     cpdef list get_neighbors(self, int x, int y, int z)
 *     cpdef bint check_node(self, int x, int y, int z, bint destroy = ?)             # <<<<<<<<<<<<<<
 *     cpdef bint build_point(self, int x, int y, int z, tuple color)
 *     cpdef bint set_column_fast(self, int x, int y, int start_z,
 */

struct __pyx_opt_args_8pyspades_3vxl_7VXLData_check_node {
  int __pyx_n;
  int destroy;
};

/* "pyspades\mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */

struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points {
  int __pyx_n;
  PyObject *x;
  PyObject *y;
  PyObject *w;
  PyObject *h;
};

/* "pyspades\mapmaker.pyx":216
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 *     cpdef midpoint_displace(self, double jittervalue, \             # <<<<<<<<<<<<<<
 *                           double spanscalingmultiplier, \
 *                             int skip=0):
 */

struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace {
  int __pyx_n;
  int skip;
};

/* "vxl.pxd":31
 *     void update_shadows(MapData * map)
 * 
 * cdef class VXLData:             # <<<<<<<<<<<<<<
 *     cdef MapData * map
 * 
 */

struct __pyx_obj_8pyspades_3vxl_VXLData {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_3vxl_VXLData *__pyx_vtab;
  struct MapData *map;
};

/* "pyspades\mapmaker.pyx":48
 * 
 * @cython.final
 * cdef class BiomeMap:             # <<<<<<<<<<<<<<
 *     """
 *     A tilemap containing biome data for a HeightMap.
 */

struct __pyx_obj_8pyspades_8mapmaker_BiomeMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *__pyx_vtab;
  int width;
  int height;
  int twidth;
  int theight;
  PyObject *biomes;
  PyObject *tmap;
  PyObject *gradients;
};

/* "pyspades\mapmaker.pyx":153
 * 
 * @cython.final
 * cdef class HeightMap:             # <<<<<<<<<<<<<<
 *     cdef public int width
 *     cdef public int height
 */

struct __pyx_obj_8pyspades_8mapmaker_HeightMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *__pyx_vtab;
  int width;
  int height;
  PyObject *hmap;
  PyObject *cmap;
};


/* "vxl.pxd":31
 *     void update_shadows(MapData * map)
 * 
 * cdef class VXLData:             # <<<<<<<<<<<<<<
 *     cdef MapData * map
 * 
 */

struct __pyx_vtabstruct_8pyspades_3vxl_VXLData {
  PyObject *(*get_solid)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*get_color)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*get_random_point)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int, int __pyx_skip_dispatch);
  int (*get_z)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_3vxl_7VXLData_get_z *__pyx_optional_args);
  int (*get_height)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int __pyx_skip_dispatch);
  int (*has_neighbors)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  int (*is_surface)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*get_neighbors)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch);
  int (*check_node)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_3vxl_7VXLData_check_node *__pyx_optional_args);
  int (*build_point)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, PyObject *, int __pyx_skip_dispatch);
  int (*set_column_fast)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int, int, int, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*update_shadows)(struct __pyx_obj_8pyspades_3vxl_VXLData *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_3vxl_VXLData *__pyx_vtabptr_8pyspades_3vxl_VXLData;


/* "pyspades\mapmaker.pyx":153
 * 
 * @cython.final
 * cdef class HeightMap:             # <<<<<<<<<<<<<<
 *     cdef public int width
 *     cdef public int height
 */

struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap {
  double (*get)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
  double (*get_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
  PyObject *(*set)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*set_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*add_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
  int (*get_col)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
  int (*get_col_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch);
  PyObject *(*set_col_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*fill_col)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int __pyx_skip_dispatch);
  PyObject *(*mult_repeat)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*seed)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch);
  PyObject *(*peaking)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*dipping)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*rolling)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*smoothing)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*midpoint_displace)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace *__pyx_optional_args);
  PyObject *(*jitter_heights)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*jitter_colors)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*level_against_heightmap)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*blend_heightmaps)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*rect_solid)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*rect_noise)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, double, int __pyx_skip_dispatch);
  PyObject *(*rect_color)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, int __pyx_skip_dispatch);
  PyObject *(*truncate)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*offset_z)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*rescale_z)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch);
  PyObject *(*paint_gradient_fill)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*rewrite_gradient_fill)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*rgb_noise_colors)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*smooth_colors)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*write_vxl)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch);
  PyObject *(*line_add)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch);
  PyObject *(*line_set)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *__pyx_vtabptr_8pyspades_8mapmaker_HeightMap;


/* "pyspades\mapmaker.pyx":48
 * 
 * @cython.final
 * cdef class BiomeMap:             # <<<<<<<<<<<<<<
 *     """
 *     A tilemap containing biome data for a HeightMap.
 */

struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap {
  PyObject *(*get_repeat)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, int __pyx_skip_dispatch);
  PyObject *(*set_repeat)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*noise)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
  PyObject *(*random_points)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points *__pyx_optional_args);
  PyObject *(*point_flood)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*jitter)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
  PyObject *(*create_heightmap)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch);
  PyObject *(*rect_of_point)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *__pyx_vtabptr_8pyspades_8mapmaker_BiomeMap;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */

#define UNARY_NEG_WOULD_OVERFLOW(x)		(((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static CYTHON_INLINE int __Pyx_mod_int(int, int); /* proto */

#define __Pyx_SetItemInt(o, i, v, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_SetItemInt_Fast(o, i, v) : \
                                                    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}

static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v) {
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        Py_INCREF(v);
        Py_DECREF(PyList_GET_ITEM(o, i));
        PyList_SET_ITEM(o, i, v);
        return 1;
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_ass_item && (likely(i >= 0)))
        return PySequence_SetItem(o, i, v);
    else {
        PyObject *j = PyInt_FromSsize_t(i);
        return __Pyx_SetItemInt_Generic(o, j, v);
    }
}

static CYTHON_INLINE long __Pyx_NegateNonNeg(long b) { return unlikely(b < 0) ? b : !b; }
static CYTHON_INLINE PyObject* __Pyx_PyBoolOrNull_FromLong(long b) {
    return unlikely(b < 0) ? NULL : __Pyx_PyBool_FromLong(b);
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    }
    else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

static CYTHON_INLINE int __Pyx_div_int(int, int); /* proto */

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t, Py_ssize_t); /* proto */

static CYTHON_INLINE long __Pyx_mod_long(long, long); /* proto */

static double __Pyx__PyObject_AsDouble(PyObject* obj); /* proto */

#define __Pyx_PyObject_AsDouble(obj) \
    ((likely(PyFloat_CheckExact(obj))) ? \
     PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname); /*proto*/

#define __pyx_binding_PyCFunctionType_USED 1

typedef struct {
    PyCFunctionObject func;
} __pyx_binding_PyCFunctionType_object;

static PyTypeObject __pyx_binding_PyCFunctionType_type;
static PyTypeObject *__pyx_binding_PyCFunctionType = NULL;

static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module); /* proto */
#define __pyx_binding_PyCFunctionType_New(ml, self) __pyx_binding_PyCFunctionType_NewEx(ml, self, NULL)

static int __pyx_binding_PyCFunctionType_init(void); /* proto */

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact

#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)

#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)

#define Pyx_PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)

#define PySet_Size(anyset) \
    PyObject_Size((anyset))

#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))

#define PySet_Pop(set) \
    PyObject_CallMethod(set, (char *)"pop", NULL)

static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"discard", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char *)"add", (char *)"O", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}

#endif /* PyAnySet_CheckExact (<= Py2.4) */

#if PY_VERSION_HEX < 0x02040000
#ifndef Py_SETOBJECT_H
#define Py_SETOBJECT_H

static PyTypeObject *__Pyx_PySet_Type = NULL;
static PyTypeObject *__Pyx_PyFrozenSet_Type = NULL;

#define PySet_Type (*__Pyx_PySet_Type)
#define PyFrozenSet_Type (*__Pyx_PyFrozenSet_Type)

#define PyAnySet_Check(ob) \
    (PyAnySet_CheckExact(ob) || \
     PyType_IsSubtype((ob)->ob_type, &PySet_Type) || \
     PyType_IsSubtype((ob)->ob_type, &PyFrozenSet_Type))

#define PyFrozenSet_CheckExact(ob) ((ob)->ob_type == &PyFrozenSet_Type)

static int __Pyx_Py23SetsImport(void) {
    PyObject *sets=0, *Set=0, *ImmutableSet=0;

    sets = PyImport_ImportModule((char *)"sets");
    if (!sets) goto bad;
    Set = PyObject_GetAttrString(sets, (char *)"Set");
    if (!Set) goto bad;
    ImmutableSet = PyObject_GetAttrString(sets, (char *)"ImmutableSet");
    if (!ImmutableSet) goto bad;
    Py_DECREF(sets);

    __Pyx_PySet_Type       = (PyTypeObject*) Set;
    __Pyx_PyFrozenSet_Type = (PyTypeObject*) ImmutableSet;

    return 0;

 bad:
    Py_XDECREF(sets);
    Py_XDECREF(Set);
    Py_XDECREF(ImmutableSet);
    return -1;
}

#else
static int __Pyx_Py23SetsImport(void) { return 0; }
#endif /* !Py_SETOBJECT_H */
#endif /* < Py2.4  */
#endif /* < Py2.5  */

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name); /*proto*/

static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, long size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from pyspades.vxl */

static PyTypeObject *__pyx_ptype_8pyspades_3vxl_VXLData = 0;
/* Module declarations from cython */

/* Module declarations from pyspades.mapmaker */

static PyTypeObject *__pyx_ptype_8pyspades_8mapmaker_BiomeMap = 0;
static PyTypeObject *__pyx_ptype_8pyspades_8mapmaker_HeightMap = 0;
static PyObject *__pyx_f_8pyspades_8mapmaker_lim_byte(int); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_make_color(int, int, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_r(int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_g(int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_b(int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_paint_gradient(PyObject *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_bresenham_line(int, int, int, int); /*proto*/
#define __Pyx_MODULE_NAME "pyspades.mapmaker"
static int __pyx_module_is_main_pyspades__mapmaker = 0;

/* Implementation of pyspades.mapmaker */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_xrange;
static char __pyx_k_3[] = "spanscalingmultiplier";
static char __pyx_k_4[] = "level_against_heightmap";
static char __pyx_k_5[] = "rewrite_gradient_fill";
static char __pyx_k_8[] = "pyspades.mapmaker";
static char __pyx_k_9[] = "*";
static char __pyx_k__b[] = "b";
static char __pyx_k__f[] = "f";
static char __pyx_k__g[] = "g";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__r[] = "r";
static char __pyx_k__w[] = "w";
static char __pyx_k__x[] = "x";
static char __pyx_k__y[] = "y";
static char __pyx_k__z[] = "z";
static char __pyx_k__id[] = "id";
static char __pyx_k__pi[] = "pi";
static char __pyx_k__x2[] = "x2";
static char __pyx_k__y2[] = "y2";
static char __pyx_k__add[] = "add";
static char __pyx_k__col[] = "col";
static char __pyx_k__get[] = "get";
static char __pyx_k__hsb[] = "hsb";
static char __pyx_k__low[] = "low";
static char __pyx_k__map[] = "map";
static char __pyx_k__qty[] = "qty";
static char __pyx_k__rgb[] = "rgb";
static char __pyx_k__set[] = "set";
static char __pyx_k__sin[] = "sin";
static char __pyx_k__sys[] = "sys";
static char __pyx_k__val[] = "val";
static char __pyx_k__cmap[] = "cmap";
static char __pyx_k__copy[] = "copy";
static char __pyx_k__high[] = "high";
static char __pyx_k__hmap[] = "hmap";
static char __pyx_k__math[] = "math";
static char __pyx_k__mult[] = "mult";
static char __pyx_k__seed[] = "seed";
static char __pyx_k__self[] = "self";
static char __pyx_k__skip[] = "skip";
static char __pyx_k__step[] = "step";
static char __pyx_k__tmap[] = "tmap";
static char __pyx_k__Biome[] = "Biome";
static char __pyx_k__array[] = "array";
static char __pyx_k__biome[] = "biome";
static char __pyx_k__color[] = "color";
static char __pyx_k__depth[] = "depth";
static char __pyx_k__deque[] = "deque";
static char __pyx_k__noise[] = "noise";
static char __pyx_k__other[] = "other";
static char __pyx_k__range[] = "range";
static char __pyx_k__steps[] = "steps";
static char __pyx_k__width[] = "width";
static char __pyx_k__append[] = "append";
static char __pyx_k__biomes[] = "biomes";
static char __pyx_k__choice[] = "choice";
static char __pyx_k__height[] = "height";
static char __pyx_k__jitter[] = "jitter";
static char __pyx_k__object[] = "object";
static char __pyx_k__radius[] = "radius";
static char __pyx_k__random[] = "random";
static char __pyx_k__twidth[] = "twidth";
static char __pyx_k__xrange[] = "xrange";
static char __pyx_k__dipping[] = "dipping";
static char __pyx_k__end_pos[] = "end_pos";
static char __pyx_k__get_col[] = "get_col";
static char __pyx_k__peaking[] = "peaking";
static char __pyx_k__popleft[] = "popleft";
static char __pyx_k__randint[] = "randint";
static char __pyx_k__reverse[] = "reverse";
static char __pyx_k__rolling[] = "rolling";
static char __pyx_k__theight[] = "theight";
static char __pyx_k__Gradient[] = "Gradient";
static char __pyx_k____init__[] = "__init__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__alphamap[] = "alphamap";
static char __pyx_k__deepcopy[] = "deepcopy";
static char __pyx_k__fill_col[] = "fill_col";
static char __pyx_k__gradient[] = "gradient";
static char __pyx_k__line_add[] = "line_add";
static char __pyx_k__line_set[] = "line_set";
static char __pyx_k__midpoint[] = "midpoint";
static char __pyx_k__offset_z[] = "offset_z";
static char __pyx_k__truncate[] = "truncate";
static char __pyx_k__HeightMap[] = "HeightMap";
static char __pyx_k__end_color[] = "end_color";
static char __pyx_k__gradients[] = "gradients";
static char __pyx_k__rescale_z[] = "rescale_z";
static char __pyx_k__smoothing[] = "smoothing";
static char __pyx_k__start_pos[] = "start_pos";
static char __pyx_k__variation[] = "variation";
static char __pyx_k__write_vxl[] = "write_vxl";
static char __pyx_k__add_repeat[] = "add_repeat";
static char __pyx_k__get_repeat[] = "get_repeat";
static char __pyx_k__hsb_to_rgb[] = "hsb_to_rgb";
static char __pyx_k__rect_color[] = "rect_color";
static char __pyx_k__rect_noise[] = "rect_noise";
static char __pyx_k__rect_solid[] = "rect_solid";
static char __pyx_k__set_repeat[] = "set_repeat";
static char __pyx_k__collections[] = "collections";
static char __pyx_k__jittervalue[] = "jittervalue";
static char __pyx_k__mult_repeat[] = "mult_repeat";
static char __pyx_k__point_flood[] = "point_flood";
static char __pyx_k__start_color[] = "start_color";
static char __pyx_k__set_step_hsb[] = "set_step_hsb";
static char __pyx_k__set_step_rgb[] = "set_step_rgb";
static char __pyx_k__jitter_colors[] = "jitter_colors";
static char __pyx_k__random_points[] = "random_points";
static char __pyx_k__rect_of_point[] = "rect_of_point";
static char __pyx_k__smooth_colors[] = "smooth_colors";
static char __pyx_k__get_col_repeat[] = "get_col_repeat";
static char __pyx_k__jitter_heights[] = "jitter_heights";
static char __pyx_k__set_col_repeat[] = "set_col_repeat";
static char __pyx_k__interpolate_hsb[] = "interpolate_hsb";
static char __pyx_k__interpolate_rgb[] = "interpolate_rgb";
static char __pyx_k__set_column_fast[] = "set_column_fast";
static char __pyx_k__blend_heightmaps[] = "blend_heightmaps";
static char __pyx_k__create_heightmap[] = "create_heightmap";
static char __pyx_k__generate_classic[] = "generate_classic";
static char __pyx_k__rgb_noise_colors[] = "rgb_noise_colors";
static char __pyx_k__midpoint_displace[] = "midpoint_displace";
static char __pyx_k__paint_gradient_fill[] = "paint_gradient_fill";
static PyObject *__pyx_n_s_3;
static PyObject *__pyx_n_s_4;
static PyObject *__pyx_n_s_5;
static PyObject *__pyx_n_s_8;
static PyObject *__pyx_n_s_9;
static PyObject *__pyx_n_s__Biome;
static PyObject *__pyx_n_s__Gradient;
static PyObject *__pyx_n_s__HeightMap;
static PyObject *__pyx_n_s____init__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__add;
static PyObject *__pyx_n_s__add_repeat;
static PyObject *__pyx_n_s__alphamap;
static PyObject *__pyx_n_s__append;
static PyObject *__pyx_n_s__array;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__biome;
static PyObject *__pyx_n_s__biomes;
static PyObject *__pyx_n_s__blend_heightmaps;
static PyObject *__pyx_n_s__choice;
static PyObject *__pyx_n_s__cmap;
static PyObject *__pyx_n_s__col;
static PyObject *__pyx_n_s__collections;
static PyObject *__pyx_n_s__color;
static PyObject *__pyx_n_s__copy;
static PyObject *__pyx_n_s__create_heightmap;
static PyObject *__pyx_n_s__deepcopy;
static PyObject *__pyx_n_s__depth;
static PyObject *__pyx_n_s__deque;
static PyObject *__pyx_n_s__dipping;
static PyObject *__pyx_n_s__end_color;
static PyObject *__pyx_n_s__end_pos;
static PyObject *__pyx_n_s__f;
static PyObject *__pyx_n_s__fill_col;
static PyObject *__pyx_n_s__g;
static PyObject *__pyx_n_s__generate_classic;
static PyObject *__pyx_n_s__get;
static PyObject *__pyx_n_s__get_col;
static PyObject *__pyx_n_s__get_col_repeat;
static PyObject *__pyx_n_s__get_repeat;
static PyObject *__pyx_n_s__gradient;
static PyObject *__pyx_n_s__gradients;
static PyObject *__pyx_n_s__h;
static PyObject *__pyx_n_s__height;
static PyObject *__pyx_n_s__high;
static PyObject *__pyx_n_s__hmap;
static PyObject *__pyx_n_s__hsb;
static PyObject *__pyx_n_s__hsb_to_rgb;
static PyObject *__pyx_n_s__i;
static PyObject *__pyx_n_s__id;
static PyObject *__pyx_n_s__interpolate_hsb;
static PyObject *__pyx_n_s__interpolate_rgb;
static PyObject *__pyx_n_s__jitter;
static PyObject *__pyx_n_s__jitter_colors;
static PyObject *__pyx_n_s__jitter_heights;
static PyObject *__pyx_n_s__jittervalue;
static PyObject *__pyx_n_s__line_add;
static PyObject *__pyx_n_s__line_set;
static PyObject *__pyx_n_s__low;
static PyObject *__pyx_n_s__map;
static PyObject *__pyx_n_s__math;
static PyObject *__pyx_n_s__midpoint;
static PyObject *__pyx_n_s__midpoint_displace;
static PyObject *__pyx_n_s__mult;
static PyObject *__pyx_n_s__mult_repeat;
static PyObject *__pyx_n_s__noise;
static PyObject *__pyx_n_s__object;
static PyObject *__pyx_n_s__offset_z;
static PyObject *__pyx_n_s__other;
static PyObject *__pyx_n_s__paint_gradient_fill;
static PyObject *__pyx_n_s__peaking;
static PyObject *__pyx_n_s__pi;
static PyObject *__pyx_n_s__point_flood;
static PyObject *__pyx_n_s__popleft;
static PyObject *__pyx_n_s__qty;
static PyObject *__pyx_n_s__r;
static PyObject *__pyx_n_s__radius;
static PyObject *__pyx_n_s__randint;
static PyObject *__pyx_n_s__random;
static PyObject *__pyx_n_s__random_points;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__rect_color;
static PyObject *__pyx_n_s__rect_noise;
static PyObject *__pyx_n_s__rect_of_point;
static PyObject *__pyx_n_s__rect_solid;
static PyObject *__pyx_n_s__rescale_z;
static PyObject *__pyx_n_s__reverse;
static PyObject *__pyx_n_s__rgb;
static PyObject *__pyx_n_s__rgb_noise_colors;
static PyObject *__pyx_n_s__rolling;
static PyObject *__pyx_n_s__seed;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__set;
static PyObject *__pyx_n_s__set_col_repeat;
static PyObject *__pyx_n_s__set_column_fast;
static PyObject *__pyx_n_s__set_repeat;
static PyObject *__pyx_n_s__set_step_hsb;
static PyObject *__pyx_n_s__set_step_rgb;
static PyObject *__pyx_n_s__sin;
static PyObject *__pyx_n_s__skip;
static PyObject *__pyx_n_s__smooth_colors;
static PyObject *__pyx_n_s__smoothing;
static PyObject *__pyx_n_s__start_color;
static PyObject *__pyx_n_s__start_pos;
static PyObject *__pyx_n_s__step;
static PyObject *__pyx_n_s__steps;
static PyObject *__pyx_n_s__sys;
static PyObject *__pyx_n_s__theight;
static PyObject *__pyx_n_s__tmap;
static PyObject *__pyx_n_s__truncate;
static PyObject *__pyx_n_s__twidth;
static PyObject *__pyx_n_s__val;
static PyObject *__pyx_n_s__variation;
static PyObject *__pyx_n_s__w;
static PyObject *__pyx_n_s__width;
static PyObject *__pyx_n_s__write_vxl;
static PyObject *__pyx_n_s__x;
static PyObject *__pyx_n_s__x2;
static PyObject *__pyx_n_s__xrange;
static PyObject *__pyx_n_s__y;
static PyObject *__pyx_n_s__y2;
static PyObject *__pyx_n_s__z;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_4;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_63;
static PyObject *__pyx_int_255;
static PyObject *__pyx_k_tuple_1;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_7;

/* "pyspades\mapmaker.pyx":30
 * cimport cython
 * 
 * def generate_classic(seed):             # <<<<<<<<<<<<<<
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_generate_classic(PyObject *__pyx_self, PyObject *__pyx_v_seed); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_generate_classic = {__Pyx_NAMESTR("generate_classic"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_generate_classic, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_8pyspades_8mapmaker_generate_classic(PyObject *__pyx_self, PyObject *__pyx_v_seed) {
  struct __pyx_obj_8pyspades_3vxl_VXLData *__pyx_v_map = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  unsigned long __pyx_t_2;
  __Pyx_RefNannySetupContext("generate_classic");
  __pyx_self = __pyx_self;

  /* "pyspades\mapmaker.pyx":31
 * 
 * def generate_classic(seed):
 *     cdef VXLData map = VXLData()             # <<<<<<<<<<<<<<
 *     genland(seed, map.map)
 *     return map
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pyspades_3vxl_VXLData)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_map = ((struct __pyx_obj_8pyspades_3vxl_VXLData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":32
 * def generate_classic(seed):
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)             # <<<<<<<<<<<<<<
 *     return map
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_seed); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  genland(__pyx_t_2, __pyx_v_map->map);

  /* "pyspades\mapmaker.pyx":33
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)
 *     return map             # <<<<<<<<<<<<<<
 * 
 * class Biome(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_map));
  __pyx_r = ((PyObject *)__pyx_v_map);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.generate_classic");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_map);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":36
 * 
 * class Biome(object):
 *     def __init__(self, gradient, height, variation, noise):             # <<<<<<<<<<<<<<
 *         """
 *         Create a biome with a Gradient object, typical height(0.0-1.0), and
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_5Biome___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_5Biome___init__[] = "\n        Create a biome with a Gradient object, typical height(0.0-1.0), and \n        height variation(0.0-1.0).\n        ";
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_5Biome___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_5Biome___init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_5Biome___init__)};
static PyObject *__pyx_pf_8pyspades_8mapmaker_5Biome___init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_gradient = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_variation = 0;
  PyObject *__pyx_v_noise = 0;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__gradient,&__pyx_n_s__height,&__pyx_n_s__variation,&__pyx_n_s__noise,0};
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__gradient);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__height);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__variation);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__noise);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_gradient = values[1];
    __pyx_v_height = values[2];
    __pyx_v_variation = values[3];
    __pyx_v_noise = values[4];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_gradient = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_height = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_variation = PyTuple_GET_ITEM(__pyx_args, 3);
    __pyx_v_noise = PyTuple_GET_ITEM(__pyx_args, 4);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Biome.__init__");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "pyspades\mapmaker.pyx":41
 *         height variation(0.0-1.0).
 *         """
 *         self.gradient = gradient             # <<<<<<<<<<<<<<
 *         self.height = height
 *         self.variation = variation
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__gradient, __pyx_v_gradient) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pyspades\mapmaker.pyx":42
 *         """
 *         self.gradient = gradient
 *         self.height = height             # <<<<<<<<<<<<<<
 *         self.variation = variation
 *         self.noise = noise
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__height, __pyx_v_height) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pyspades\mapmaker.pyx":43
 *         self.gradient = gradient
 *         self.height = height
 *         self.variation = variation             # <<<<<<<<<<<<<<
 *         self.noise = noise
 *         self.id = -1
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__variation, __pyx_v_variation) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pyspades\mapmaker.pyx":44
 *         self.height = height
 *         self.variation = variation
 *         self.noise = noise             # <<<<<<<<<<<<<<
 *         self.id = -1
 * 
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__noise, __pyx_v_noise) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pyspades\mapmaker.pyx":45
 *         self.variation = variation
 *         self.noise = noise
 *         self.id = -1             # <<<<<<<<<<<<<<
 * 
 * @cython.final
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__id, __pyx_int_neg_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Biome.__init__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":59
 *     cdef public list tmap
 *     cdef public list gradients
 *     def __init__(self, biomes, width=32, height=32):             # <<<<<<<<<<<<<<
 *         self.biomes = biomes
 *         self.width = width
 */

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_biomes = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  Py_ssize_t __pyx_v_n;
  int __pyx_r;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__biomes,&__pyx_n_s__width,&__pyx_n_s__height,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_32);
    values[2] = ((PyObject *)__pyx_int_32);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__biomes);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__width);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__height);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_biomes = values[0];
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
  } else {
    __pyx_v_width = ((PyObject *)__pyx_int_32);
    __pyx_v_height = ((PyObject *)__pyx_int_32);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_height = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: __pyx_v_width = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_biomes = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.__init__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "pyspades\mapmaker.pyx":60
 *     cdef public list gradients
 *     def __init__(self, biomes, width=32, height=32):
 *         self.biomes = biomes             # <<<<<<<<<<<<<<
 *         self.width = width
 *         self.height = height
 */
  if (!(likely(PyList_CheckExact(__pyx_v_biomes))||((__pyx_v_biomes) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_v_biomes)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_biomes);
  __Pyx_GIVEREF(__pyx_v_biomes);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes = ((PyObject*)__pyx_v_biomes);

  /* "pyspades\mapmaker.pyx":61
 *     def __init__(self, biomes, width=32, height=32):
 *         self.biomes = biomes
 *         self.width = width             # <<<<<<<<<<<<<<
 *         self.height = height
 *         self.twidth = 512//self.width
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_width); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->width = __pyx_t_1;

  /* "pyspades\mapmaker.pyx":62
 *         self.biomes = biomes
 *         self.width = width
 *         self.height = height             # <<<<<<<<<<<<<<
 *         self.twidth = 512//self.width
 *         self.theight = 512//self.height
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_height); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->height = __pyx_t_1;

  /* "pyspades\mapmaker.pyx":63
 *         self.width = width
 *         self.height = height
 *         self.twidth = 512//self.width             # <<<<<<<<<<<<<<
 *         self.theight = 512//self.height
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]
 */
  if (unlikely(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && unlikely(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->width == -1) && unlikely(UNARY_NEG_WOULD_OVERFLOW(512))) {
    PyErr_Format(PyExc_OverflowError, "value too large to perform division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->twidth = __Pyx_div_long(512, ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->width);

  /* "pyspades\mapmaker.pyx":64
 *         self.height = height
 *         self.twidth = 512//self.width
 *         self.theight = 512//self.height             # <<<<<<<<<<<<<<
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]
 *         self.gradients = []
 */
  if (unlikely(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && unlikely(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->height == -1) && unlikely(UNARY_NEG_WOULD_OVERFLOW(512))) {
    PyErr_Format(PyExc_OverflowError, "value too large to perform division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->theight = __Pyx_div_long(512, ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->height);

  /* "pyspades\mapmaker.pyx":65
 *         self.twidth = 512//self.width
 *         self.theight = 512//self.height
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]             # <<<<<<<<<<<<<<
 *         self.gradients = []
 *         for n in xrange(len(biomes)):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = (((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->width * ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->height);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biomes, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyList_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_INCREF(((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap = __pyx_t_2;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":66
 *         self.theight = 512//self.height
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]
 *         self.gradients = []             # <<<<<<<<<<<<<<
 *         for n in xrange(len(biomes)):
 *             biomes[n].id = n
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":67
 *         self.tmap = [biomes[0] for n in xrange(self.width*self.height)]
 *         self.gradients = []
 *         for n in xrange(len(biomes)):             # <<<<<<<<<<<<<<
 *             biomes[n].id = n
 *             self.gradients.append(biomes[n].gradient)
 */
  __pyx_t_2 = __pyx_v_biomes;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_n = __pyx_t_5;

    /* "pyspades\mapmaker.pyx":68
 *         self.gradients = []
 *         for n in xrange(len(biomes)):
 *             biomes[n].id = n             # <<<<<<<<<<<<<<
 *             self.gradients.append(biomes[n].gradient)
 *     cpdef inline object get_repeat(self, int x, int y):
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_n); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biomes, __pyx_v_n, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyObject_SetAttr(__pyx_t_4, __pyx_n_s__id, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyspades\mapmaker.pyx":69
 *         for n in xrange(len(biomes)):
 *             biomes[n].id = n
 *             self.gradients.append(biomes[n].gradient)             # <<<<<<<<<<<<<<
 *     cpdef inline object get_repeat(self, int x, int y):
 *         """This allows the algorithm to tile at the edges."""
 */
    if (unlikely(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_biomes, __pyx_v_n, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__gradient); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = PyList_Append(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients, __pyx_t_2); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":70
 *             biomes[n].id = n
 *             self.gradients.append(biomes[n].gradient)
 *     cpdef inline object get_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_1get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_get_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_repeat");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__get_repeat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_8BiomeMap_1get_repeat)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":72
 *     cpdef inline object get_repeat(self, int x, int y):
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *     cpdef inline set_repeat(self, int x, int y, object val):
 *         """This allows the algorithm to tile at the edges."""
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  __pyx_t_1 = __Pyx_GetItemInt_List(((PyObject *)__pyx_v_self->tmap), __pyx_t_5, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.get_repeat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":70
 *             biomes[n].id = n
 *             self.gradients.append(biomes[n].gradient)
 *     cpdef inline object get_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_1get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_1get_repeat[] = "This allows the algorithm to tile at the edges.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_1get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
  __Pyx_RefNannySetupContext("get_repeat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("get_repeat", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_repeat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_repeat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.get_repeat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->__pyx_vtab)->get_repeat(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.get_repeat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":73
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_repeat(self, int x, int y, object val):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_2set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_set_repeat(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, PyObject *__pyx_v_val, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("set_repeat");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__set_repeat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_8BiomeMap_2set_repeat)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_val);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_val);
      __Pyx_GIVEREF(__pyx_v_val);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":75
 *     cpdef inline set_repeat(self, int x, int y, object val):
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val             # <<<<<<<<<<<<<<
 *     cpdef noise(self):
 *         for idx in xrange(len(self.tmap)):
 */
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  if (__Pyx_SetItemInt(((PyObject *)__pyx_v_self->tmap), __pyx_t_5, __pyx_v_val, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.set_repeat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":73
 *         """This allows the algorithm to tile at the edges."""
 *         return self.tmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_repeat(self, int x, int y, object val):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_2set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_2set_repeat[] = "This allows the algorithm to tile at the edges.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_2set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__val,0};
  __Pyx_RefNannySetupContext("set_repeat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set_repeat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.set_repeat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_t_3 = __pyx_v_val;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->__pyx_vtab)->set_repeat(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_t_1, __pyx_t_2, __pyx_t_3, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.set_repeat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":76
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef noise(self):             # <<<<<<<<<<<<<<
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_3noise(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_noise(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("noise");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__noise); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_8BiomeMap_3noise)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":77
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef noise(self):
 *         for idx in xrange(len(self.tmap)):             # <<<<<<<<<<<<<<
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->tmap);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "pyspades\mapmaker.pyx":78
 *     cpdef noise(self):
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)             # <<<<<<<<<<<<<<
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 *                        h=None):
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__choice); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->biomes));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->biomes));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->biomes));
    __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    if (__Pyx_SetItemInt(((PyObject *)__pyx_v_self->tmap), __pyx_v_idx, __pyx_t_5, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.noise");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":76
 *         """This allows the algorithm to tile at the edges."""
 *         self.tmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef noise(self):             # <<<<<<<<<<<<<<
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_3noise(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_3noise(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("noise");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->__pyx_vtab)->noise(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.noise");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4random_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_random_points(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_qty, PyObject *__pyx_v_biome, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points *__pyx_optional_args) {
  PyObject *__pyx_v_x = ((PyObject *)__pyx_int_0);
  PyObject *__pyx_v_y = ((PyObject *)__pyx_int_0);
  PyObject *__pyx_v_w = ((PyObject *)Py_None);

  /* "pyspades\mapmaker.pyx":80
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 *                        h=None):             # <<<<<<<<<<<<<<
 *         """Generate some points for point_flood()"""
 *         result = []
 */
  PyObject *__pyx_v_h = ((PyObject *)Py_None);
  PyObject *__pyx_v_result;
  PyObject *__pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("random_points");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_x = __pyx_optional_args->x;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_y = __pyx_optional_args->y;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_w = __pyx_optional_args->w;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_h = __pyx_optional_args->h;
          }
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_w);
  __Pyx_INCREF(__pyx_v_h);
  __pyx_v_result = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_n = Py_None; __Pyx_INCREF(Py_None);

  /* "pyspades\mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__random_points); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4random_points)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_qty);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_qty);
      __Pyx_GIVEREF(__pyx_v_qty);
      __Pyx_INCREF(__pyx_v_biome);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_biome);
      __Pyx_GIVEREF(__pyx_v_biome);
      __Pyx_INCREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      __Pyx_INCREF(__pyx_v_y);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_y);
      __Pyx_GIVEREF(__pyx_v_y);
      __Pyx_INCREF(__pyx_v_w);
      PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_w);
      __Pyx_GIVEREF(__pyx_v_w);
      __Pyx_INCREF(__pyx_v_h);
      PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_h);
      __Pyx_GIVEREF(__pyx_v_h);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":82
 *                        h=None):
 *         """Generate some points for point_flood()"""
 *         result = []             # <<<<<<<<<<<<<<
 *         if w is None:
 *             w = self.width
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_result));
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":83
 *         """Generate some points for point_flood()"""
 *         result = []
 *         if w is None:             # <<<<<<<<<<<<<<
 *             w = self.width
 *         if h is None:
 */
  __pyx_t_4 = (__pyx_v_w == Py_None);
  if (__pyx_t_4) {

    /* "pyspades\mapmaker.pyx":84
 *         result = []
 *         if w is None:
 *             w = self.width             # <<<<<<<<<<<<<<
 *         if h is None:
 *             h = self.height
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_w);
    __pyx_v_w = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pyspades\mapmaker.pyx":85
 *         if w is None:
 *             w = self.width
 *         if h is None:             # <<<<<<<<<<<<<<
 *             h = self.height
 *         for n in xrange(qty):
 */
  __pyx_t_4 = (__pyx_v_h == Py_None);
  if (__pyx_t_4) {

    /* "pyspades\mapmaker.pyx":86
 *             w = self.width
 *         if h is None:
 *             h = self.height             # <<<<<<<<<<<<<<
 *         for n in xrange(qty):
 *             result.append((random.randint(x,x+w),
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_h);
    __pyx_v_h = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pyspades\mapmaker.pyx":87
 *         if h is None:
 *             h = self.height
 *         for n in xrange(qty):             # <<<<<<<<<<<<<<
 *             result.append((random.randint(x,x+w),
 *                          random.randint(y,y+h),
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_qty);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_qty);
  __Pyx_GIVEREF(__pyx_v_qty);
  __pyx_t_3 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_5 = 0; __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_1))) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_1))) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++;
    } else {
      __pyx_t_3 = PyIter_Next(__pyx_t_1);
      if (!__pyx_t_3) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF(__pyx_v_n);
    __pyx_v_n = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":88
 *             h = self.height
 *         for n in xrange(qty):
 *             result.append((random.randint(x,x+w),             # <<<<<<<<<<<<<<
 *                          random.randint(y,y+h),
 *                          biome))
 */
    if (unlikely(__pyx_v_result == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__randint); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_v_x, __pyx_v_w); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

    /* "pyspades\mapmaker.pyx":89
 *         for n in xrange(qty):
 *             result.append((random.randint(x,x+w),
 *                          random.randint(y,y+h),             # <<<<<<<<<<<<<<
 *                          biome))
 *         return result
 */
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__randint); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_v_y, __pyx_v_h); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    __Pyx_INCREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;

    /* "pyspades\mapmaker.pyx":90
 *             result.append((random.randint(x,x+w),
 *                          random.randint(y,y+h),
 *                          biome))             # <<<<<<<<<<<<<<
 *         return result
 *     cpdef point_flood(self, points):
 */
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_biome);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_biome);
    __Pyx_GIVEREF(__pyx_v_biome);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_8 = PyList_Append(__pyx_v_result, ((PyObject *)__pyx_t_7)); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":91
 *                          random.randint(y,y+h),
 *                          biome))
 *         return result             # <<<<<<<<<<<<<<
 *     cpdef point_flood(self, points):
 *         """Each tuple of (x,y,biome) in the "points" list
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.random_points");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_result);
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_DECREF(__pyx_v_w);
  __Pyx_DECREF(__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4random_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_4random_points[] = "Generate some points for point_flood()";
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4random_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_qty = 0;
  PyObject *__pyx_v_biome = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_w = 0;
  PyObject *__pyx_v_h = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points __pyx_t_8;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__qty,&__pyx_n_s__biome,&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__w,&__pyx_n_s__h,0};
  __Pyx_RefNannySetupContext("random_points");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)Py_None);

    /* "pyspades\mapmaker.pyx":80
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 *                        h=None):             # <<<<<<<<<<<<<<
 *         """Generate some points for point_flood()"""
 *         result = []
 */
    values[5] = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__qty);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__biome);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("random_points", 0, 2, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
        if (value) { values[2] = value; kw_args--; }
      }
      case  3:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
        if (value) { values[3] = value; kw_args--; }
      }
      case  4:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__w);
        if (value) { values[4] = value; kw_args--; }
      }
      case  5:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__h);
        if (value) { values[5] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "random_points") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_qty = values[0];
    __pyx_v_biome = values[1];
    __pyx_v_x = values[2];
    __pyx_v_y = values[3];
    __pyx_v_w = values[4];
    __pyx_v_h = values[5];
  } else {
    __pyx_v_x = ((PyObject *)__pyx_int_0);
    __pyx_v_y = ((PyObject *)__pyx_int_0);

    /* "pyspades\mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */
    __pyx_v_w = ((PyObject *)Py_None);

    /* "pyspades\mapmaker.pyx":80
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,
 *                        h=None):             # <<<<<<<<<<<<<<
 *         """Generate some points for point_flood()"""
 *         result = []
 */
    __pyx_v_h = ((PyObject *)Py_None);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  6:
      __pyx_v_h = PyTuple_GET_ITEM(__pyx_args, 5);
      case  5:
      __pyx_v_w = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4:
      __pyx_v_y = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3:
      __pyx_v_x = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2:
      __pyx_v_biome = PyTuple_GET_ITEM(__pyx_args, 1);
      __pyx_v_qty = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_points", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.random_points");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "pyspades\mapmaker.pyx":79
 *         for idx in xrange(len(self.tmap)):
 *             self.tmap[idx] = random.choice(self.biomes)
 *     cpdef random_points(self, qty, biome, x=0, y=0, w=None,             # <<<<<<<<<<<<<<
 *                        h=None):
 *         """Generate some points for point_flood()"""
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_qty;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_biome;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_x;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __pyx_v_y;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = __pyx_v_w;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_6 = __pyx_v_h;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_8.__pyx_n = 4;
  __pyx_t_8.x = __pyx_t_3;
  __pyx_t_8.y = __pyx_t_4;
  __pyx_t_8.w = __pyx_t_5;
  __pyx_t_8.h = __pyx_t_6;
  __pyx_t_7 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->__pyx_vtab)->random_points(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_t_1, __pyx_t_2, 1, &__pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.random_points");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":92
 *                          biome))
 *         return result
 *     cpdef point_flood(self, points):             # <<<<<<<<<<<<<<
 *         """Each tuple of (x,y,biome) in the "points" list
 *         is round-robined through a flooding
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5point_flood(PyObject *__pyx_v_self, PyObject *__pyx_v_points); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_point_flood(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_points, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_openp;
  PyObject *__pyx_v_closedp;
  long __pyx_v_biomeid;
  PyObject *__pyx_v_plist;
  PyObject *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("point_flood");
  __pyx_v_openp = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_closedp = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_plist = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_p = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__point_flood); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5point_flood)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":98
 *         so that the flooding is as even as possible."""
 * 
 *         openp = deque([deque([p]) for p in points])             # <<<<<<<<<<<<<<
 *         closedp = set([])
 *         biomeid = 0
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__deque); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyList_CheckExact(__pyx_v_points) || PyTuple_CheckExact(__pyx_v_points)) {
    __pyx_t_4 = 0; __pyx_t_2 = __pyx_v_points; __Pyx_INCREF(__pyx_t_2);
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_points); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  }
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_2))) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_2))) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++;
    } else {
      __pyx_t_5 = PyIter_Next(__pyx_t_2);
      if (!__pyx_t_5) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_DECREF(__pyx_v_p);
    __pyx_v_p = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__deque); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_p);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_p);
    __Pyx_GIVEREF(__pyx_v_p);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_t_6));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_6));
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
    if (unlikely(PyList_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_openp);
  __pyx_v_openp = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyspades\mapmaker.pyx":99
 * 
 *         openp = deque([deque([p]) for p in points])
 *         closedp = set([])             # <<<<<<<<<<<<<<
 *         biomeid = 0
 * 
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PySet_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_closedp));
  __pyx_v_closedp = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyspades\mapmaker.pyx":100
 *         openp = deque([deque([p]) for p in points])
 *         closedp = set([])
 *         biomeid = 0             # <<<<<<<<<<<<<<
 * 
 *         while len(openp)>0:
 */
  __pyx_v_biomeid = 0;

  /* "pyspades\mapmaker.pyx":102
 *         biomeid = 0
 * 
 *         while len(openp)>0:             # <<<<<<<<<<<<<<
 *             plist = openp.popleft()
 *             p = plist.popleft()
 */
  while (1) {
    __pyx_t_4 = PyObject_Length(__pyx_v_openp); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = (__pyx_t_4 > 0);
    if (!__pyx_t_8) break;

    /* "pyspades\mapmaker.pyx":103
 * 
 *         while len(openp)>0:
 *             plist = openp.popleft()             # <<<<<<<<<<<<<<
 *             p = plist.popleft()
 *             closedp.add((p[0],p[1]))
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_openp, __pyx_n_s__popleft); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_plist);
    __pyx_v_plist = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pyspades\mapmaker.pyx":104
 *         while len(openp)>0:
 *             plist = openp.popleft()
 *             p = plist.popleft()             # <<<<<<<<<<<<<<
 *             closedp.add((p[0],p[1]))
 *             self.set_repeat(p[0],p[1],p[2])
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_plist, __pyx_n_s__popleft); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_v_p);
    __pyx_v_p = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":105
 *             plist = openp.popleft()
 *             p = plist.popleft()
 *             closedp.add((p[0],p[1]))             # <<<<<<<<<<<<<<
 *             self.set_repeat(p[0],p[1],p[2])
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 */
    if (unlikely(__pyx_v_closedp == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'add'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_t_9 = PySet_Add(__pyx_v_closedp, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":106
 *             p = plist.popleft()
 *             closedp.add((p[0],p[1]))
 *             self.set_repeat(p[0],p[1],p[2])             # <<<<<<<<<<<<<<
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 *                 plist.append((p[0]-1,p[1],p[2]))
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_t_9, __pyx_t_10, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyspades\mapmaker.pyx":107
 *             closedp.add((p[0],p[1]))
 *             self.set_repeat(p[0],p[1],p[2])
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0]-1,p[1],p[2]))
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      __pyx_t_11 = (__Pyx_NegateNonNeg(PySequence_Contains(((PyObject *)__pyx_v_closedp), ((PyObject *)__pyx_t_3)))); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_t_12 = __pyx_t_11;
    } else {
      __pyx_t_12 = __pyx_t_8;
    }
    if (__pyx_t_12) {

      /* "pyspades\mapmaker.pyx":108
 *             self.set_repeat(p[0],p[1],p[2])
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 *                 plist.append((p[0]-1,p[1],p[2]))             # <<<<<<<<<<<<<<
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 *                 plist.append((p[0]+1,p[1],p[2]))
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Append(__pyx_v_plist, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "pyspades\mapmaker.pyx":109
 *             if p[0]>0 and (p[0]-1,p[1]) not in closedp:
 *                 plist.append((p[0]-1,p[1],p[2]))
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0]+1,p[1],p[2]))
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyInt_FromLong((__pyx_v_self->width - 1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_LT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_12) {
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_6 = 0;
      __pyx_t_3 = 0;
      __pyx_t_8 = (__Pyx_NegateNonNeg(PySequence_Contains(((PyObject *)__pyx_v_closedp), ((PyObject *)__pyx_t_2)))); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_t_11 = __pyx_t_8;
    } else {
      __pyx_t_11 = __pyx_t_12;
    }
    if (__pyx_t_11) {

      /* "pyspades\mapmaker.pyx":110
 *                 plist.append((p[0]-1,p[1],p[2]))
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 *                 plist.append((p[0]+1,p[1],p[2]))             # <<<<<<<<<<<<<<
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 *                 plist.append((p[0],p[1]-1,p[2]))
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_p, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Append(__pyx_v_plist, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "pyspades\mapmaker.pyx":111
 *             if p[0]<self.width-1 and (p[0]+1,p[1]) not in closedp:
 *                 plist.append((p[0]+1,p[1],p[2]))
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0],p[1]-1,p[2]))
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_int_0, Py_GT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_11) {
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_12 = (__Pyx_NegateNonNeg(PySequence_Contains(((PyObject *)__pyx_v_closedp), ((PyObject *)__pyx_t_6)))); if (unlikely(__pyx_t_12 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __pyx_t_8 = __pyx_t_12;
    } else {
      __pyx_t_8 = __pyx_t_11;
    }
    if (__pyx_t_8) {

      /* "pyspades\mapmaker.pyx":112
 *                 plist.append((p[0]+1,p[1],p[2]))
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 *                 plist.append((p[0],p[1]-1,p[2]))             # <<<<<<<<<<<<<<
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 *                 plist.append((p[0],p[1]+1,p[2]))
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_6 = 0;
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Append(__pyx_v_plist, ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "pyspades\mapmaker.pyx":113
 *             if p[1]>0 and (p[0],p[1]-1) not in closedp:
 *                 plist.append((p[0],p[1]-1,p[2]))
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:             # <<<<<<<<<<<<<<
 *                 plist.append((p[0],p[1]+1,p[2]))
 *             if len(plist)>0:
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyInt_FromLong((__pyx_v_self->height - 1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_LT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_11 = (__Pyx_NegateNonNeg(PySequence_Contains(((PyObject *)__pyx_v_closedp), ((PyObject *)__pyx_t_3)))); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_t_12 = __pyx_t_11;
    } else {
      __pyx_t_12 = __pyx_t_8;
    }
    if (__pyx_t_12) {

      /* "pyspades\mapmaker.pyx":114
 *                 plist.append((p[0],p[1]-1,p[2]))
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 *                 plist.append((p[0],p[1]+1,p[2]))             # <<<<<<<<<<<<<<
 *             if len(plist)>0:
 *                 openp.append(plist)
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Append(__pyx_v_plist, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "pyspades\mapmaker.pyx":115
 *             if p[1]<self.height-1 and (p[0],p[1]+1) not in closedp:
 *                 plist.append((p[0],p[1]+1,p[2]))
 *             if len(plist)>0:             # <<<<<<<<<<<<<<
 *                 openp.append(plist)
 * 
 */
    __pyx_t_4 = PyObject_Length(__pyx_v_plist); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = (__pyx_t_4 > 0);
    if (__pyx_t_12) {

      /* "pyspades\mapmaker.pyx":116
 *                 plist.append((p[0],p[1]+1,p[2]))
 *             if len(plist)>0:
 *                 openp.append(plist)             # <<<<<<<<<<<<<<
 * 
 *     cpdef jitter(self):
 */
      __pyx_t_2 = __Pyx_PyObject_Append(__pyx_v_openp, __pyx_v_plist); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L11;
    }
    __pyx_L11:;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.point_flood");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_openp);
  __Pyx_DECREF(__pyx_v_closedp);
  __Pyx_DECREF(__pyx_v_plist);
  __Pyx_DECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":92
 *                          biome))
 *         return result
 *     cpdef point_flood(self, points):             # <<<<<<<<<<<<<<
 *         """Each tuple of (x,y,biome) in the "points" list
 *         is round-robined through a flooding
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5point_flood(PyObject *__pyx_v_self, PyObject *__pyx_v_points); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_5point_flood[] = "Each tuple of (x,y,biome) in the \"points\" list\n        is round-robined through a flooding\n        algorithm. The algorithm uses one queue for each flood,\n        so that the flooding is as even as possible.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5point_flood(PyObject *__pyx_v_self, PyObject *__pyx_v_points) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("point_flood");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_points;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->__pyx_vtab)->point_flood(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.point_flood");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":118
 *                 openp.append(plist)
 * 
 *     cpdef jitter(self):             # <<<<<<<<<<<<<<
 *         cdef int x
 *         cdef int y
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6jitter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_jitter(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("jitter");
  __pyx_v_idx = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__jitter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6jitter)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":121
 *         cdef int x
 *         cdef int y
 *         for idx in xrange(len(self.tmap)):             # <<<<<<<<<<<<<<
 *             x = idx % self.width
 *             y = idx // self.height
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->tmap);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = 0; __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_2))) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_2))) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_2);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_idx);
    __pyx_v_idx = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":122
 *         cdef int y
 *         for idx in xrange(len(self.tmap)):
 *             x = idx % self.width             # <<<<<<<<<<<<<<
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Remainder(__pyx_v_idx, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_x = __pyx_t_6;

    /* "pyspades\mapmaker.pyx":123
 *         for idx in xrange(len(self.tmap)):
 *             x = idx % self.width
 *             y = idx // self.height             # <<<<<<<<<<<<<<
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))
 */
    __pyx_t_5 = PyInt_FromLong(__pyx_v_self->height); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyNumber_FloorDivide(__pyx_v_idx, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_y = __pyx_t_6;

    /* "pyspades\mapmaker.pyx":124
 *             x = idx % self.width
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),             # <<<<<<<<<<<<<<
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__randint); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_k_tuple_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyspades\mapmaker.pyx":125
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))             # <<<<<<<<<<<<<<
 *     cpdef create_heightmap(self):
 *         """Return a HeightMap with unfinished color data and a list of
 */
    __pyx_t_7 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__randint); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_6, __pyx_t_8, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "pyspades\mapmaker.pyx":124
 *             x = idx % self.width
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),             # <<<<<<<<<<<<<<
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):
 */
    if (PyObject_SetItem(((PyObject *)__pyx_v_self->tmap), __pyx_v_idx, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.jitter");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":118
 *                 openp.append(plist)
 * 
 *     cpdef jitter(self):             # <<<<<<<<<<<<<<
 *         cdef int x
 *         cdef int y
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6jitter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6jitter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("jitter");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->__pyx_vtab)->jitter(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.jitter");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":126
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):             # <<<<<<<<<<<<<<
 *         """Return a HeightMap with unfinished color data and a list of
 *         gradients. When finished with post-processing, use
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7create_heightmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_create_heightmap(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_hmap = 0;
  PyObject *__pyx_v_idx;
  PyObject *__pyx_v_x;
  PyObject *__pyx_v_y;
  PyObject *__pyx_v_biome;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("create_heightmap");
  __pyx_v_idx = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_x = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_y = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_biome = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__create_heightmap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7create_heightmap)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":130
 *         gradients. When finished with post-processing, use
 *         hmap.rewrite_gradient_fill(gradients). """
 *         cdef HeightMap hmap = HeightMap(0.)             # <<<<<<<<<<<<<<
 * 
 *         # paste a rectangle into each biome's area
 */
  __pyx_t_1 = PyFloat_FromDouble(0.); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pyspades_8mapmaker_HeightMap)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_hmap = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":134
 *         # paste a rectangle into each biome's area
 * 
 *         for idx in xrange(len(self.tmap)):             # <<<<<<<<<<<<<<
 *             x = idx % self.width
 *             y = idx // self.height
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->tmap);
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_4 = PyList_GET_SIZE(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = 0; __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_2))) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_2))) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_2);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_idx);
    __pyx_v_idx = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":135
 * 
 *         for idx in xrange(len(self.tmap)):
 *             x = idx % self.width             # <<<<<<<<<<<<<<
 *             y = idx // self.height
 *             biome = self.tmap[idx]
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Remainder(__pyx_v_idx, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_x);
    __pyx_v_x = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pyspades\mapmaker.pyx":136
 *         for idx in xrange(len(self.tmap)):
 *             x = idx % self.width
 *             y = idx // self.height             # <<<<<<<<<<<<<<
 *             biome = self.tmap[idx]
 *             hmap.rect_noise(x*self.twidth,y*self.theight,
 */
    __pyx_t_5 = PyInt_FromLong(__pyx_v_self->height); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyNumber_FloorDivide(__pyx_v_idx, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_v_y);
    __pyx_v_y = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":137
 *             x = idx % self.width
 *             y = idx // self.height
 *             biome = self.tmap[idx]             # <<<<<<<<<<<<<<
 *             hmap.rect_noise(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,
 */
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self->tmap), __pyx_v_idx); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_biome);
    __pyx_v_biome = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":138
 *             y = idx // self.height
 *             biome = self.tmap[idx]
 *             hmap.rect_noise(x*self.twidth,y*self.theight,             # <<<<<<<<<<<<<<
 *                             self.twidth,self.theight,
 *                             biome.noise,
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->twidth); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_x, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromLong(__pyx_v_self->theight); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_y, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":139
 *             biome = self.tmap[idx]
 *             hmap.rect_noise(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,             # <<<<<<<<<<<<<<
 *                             biome.noise,
 *                             biome.height+random.random()*biome.variation)
 */
    __pyx_t_8 = __pyx_v_self->twidth;
    __pyx_t_9 = __pyx_v_self->theight;

    /* "pyspades\mapmaker.pyx":140
 *             hmap.rect_noise(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,
 *                             biome.noise,             # <<<<<<<<<<<<<<
 *                             biome.height+random.random()*biome.variation)
 *             hmap.rect_color(x*self.twidth,y*self.theight,
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_biome, __pyx_n_s__noise); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":141
 *                             self.twidth,self.theight,
 *                             biome.noise,
 *                             biome.height+random.random()*biome.variation)             # <<<<<<<<<<<<<<
 *             hmap.rect_color(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_biome, __pyx_n_s__height); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__random); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyObject_GetAttr(__pyx_v_biome, __pyx_n_s__variation); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = PyNumber_Multiply(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Add(__pyx_t_1, __pyx_t_12); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_hmap->__pyx_vtab)->rect_noise(__pyx_v_hmap, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_13, 0); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "pyspades\mapmaker.pyx":142
 *                             biome.noise,
 *                             biome.height+random.random()*biome.variation)
 *             hmap.rect_color(x*self.twidth,y*self.theight,             # <<<<<<<<<<<<<<
 *                             self.twidth,self.theight,
 *                             biome.id)
 */
    __pyx_t_11 = PyInt_FromLong(__pyx_v_self->twidth); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = PyNumber_Multiply(__pyx_v_x, __pyx_t_11); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_t_12); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyInt_FromLong(__pyx_v_self->theight); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = PyNumber_Multiply(__pyx_v_y, __pyx_t_12); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_11); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "pyspades\mapmaker.pyx":143
 *                             biome.height+random.random()*biome.variation)
 *             hmap.rect_color(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,             # <<<<<<<<<<<<<<
 *                             biome.id)
 * 
 */
    __pyx_t_7 = __pyx_v_self->twidth;
    __pyx_t_6 = __pyx_v_self->theight;

    /* "pyspades\mapmaker.pyx":144
 *             hmap.rect_color(x*self.twidth,y*self.theight,
 *                             self.twidth,self.theight,
 *                             biome.id)             # <<<<<<<<<<<<<<
 * 
 *         return hmap, self.gradients
 */
    __pyx_t_11 = PyObject_GetAttr(__pyx_v_biome, __pyx_n_s__id); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_14 = __Pyx_PyInt_AsInt(__pyx_t_11); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_hmap->__pyx_vtab)->rect_color(__pyx_v_hmap, __pyx_t_9, __pyx_t_8, __pyx_t_7, __pyx_t_6, __pyx_t_14, 0); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":146
 *                             biome.id)
 * 
 *         return hmap, self.gradients             # <<<<<<<<<<<<<<
 *     cpdef rect_of_point(self, x, y):
 *         x_pos = x*self.twidth
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_hmap));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_hmap));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_hmap));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->gradients));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self->gradients));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->gradients));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.create_heightmap");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_hmap);
  __Pyx_DECREF(__pyx_v_idx);
  __Pyx_DECREF(__pyx_v_x);
  __Pyx_DECREF(__pyx_v_y);
  __Pyx_DECREF(__pyx_v_biome);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":126
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):             # <<<<<<<<<<<<<<
 *         """Return a HeightMap with unfinished color data and a list of
 *         gradients. When finished with post-processing, use
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7create_heightmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8BiomeMap_7create_heightmap[] = "Return a HeightMap with unfinished color data and a list of\n        gradients. When finished with post-processing, use\n        hmap.rewrite_gradient_fill(gradients). ";
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7create_heightmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("create_heightmap");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->__pyx_vtab)->create_heightmap(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.create_heightmap");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":147
 * 
 *         return hmap, self.gradients
 *     cpdef rect_of_point(self, x, y):             # <<<<<<<<<<<<<<
 *         x_pos = x*self.twidth
 *         y_pos = y*self.theight
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_8rect_of_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_8BiomeMap_rect_of_point(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_x_pos;
  PyObject *__pyx_v_y_pos;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("rect_of_point");
  __pyx_v_x_pos = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_y_pos = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rect_of_point); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_8BiomeMap_8rect_of_point)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_x);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x);
      __Pyx_GIVEREF(__pyx_v_x);
      __Pyx_INCREF(__pyx_v_y);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_y);
      __Pyx_GIVEREF(__pyx_v_y);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":148
 *         return hmap, self.gradients
 *     cpdef rect_of_point(self, x, y):
 *         x_pos = x*self.twidth             # <<<<<<<<<<<<<<
 *         y_pos = y*self.theight
 *         return [x_pos, y_pos, x_pos+self.twidth, y_pos+self.theight]
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->twidth); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_x, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_v_x_pos);
  __pyx_v_x_pos = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyspades\mapmaker.pyx":149
 *     cpdef rect_of_point(self, x, y):
 *         x_pos = x*self.twidth
 *         y_pos = y*self.theight             # <<<<<<<<<<<<<<
 *         return [x_pos, y_pos, x_pos+self.twidth, y_pos+self.theight]
 * 
 */
  __pyx_t_3 = PyInt_FromLong(__pyx_v_self->theight); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_y, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_v_y_pos);
  __pyx_v_y_pos = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":150
 *         x_pos = x*self.twidth
 *         y_pos = y*self.theight
 *         return [x_pos, y_pos, x_pos+self.twidth, y_pos+self.theight]             # <<<<<<<<<<<<<<
 * 
 * @cython.final
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->twidth); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Add(__pyx_v_x_pos, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->theight); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_y_pos, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_x_pos);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_x_pos);
  __Pyx_GIVEREF(__pyx_v_x_pos);
  __Pyx_INCREF(__pyx_v_y_pos);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_y_pos);
  __Pyx_GIVEREF(__pyx_v_y_pos);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.rect_of_point");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_x_pos);
  __Pyx_DECREF(__pyx_v_y_pos);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":147
 * 
 *         return hmap, self.gradients
 *     cpdef rect_of_point(self, x, y):             # <<<<<<<<<<<<<<
 *         x_pos = x*self.twidth
 *         y_pos = y*self.theight
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_8rect_of_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_8rect_of_point(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
  __Pyx_RefNannySetupContext("rect_of_point");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_of_point", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "rect_of_point") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_y = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rect_of_point", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.rect_of_point");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_x;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_y;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->__pyx_vtab)->rect_of_point(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self), __pyx_t_1, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.rect_of_point");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":52
 *     A tilemap containing biome data for a HeightMap.
 *     """
 *     cdef public int width             # <<<<<<<<<<<<<<
 *     cdef public int height
 *     cdef public int twidth
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.width.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->width = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.width.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":53
 *     """
 *     cdef public int width
 *     cdef public int height             # <<<<<<<<<<<<<<
 *     cdef public int twidth
 *     cdef public int theight
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->height); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.height.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->height = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.height.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":54
 *     cdef public int width
 *     cdef public int height
 *     cdef public int twidth             # <<<<<<<<<<<<<<
 *     cdef public int theight
 *     cdef public list biomes
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->twidth); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.twidth.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->twidth = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.twidth.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":55
 *     cdef public int height
 *     cdef public int twidth
 *     cdef public int theight             # <<<<<<<<<<<<<<
 *     cdef public list biomes
 *     cdef public list tmap
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->theight); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.theight.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->theight = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.theight.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":56
 *     cdef public int twidth
 *     cdef public int theight
 *     cdef public list biomes             # <<<<<<<<<<<<<<
 *     cdef public list tmap
 *     cdef public list gradients
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes));
  __pyx_r = ((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes = ((PyObject*)__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.biomes.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_2__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_2__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__del__");
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->biomes = ((PyObject*)Py_None);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":57
 *     cdef public int theight
 *     cdef public list biomes
 *     cdef public list tmap             # <<<<<<<<<<<<<<
 *     cdef public list gradients
 *     def __init__(self, biomes, width=32, height=32):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap));
  __pyx_r = ((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap = ((PyObject*)__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.tmap.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_2__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_2__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__del__");
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->tmap = ((PyObject*)Py_None);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":58
 *     cdef public list biomes
 *     cdef public list tmap
 *     cdef public list gradients             # <<<<<<<<<<<<<<
 *     def __init__(self, biomes, width=32, height=32):
 *         self.biomes = biomes
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients));
  __pyx_r = ((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients = ((PyObject*)__pyx_v_value);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.BiomeMap.gradients.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_2__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_2__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__del__");
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients));
  ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)__pyx_v_self)->gradients = ((PyObject*)Py_None);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":158
 *     cdef public object hmap
 *     cdef public object cmap
 *     def __init__(self, height):             # <<<<<<<<<<<<<<
 *         self.width = 512
 *         self.height = 512
 */

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_height = 0;
  long __pyx_v_n;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__height,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__height);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_height = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_height = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.__init__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "pyspades\mapmaker.pyx":159
 *     cdef public object cmap
 *     def __init__(self, height):
 *         self.width = 512             # <<<<<<<<<<<<<<
 *         self.height = 512
 *         self.hmap = array.array('f',[height for n in xrange(0,
 */
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->width = 512;

  /* "pyspades\mapmaker.pyx":160
 *     def __init__(self, height):
 *         self.width = 512
 *         self.height = 512             # <<<<<<<<<<<<<<
 *         self.hmap = array.array('f',[height for n in xrange(0,
 *                                     self.width*self.height)])
 */
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->height = 512;

  /* "pyspades\mapmaker.pyx":161
 *         self.width = 512
 *         self.height = 512
 *         self.hmap = array.array('f',[height for n in xrange(0,             # <<<<<<<<<<<<<<
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "pyspades\mapmaker.pyx":162
 *         self.height = 512
 *         self.hmap = array.array('f',[height for n in xrange(0,
 *                                     self.width*self.height)])             # <<<<<<<<<<<<<<
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 *                                     self.width*self.height)])
 */
  __pyx_t_3 = (((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->width * ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->height);
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_n = __pyx_t_4;

    /* "pyspades\mapmaker.pyx":161
 *         self.width = 512
 *         self.height = 512
 *         self.hmap = array.array('f',[height for n in xrange(0,             # <<<<<<<<<<<<<<
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 */
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_v_height))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__f));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_n_s__f));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__f));
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap);
  __Pyx_DECREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap);
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":163
 *         self.hmap = array.array('f',[height for n in xrange(0,
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,             # <<<<<<<<<<<<<<
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "pyspades\mapmaker.pyx":164
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 *                                     self.width*self.height)])             # <<<<<<<<<<<<<<
 *     cpdef inline double get(self, int x, int y):
 *         return self.hmap[x+y*self.height]
 */
  __pyx_t_3 = (((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->width * ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->height);
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_n = __pyx_t_4;

    /* "pyspades\mapmaker.pyx":163
 *         self.hmap = array.array('f',[height for n in xrange(0,
 *                                     self.width*self.height)])
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,             # <<<<<<<<<<<<<<
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):
 */
    __pyx_t_2 = PyInt_FromLong(0xFF00FFFF); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__i));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__i));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__i));
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap);
  __Pyx_DECREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap);
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap = __pyx_t_1;
  __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":165
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.hmap[x+y*self.height]
 *     cpdef inline double get_repeat(self, int x, int y):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_1get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_8pyspades_8mapmaker_9HeightMap_get(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_skip_dispatch) {
  double __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("get");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__get); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_1get)) {
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":166
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):
 *         return self.hmap[x+y*self.height]             # <<<<<<<<<<<<<<
 *     cpdef inline double get_repeat(self, int x, int y):
 *         """This allows the algorithm to tile at the edges."""
 */
  __pyx_t_6 = (__pyx_v_x + (__pyx_v_y * __pyx_v_self->height));
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_t_6, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pyspades.mapmaker.HeightMap.get");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":165
 *         self.cmap = array.array('i',[<int>0xFF00FFFF for n in xrange(0,
 *                                     self.width*self.height)])
 *     cpdef inline double get(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.hmap[x+y*self.height]
 *     cpdef inline double get_repeat(self, int x, int y):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_1get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_1get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
  __Pyx_RefNannySetupContext("get");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("get", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->get(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":167
 *     cpdef inline double get(self, int x, int y):
 *         return self.hmap[x+y*self.height]
 *     cpdef inline double get_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_2get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_skip_dispatch) {
  double __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("get_repeat");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__get_repeat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_2get_repeat)) {
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":169
 *     cpdef inline double get_repeat(self, int x, int y):
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *     cpdef inline set(self, int x, int y, double val):
 *         self.hmap[x+y*self.height] = val
 */
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_t_6, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pyspades.mapmaker.HeightMap.get_repeat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":167
 *     cpdef inline double get(self, int x, int y):
 *         return self.hmap[x+y*self.height]
 *     cpdef inline double get_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_2get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_2get_repeat[] = "This allows the algorithm to tile at the edges.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_2get_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
  __Pyx_RefNannySetupContext("get_repeat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("get_repeat", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_repeat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_repeat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_repeat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->get_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_repeat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":170
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         self.hmap[x+y*self.height] = val
 *     cpdef inline set_repeat(self, int x, int y, double val):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_3set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("set");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__set); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_3set)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":171
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set(self, int x, int y, double val):
 *         self.hmap[x+y*self.height] = val             # <<<<<<<<<<<<<<
 *     cpdef inline set_repeat(self, int x, int y, double val):
 *         """This allows the algorithm to tile at the edges."""
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = (__pyx_v_x + (__pyx_v_y * __pyx_v_self->height));
  if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_t_6, __pyx_t_1, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":170
 *         """This allows the algorithm to tile at the edges."""
 *         return self.hmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         self.hmap[x+y*self.height] = val
 *     cpdef inline set_repeat(self, int x, int y, double val):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_3set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_3set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  double __pyx_v_val;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__val,0};
  __Pyx_RefNannySetupContext("set");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->set(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":172
 *     cpdef inline set(self, int x, int y, double val):
 *         self.hmap[x+y*self.height] = val
 *     cpdef inline set_repeat(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("set_repeat");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__set_repeat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_4set_repeat)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":174
 *     cpdef inline set_repeat(self, int x, int y, double val):
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val             # <<<<<<<<<<<<<<
 *     cpdef inline add_repeat(self, int x, int y, double val):
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_t_6, __pyx_t_1, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_repeat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":172
 *     cpdef inline set(self, int x, int y, double val):
 *         self.hmap[x+y*self.height] = val
 *     cpdef inline set_repeat(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_4set_repeat[] = "This allows the algorithm to tile at the edges.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4set_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  double __pyx_v_val;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__val,0};
  __Pyx_RefNannySetupContext("set_repeat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set_repeat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_repeat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->set_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_repeat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":175
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline add_repeat(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_5add_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_add_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_val, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("add_repeat");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__add_repeat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_5add_repeat)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":176
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline add_repeat(self, int x, int y, double val):
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val             # <<<<<<<<<<<<<<
 *     cpdef inline int get_col(self, int x, int y):
 *         return self.cmap[x+y*self.height]
 */
  __Pyx_INCREF(__pyx_v_self->hmap);
  __pyx_t_1 = __pyx_v_self->hmap;
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_6, sizeof(int), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetItemInt(__pyx_t_1, __pyx_t_6, __pyx_t_3, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.add_repeat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":175
 *         """This allows the algorithm to tile at the edges."""
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline add_repeat(self, int x, int y, double val):             # <<<<<<<<<<<<<<
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_5add_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_5add_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  double __pyx_v_val;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__val,0};
  __Pyx_RefNannySetupContext("add_repeat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("add_repeat", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("add_repeat", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "add_repeat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.add_repeat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->add_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.add_repeat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":177
 *     cpdef inline add_repeat(self, int x, int y, double val):
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6get_col(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_9HeightMap_get_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_skip_dispatch) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_col");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__get_col); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_6get_col)) {
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":178
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):
 *         return self.cmap[x+y*self.height]             # <<<<<<<<<<<<<<
 *     cpdef inline int get_col_repeat(self, int x, int y):
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 */
  __pyx_t_5 = (__pyx_v_x + (__pyx_v_y * __pyx_v_self->height));
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_t_5, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pyspades.mapmaker.HeightMap.get_col");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":177
 *     cpdef inline add_repeat(self, int x, int y, double val):
 *         self.hmap[(x%self.width)+(y%self.height)*self.width] += val
 *     cpdef inline int get_col(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6get_col(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6get_col(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
  __Pyx_RefNannySetupContext("get_col");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("get_col", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_col") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_col", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_col");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->get_col(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_col");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":179
 *     cpdef inline int get_col(self, int x, int y):
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_7get_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_9HeightMap_get_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_skip_dispatch) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_col_repeat");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__get_col_repeat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_7get_col_repeat)) {
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":180
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 */
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_t_5, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pyspades.mapmaker.HeightMap.get_col_repeat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":179
 *     cpdef inline int get_col(self, int x, int y):
 *         return self.cmap[x+y*self.height]
 *     cpdef inline int get_col_repeat(self, int x, int y):             # <<<<<<<<<<<<<<
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_7get_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_7get_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
  __Pyx_RefNannySetupContext("get_col_repeat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("get_col_repeat", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_col_repeat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_col_repeat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_col_repeat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->get_col_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.get_col_repeat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":181
 *     cpdef inline int get_col_repeat(self, int x, int y):
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):             # <<<<<<<<<<<<<<
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_8set_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_val, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("set_col_repeat");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__set_col_repeat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_8set_col_repeat)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":182
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val             # <<<<<<<<<<<<<<
 *     cpdef inline fill_col(self, int col):
 *         for n in xrange(len(self.cmap)):
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
  if (__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_t_6, __pyx_t_1, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_col_repeat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":181
 *     cpdef inline int get_col_repeat(self, int x, int y):
 *         return self.cmap[(x%self.width)+(y%self.height)*self.width]
 *     cpdef inline set_col_repeat(self, int x, int y, int val):             # <<<<<<<<<<<<<<
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_8set_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_8set_col_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_val;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__val,0};
  __Pyx_RefNannySetupContext("set_col_repeat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_col_repeat", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_col_repeat", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set_col_repeat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_val == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_val = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_val == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_col_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_col_repeat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->set_col_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_val, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.set_col_repeat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":183
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):             # <<<<<<<<<<<<<<
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_9fill_col(PyObject *__pyx_v_self, PyObject *__pyx_arg_col); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_fill_col(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_col, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("fill_col");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__fill_col); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_9fill_col)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_col); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":184
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):
 *         for n in xrange(len(self.cmap)):             # <<<<<<<<<<<<<<
 *             self.cmap[n] = col
 *     cpdef mult_repeat(self, int x, int y, double mult):
 */
  __pyx_t_1 = __pyx_v_self->cmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_n = __pyx_t_5;

    /* "pyspades\mapmaker.pyx":185
 *     cpdef inline fill_col(self, int col):
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col             # <<<<<<<<<<<<<<
 *     cpdef mult_repeat(self, int x, int y, double mult):
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_col); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_n, __pyx_t_1, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.fill_col");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":183
 *     cpdef inline set_col_repeat(self, int x, int y, int val):
 *         self.cmap[(x%self.width)+(y%self.height)*self.width] = val
 *     cpdef inline fill_col(self, int col):             # <<<<<<<<<<<<<<
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_9fill_col(PyObject *__pyx_v_self, PyObject *__pyx_arg_col); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_9fill_col(PyObject *__pyx_v_self, PyObject *__pyx_arg_col) {
  int __pyx_v_col;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fill_col");
  assert(__pyx_arg_col); {
    __pyx_v_col = __Pyx_PyInt_AsInt(__pyx_arg_col); if (unlikely((__pyx_v_col == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.fill_col");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->fill_col(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_col, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.fill_col");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":186
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col
 *     cpdef mult_repeat(self, int x, int y, double mult):             # <<<<<<<<<<<<<<
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_10mult_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_mult_repeat(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, double __pyx_v_mult, int __pyx_skip_dispatch) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("mult_repeat");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__mult_repeat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_10mult_repeat)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_mult); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":187
 *             self.cmap[n] = col
 *     cpdef mult_repeat(self, int x, int y, double mult):
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width             # <<<<<<<<<<<<<<
 *         self.hmap[idx] *= mult
 *     cpdef seed(self, double jitter, double midpoint):
 */
  if (unlikely(__pyx_v_self->width == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(__pyx_v_self->height == 0)) {
    PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_idx = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));

  /* "pyspades\mapmaker.pyx":188
 *     cpdef mult_repeat(self, int x, int y, double mult):
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult             # <<<<<<<<<<<<<<
 *     cpdef seed(self, double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 */
  __Pyx_INCREF(__pyx_v_self->hmap);
  __pyx_t_1 = __pyx_v_self->hmap;
  __pyx_t_6 = __pyx_v_idx;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_6, sizeof(int), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_mult); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetItemInt(__pyx_t_1, __pyx_t_6, __pyx_t_3, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.mult_repeat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":186
 *         for n in xrange(len(self.cmap)):
 *             self.cmap[n] = col
 *     cpdef mult_repeat(self, int x, int y, double mult):             # <<<<<<<<<<<<<<
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_10mult_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_10mult_repeat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  double __pyx_v_mult;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__mult,0};
  __Pyx_RefNannySetupContext("mult_repeat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mult_repeat", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__mult);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mult_repeat", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mult_repeat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_mult = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_mult == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_mult = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_mult == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mult_repeat", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.mult_repeat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->mult_repeat(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_mult, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.mult_repeat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":189
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult
 *     cpdef seed(self, double jitter, double midpoint):             # <<<<<<<<<<<<<<
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_11seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_seed(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jitter, double __pyx_v_midpoint, int __pyx_skip_dispatch) {
  double __pyx_v_halfjitter;
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("seed");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__seed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_11seed)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_jitter); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_midpoint); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":190
 *         self.hmap[idx] *= mult
 *     cpdef seed(self, double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5             # <<<<<<<<<<<<<<
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 */
  __pyx_v_halfjitter = (__pyx_v_jitter * 0.5);

  /* "pyspades\mapmaker.pyx":191
 *     cpdef seed(self, double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 *                                          halfjitter)
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_idx = __pyx_t_6;

    /* "pyspades\mapmaker.pyx":192
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = midpoint + (random.random()*jitter -             # <<<<<<<<<<<<<<
 *                                          halfjitter)
 *     cpdef peaking(self):
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_midpoint); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__random); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_jitter); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyspades\mapmaker.pyx":193
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 *                                          halfjitter)             # <<<<<<<<<<<<<<
 *     cpdef peaking(self):
 *         """Adds a "peaking" feel to the map."""
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_halfjitter); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":192
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = midpoint + (random.random()*jitter -             # <<<<<<<<<<<<<<
 *                                          halfjitter)
 *     cpdef peaking(self):
 */
    if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_4, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.seed");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":189
 *         cdef int idx = (x%self.width)+(y%self.height)*self.width
 *         self.hmap[idx] *= mult
 *     cpdef seed(self, double jitter, double midpoint):             # <<<<<<<<<<<<<<
 *         cdef double halfjitter = jitter * 0.5
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_11seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_11seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_jitter;
  double __pyx_v_midpoint;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__jitter,&__pyx_n_s__midpoint,0};
  __Pyx_RefNannySetupContext("seed");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__jitter);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midpoint);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("seed", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "seed") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_jitter = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_jitter == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_midpoint = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_midpoint == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_jitter = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_jitter == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_midpoint = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_midpoint == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("seed", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.seed");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->seed(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_jitter, __pyx_v_midpoint, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.seed");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":194
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 *                                          halfjitter)
 *     cpdef peaking(self):             # <<<<<<<<<<<<<<
 *         """Adds a "peaking" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_12peaking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_peaking(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("peaking");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__peaking); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_12peaking)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":196
 *     cpdef peaking(self):
 *         """Adds a "peaking" feel to the map."""
 *         for idx in xrange(len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = self.hmap[idx] * self.hmap[idx]
 *     cpdef dipping(self):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "pyspades\mapmaker.pyx":197
 *         """Adds a "peaking" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx] * self.hmap[idx]             # <<<<<<<<<<<<<<
 *     cpdef dipping(self):
 *         """Adds a "dipping" feel to the map."""
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_5, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.peaking");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":194
 *             self.hmap[idx] = midpoint + (random.random()*jitter -
 *                                          halfjitter)
 *     cpdef peaking(self):             # <<<<<<<<<<<<<<
 *         """Adds a "peaking" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_12peaking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_12peaking[] = "Adds a \"peaking\" feel to the map.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_12peaking(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("peaking");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->peaking(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.peaking");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":198
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx] * self.hmap[idx]
 *     cpdef dipping(self):             # <<<<<<<<<<<<<<
 *         """Adds a "dipping" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_13dipping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_dipping(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("dipping");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__dipping); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_13dipping)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":200
 *     cpdef dipping(self):
 *         """Adds a "dipping" feel to the map."""
 *         for idx in xrange(len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi))
 *     cpdef rolling(self):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "pyspades\mapmaker.pyx":201
 *         """Adds a "dipping" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi))             # <<<<<<<<<<<<<<
 *     cpdef rolling(self):
 *         """Adds a "rolling" feel to the map."""
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__math); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__sin); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__math); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__pi); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_5, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.dipping");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":198
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx] * self.hmap[idx]
 *     cpdef dipping(self):             # <<<<<<<<<<<<<<
 *         """Adds a "dipping" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_13dipping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_13dipping[] = "Adds a \"dipping\" feel to the map.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_13dipping(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dipping");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->dipping(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.dipping");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":202
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi))
 *     cpdef rolling(self):             # <<<<<<<<<<<<<<
 *         """Adds a "rolling" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_14rolling(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rolling(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("rolling");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rolling); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_14rolling)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":204
 *     cpdef rolling(self):
 *         """Adds a "rolling" feel to the map."""
 *         for idx in xrange(len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi/2))
 *     cpdef smoothing(self):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "pyspades\mapmaker.pyx":205
 *         """Adds a "rolling" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi/2))             # <<<<<<<<<<<<<<
 *     cpdef smoothing(self):
 *         """Does some simple averaging to bring down the noise level."""
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__math); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__sin); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__math); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__pi); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_int_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_6, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rolling");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":202
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi))
 *     cpdef rolling(self):             # <<<<<<<<<<<<<<
 *         """Adds a "rolling" feel to the map."""
 *         for idx in xrange(len(self.hmap)):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_14rolling(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_14rolling[] = "Adds a \"rolling\" feel to the map.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_14rolling(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rolling");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->rolling(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rolling");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":206
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi/2))
 *     cpdef smoothing(self):             # <<<<<<<<<<<<<<
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_15smoothing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_smoothing(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_x;
  PyObject *__pyx_v_y;
  double __pyx_v_top;
  double __pyx_v_left;
  double __pyx_v_right;
  double __pyx_v_bot;
  PyObject *__pyx_v_center;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("smoothing");
  __pyx_v_x = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_y = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_center = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__smoothing); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_15smoothing)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":208
 *     cpdef smoothing(self):
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):             # <<<<<<<<<<<<<<
 *             for y in xrange(0,self.height):
 *                 top = self.get_repeat(x,y-1)
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = 0; __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_2))) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_2))) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_2);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_x);
    __pyx_v_x = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":209
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):
 *             for y in xrange(0,self.height):             # <<<<<<<<<<<<<<
 *                 top = self.get_repeat(x,y-1)
 *                 left = self.get_repeat(x-1,y)
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = 0; __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5);
    } else {
      __pyx_t_4 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_5)) break;
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++;
      } else if (likely(PyTuple_CheckExact(__pyx_t_5))) {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++;
      } else {
        __pyx_t_1 = PyIter_Next(__pyx_t_5);
        if (!__pyx_t_1) {
          if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_DECREF(__pyx_v_y);
      __pyx_v_y = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "pyspades\mapmaker.pyx":210
 *         for x in xrange(0,self.width):
 *             for y in xrange(0,self.height):
 *                 top = self.get_repeat(x,y-1)             # <<<<<<<<<<<<<<
 *                 left = self.get_repeat(x-1,y)
 *                 right = self.get_repeat(x+1,y)
 */
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_x); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_y, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_top = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_6, __pyx_t_7, 0);

      /* "pyspades\mapmaker.pyx":211
 *             for y in xrange(0,self.height):
 *                 top = self.get_repeat(x,y-1)
 *                 left = self.get_repeat(x-1,y)             # <<<<<<<<<<<<<<
 *                 right = self.get_repeat(x+1,y)
 *                 bot = self.get_repeat(x,y+1)
 */
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_x, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_y); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_left = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_7, __pyx_t_6, 0);

      /* "pyspades\mapmaker.pyx":212
 *                 top = self.get_repeat(x,y-1)
 *                 left = self.get_repeat(x-1,y)
 *                 right = self.get_repeat(x+1,y)             # <<<<<<<<<<<<<<
 *                 bot = self.get_repeat(x,y+1)
 *                 center = self.hmap[x+y*self.width]
 */
      __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_y); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_right = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_6, __pyx_t_7, 0);

      /* "pyspades\mapmaker.pyx":213
 *                 left = self.get_repeat(x-1,y)
 *                 right = self.get_repeat(x+1,y)
 *                 bot = self.get_repeat(x,y+1)             # <<<<<<<<<<<<<<
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 */
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_x); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = PyNumber_Add(__pyx_v_y, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_bot = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_7, __pyx_t_6, 0);

      /* "pyspades\mapmaker.pyx":214
 *                 right = self.get_repeat(x+1,y)
 *                 bot = self.get_repeat(x,y+1)
 *                 center = self.hmap[x+y*self.width]             # <<<<<<<<<<<<<<
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 *     cpdef midpoint_displace(self, double jittervalue, \
 */
      __pyx_t_1 = PyInt_FromLong(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyNumber_Multiply(__pyx_v_y, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_GetItem(__pyx_v_self->hmap, __pyx_t_1); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_v_center);
      __pyx_v_center = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "pyspades\mapmaker.pyx":215
 *                 bot = self.get_repeat(x,y+1)
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5             # <<<<<<<<<<<<<<
 *     cpdef midpoint_displace(self, double jittervalue, \
 *                           double spanscalingmultiplier, \
 */
      __pyx_t_8 = PyFloat_FromDouble((((__pyx_v_top + __pyx_v_left) + __pyx_v_right) + __pyx_v_bot)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyNumber_Add(__pyx_t_8, __pyx_v_center); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_int_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyInt_FromLong(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyNumber_Multiply(__pyx_v_y, __pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_t_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (PyObject_SetItem(__pyx_v_self->hmap, __pyx_t_1, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.smoothing");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_x);
  __Pyx_DECREF(__pyx_v_y);
  __Pyx_DECREF(__pyx_v_center);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":206
 *         for idx in xrange(len(self.hmap)):
 *             self.hmap[idx] = math.sin(self.hmap[idx]*(math.pi/2))
 *     cpdef smoothing(self):             # <<<<<<<<<<<<<<
 *         """Does some simple averaging to bring down the noise level."""
 *         for x in xrange(0,self.width):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_15smoothing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_15smoothing[] = "Does some simple averaging to bring down the noise level.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_15smoothing(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("smoothing");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->smoothing(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.smoothing");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":216
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 *     cpdef midpoint_displace(self, double jittervalue, \             # <<<<<<<<<<<<<<
 *                           double spanscalingmultiplier, \
 *                             int skip=0):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_16midpoint_displace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_midpoint_displace(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_jittervalue, double __pyx_v_spanscalingmultiplier, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace *__pyx_optional_args) {
  int __pyx_v_skip = ((int)0);
  int __pyx_v_span;
  float __pyx_v_spanscaling;
  float __pyx_v_jitterrange;
  float __pyx_v_jitteroffset;
  int __pyx_v_halfspan;
  float __pyx_v_topleft;
  float __pyx_v_topright;
  float __pyx_v_botleft;
  float __pyx_v_botright;
  float __pyx_v_center;
  long __pyx_v_iterations;
  PyObject *__pyx_v_x;
  PyObject *__pyx_v_y;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  float __pyx_t_13;
  __Pyx_RefNannySetupContext("midpoint_displace");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_skip = __pyx_optional_args->skip;
    }
  }
  __pyx_v_x = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_y = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__midpoint_displace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_16midpoint_displace)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_jittervalue); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_spanscalingmultiplier); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_skip); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":221
 *         """Midpoint displacement with the diamond-square algorithm."""
 * 
 *         cdef int span = self.width+1             # <<<<<<<<<<<<<<
 *         cdef float spanscaling = 1.
 *         cdef float jitterrange
 */
  __pyx_v_span = (__pyx_v_self->width + 1);

  /* "pyspades\mapmaker.pyx":222
 * 
 *         cdef int span = self.width+1
 *         cdef float spanscaling = 1.             # <<<<<<<<<<<<<<
 *         cdef float jitterrange
 *         cdef float jitteroffset
 */
  __pyx_v_spanscaling = 1.;

  /* "pyspades\mapmaker.pyx":232
 *         cdef float center
 * 
 *         for iterations in xrange(9): # hardcoded for 512x512             # <<<<<<<<<<<<<<
 *             if skip>0:
 *                 skip-=1
 */
  for (__pyx_t_6 = 0; __pyx_t_6 < 9; __pyx_t_6+=1) {
    __pyx_v_iterations = __pyx_t_6;

    /* "pyspades\mapmaker.pyx":233
 * 
 *         for iterations in xrange(9): # hardcoded for 512x512
 *             if skip>0:             # <<<<<<<<<<<<<<
 *                 skip-=1
 *                 span = span >> 1
 */
    __pyx_t_7 = (__pyx_v_skip > 0);
    if (__pyx_t_7) {

      /* "pyspades\mapmaker.pyx":234
 *         for iterations in xrange(9): # hardcoded for 512x512
 *             if skip>0:
 *                 skip-=1             # <<<<<<<<<<<<<<
 *                 span = span >> 1
 *                 spanscaling = spanscaling * spanscalingmultiplier
 */
      __pyx_v_skip = (__pyx_v_skip - 1);

      /* "pyspades\mapmaker.pyx":235
 *             if skip>0:
 *                 skip-=1
 *                 span = span >> 1             # <<<<<<<<<<<<<<
 *                 spanscaling = spanscaling * spanscalingmultiplier
 *                 continue
 */
      __pyx_v_span = (__pyx_v_span >> 1);

      /* "pyspades\mapmaker.pyx":236
 *                 skip-=1
 *                 span = span >> 1
 *                 spanscaling = spanscaling * spanscalingmultiplier             # <<<<<<<<<<<<<<
 *                 continue
 *             jitterrange = jittervalue * spanscaling
 */
      __pyx_v_spanscaling = (__pyx_v_spanscaling * __pyx_v_spanscalingmultiplier);

      /* "pyspades\mapmaker.pyx":237
 *                 span = span >> 1
 *                 spanscaling = spanscaling * spanscalingmultiplier
 *                 continue             # <<<<<<<<<<<<<<
 *             jitterrange = jittervalue * spanscaling
 *             jitteroffset = - jitterrange / 2
 */
      goto __pyx_L3_continue;
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "pyspades\mapmaker.pyx":238
 *                 spanscaling = spanscaling * spanscalingmultiplier
 *                 continue
 *             jitterrange = jittervalue * spanscaling             # <<<<<<<<<<<<<<
 *             jitteroffset = - jitterrange / 2
 *             for x in xrange(0,self.width,span):
 */
    __pyx_v_jitterrange = (__pyx_v_jittervalue * __pyx_v_spanscaling);

    /* "pyspades\mapmaker.pyx":239
 *                 continue
 *             jitterrange = jittervalue * spanscaling
 *             jitteroffset = - jitterrange / 2             # <<<<<<<<<<<<<<
 *             for x in xrange(0,self.width,span):
 *                 for y in xrange(0,self.height,span):
 */
    __pyx_v_jitteroffset = ((-__pyx_v_jitterrange) / 2.0);

    /* "pyspades\mapmaker.pyx":240
 *             jitterrange = jittervalue * spanscaling
 *             jitteroffset = - jitterrange / 2
 *             for x in xrange(0,self.width,span):             # <<<<<<<<<<<<<<
 *                 for y in xrange(0,self.height,span):
 *                     halfspan = span >> 1
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyInt_FromLong(__pyx_v_span); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_8 = 0; __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
    } else {
      __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_5)) break;
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++;
      } else if (likely(PyTuple_CheckExact(__pyx_t_5))) {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++;
      } else {
        __pyx_t_4 = PyIter_Next(__pyx_t_5);
        if (!__pyx_t_4) {
          if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "pyspades\mapmaker.pyx":241
 *             jitteroffset = - jitterrange / 2
 *             for x in xrange(0,self.width,span):
 *                 for y in xrange(0,self.height,span):             # <<<<<<<<<<<<<<
 *                     halfspan = span >> 1
 *                     topleft = self.get_repeat(x,y)
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_self->height); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyInt_FromLong(__pyx_v_span); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_INCREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_4 = 0;
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_9 = 0; __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
      } else {
        __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++;
        } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++;
        } else {
          __pyx_t_1 = PyIter_Next(__pyx_t_3);
          if (!__pyx_t_1) {
            if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_DECREF(__pyx_v_y);
        __pyx_v_y = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "pyspades\mapmaker.pyx":242
 *             for x in xrange(0,self.width,span):
 *                 for y in xrange(0,self.height,span):
 *                     halfspan = span >> 1             # <<<<<<<<<<<<<<
 *                     topleft = self.get_repeat(x,y)
 *                     topright = self.get_repeat((x+span),y)
 */
        __pyx_v_halfspan = (__pyx_v_span >> 1);

        /* "pyspades\mapmaker.pyx":243
 *                 for y in xrange(0,self.height,span):
 *                     halfspan = span >> 1
 *                     topleft = self.get_repeat(x,y)             # <<<<<<<<<<<<<<
 *                     topright = self.get_repeat((x+span),y)
 *                     botleft = self.get_repeat(x,(y+span))
 */
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_x); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_y); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_topleft = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_10, __pyx_t_11, 0);

        /* "pyspades\mapmaker.pyx":244
 *                     halfspan = span >> 1
 *                     topleft = self.get_repeat(x,y)
 *                     topright = self.get_repeat((x+span),y)             # <<<<<<<<<<<<<<
 *                     botleft = self.get_repeat(x,(y+span))
 *                     botright = self.get_repeat((x+span),(y+span))
 */
        __pyx_t_1 = PyInt_FromLong(__pyx_v_span); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_y); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_topright = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_10, 0);

        /* "pyspades\mapmaker.pyx":245
 *                     topleft = self.get_repeat(x,y)
 *                     topright = self.get_repeat((x+span),y)
 *                     botleft = self.get_repeat(x,(y+span))             # <<<<<<<<<<<<<<
 *                     botright = self.get_repeat((x+span),(y+span))
 *                     center = (topleft+topright+botleft+botright) * 0.25\
 */
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_x); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_4 = PyInt_FromLong(__pyx_v_span); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_botleft = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_10, __pyx_t_11, 0);

        /* "pyspades\mapmaker.pyx":246
 *                     topright = self.get_repeat((x+span),y)
 *                     botleft = self.get_repeat(x,(y+span))
 *                     botright = self.get_repeat((x+span),(y+span))             # <<<<<<<<<<<<<<
 *                     center = (topleft+topright+botleft+botright) * 0.25\
 *                              + (random.random() * jitterrange + jitteroffset)
 */
        __pyx_t_1 = PyInt_FromLong(__pyx_v_span); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyInt_FromLong(__pyx_v_span); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_botright = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_10, 0);

        /* "pyspades\mapmaker.pyx":247
 *                     botleft = self.get_repeat(x,(y+span))
 *                     botright = self.get_repeat((x+span),(y+span))
 *                     center = (topleft+topright+botleft+botright) * 0.25\             # <<<<<<<<<<<<<<
 *                              + (random.random() * jitterrange + jitteroffset)
 * 
 */
        __pyx_t_1 = PyFloat_FromDouble(((((__pyx_v_topleft + __pyx_v_topright) + __pyx_v_botleft) + __pyx_v_botright) * 0.25)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);

        /* "pyspades\mapmaker.pyx":248
 *                     botright = self.get_repeat((x+span),(y+span))
 *                     center = (topleft+topright+botleft+botright) * 0.25\
 *                              + (random.random() * jitterrange + jitteroffset)             # <<<<<<<<<<<<<<
 * 
 *                     self.set_repeat(x+halfspan,y,(topleft+topright+center)*0.33)
 */
        __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__random); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyFloat_FromDouble(__pyx_v_jitterrange); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyFloat_FromDouble(__pyx_v_jitteroffset); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyNumber_Add(__pyx_t_12, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_center = __pyx_t_13;

        /* "pyspades\mapmaker.pyx":250
 *                              + (random.random() * jitterrange + jitteroffset)
 * 
 *                     self.set_repeat(x+halfspan,y,(topleft+topright+center)*0.33)             # <<<<<<<<<<<<<<
 *                     self.set_repeat(x,y+halfspan,(topleft+botleft+center)*0.33)
 *                     self.set_repeat(x+halfspan,y+span,
 */
        __pyx_t_2 = PyInt_FromLong(__pyx_v_halfspan); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_y); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_4 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_t_10, __pyx_t_11, (((__pyx_v_topleft + __pyx_v_topright) + __pyx_v_center) * 0.33), 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pyspades\mapmaker.pyx":251
 * 
 *                     self.set_repeat(x+halfspan,y,(topleft+topright+center)*0.33)
 *                     self.set_repeat(x,y+halfspan,(topleft+botleft+center)*0.33)             # <<<<<<<<<<<<<<
 *                     self.set_repeat(x+halfspan,y+span,
 *                                     (botleft+botright+center)*0.33)
 */
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_x); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_4 = PyInt_FromLong(__pyx_v_halfspan); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_10, (((__pyx_v_topleft + __pyx_v_botleft) + __pyx_v_center) * 0.33), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyspades\mapmaker.pyx":252
 *                     self.set_repeat(x+halfspan,y,(topleft+topright+center)*0.33)
 *                     self.set_repeat(x,y+halfspan,(topleft+botleft+center)*0.33)
 *                     self.set_repeat(x+halfspan,y+span,             # <<<<<<<<<<<<<<
 *                                     (botleft+botright+center)*0.33)
 *                     self.set_repeat(x+span,y+halfspan,
 */
        __pyx_t_2 = PyInt_FromLong(__pyx_v_halfspan); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyInt_FromLong(__pyx_v_span); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyspades\mapmaker.pyx":253
 *                     self.set_repeat(x,y+halfspan,(topleft+botleft+center)*0.33)
 *                     self.set_repeat(x+halfspan,y+span,
 *                                     (botleft+botright+center)*0.33)             # <<<<<<<<<<<<<<
 *                     self.set_repeat(x+span,y+halfspan,
 *                                     (topright+botright+center)*0.33)
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_t_10, __pyx_t_11, (((__pyx_v_botleft + __pyx_v_botright) + __pyx_v_center) * 0.33), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyspades\mapmaker.pyx":254
 *                     self.set_repeat(x+halfspan,y+span,
 *                                     (botleft+botright+center)*0.33)
 *                     self.set_repeat(x+span,y+halfspan,             # <<<<<<<<<<<<<<
 *                                     (topright+botright+center)*0.33)
 *                     self.set_repeat(x + halfspan, y + halfspan, center)
 */
        __pyx_t_2 = PyInt_FromLong(__pyx_v_span); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyInt_FromLong(__pyx_v_halfspan); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyspades\mapmaker.pyx":255
 *                                     (botleft+botright+center)*0.33)
 *                     self.set_repeat(x+span,y+halfspan,
 *                                     (topright+botright+center)*0.33)             # <<<<<<<<<<<<<<
 *                     self.set_repeat(x + halfspan, y + halfspan, center)
 *             span = span >> 1
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_t_11, __pyx_t_10, (((__pyx_v_topright + __pyx_v_botright) + __pyx_v_center) * 0.33), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyspades\mapmaker.pyx":256
 *                     self.set_repeat(x+span,y+halfspan,
 *                                     (topright+botright+center)*0.33)
 *                     self.set_repeat(x + halfspan, y + halfspan, center)             # <<<<<<<<<<<<<<
 *             span = span >> 1
 *             spanscaling = spanscaling * spanscalingmultiplier
 */
        __pyx_t_2 = PyInt_FromLong(__pyx_v_halfspan); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyNumber_Add(__pyx_v_x, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyInt_FromLong(__pyx_v_halfspan); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyNumber_Add(__pyx_v_y, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_t_10, __pyx_t_11, __pyx_v_center, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyspades\mapmaker.pyx":257
 *                                     (topright+botright+center)*0.33)
 *                     self.set_repeat(x + halfspan, y + halfspan, center)
 *             span = span >> 1             # <<<<<<<<<<<<<<
 *             spanscaling = spanscaling * spanscalingmultiplier
 *     cpdef jitter_heights(self, double amount):
 */
    __pyx_v_span = (__pyx_v_span >> 1);

    /* "pyspades\mapmaker.pyx":258
 *                     self.set_repeat(x + halfspan, y + halfspan, center)
 *             span = span >> 1
 *             spanscaling = spanscaling * spanscalingmultiplier             # <<<<<<<<<<<<<<
 *     cpdef jitter_heights(self, double amount):
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 */
    __pyx_v_spanscaling = (__pyx_v_spanscaling * __pyx_v_spanscalingmultiplier);
    __pyx_L3_continue:;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.midpoint_displace");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_x);
  __Pyx_DECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":216
 *                 center = self.hmap[x+y*self.width]
 *                 self.hmap[x+y*self.width] = (top + left + right + bot + center)/5
 *     cpdef midpoint_displace(self, double jittervalue, \             # <<<<<<<<<<<<<<
 *                           double spanscalingmultiplier, \
 *                             int skip=0):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_16midpoint_displace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_16midpoint_displace[] = "Midpoint displacement with the diamond-square algorithm.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_16midpoint_displace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_jittervalue;
  double __pyx_v_spanscalingmultiplier;
  int __pyx_v_skip;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__jittervalue,&__pyx_n_s_3,&__pyx_n_s__skip,0};
  __Pyx_RefNannySetupContext("midpoint_displace");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__jittervalue);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_3);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("midpoint_displace", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__skip);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "midpoint_displace") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_jittervalue = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_jittervalue == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_spanscalingmultiplier = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_spanscalingmultiplier == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_skip = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_skip == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_skip = ((int)0);
    }
  } else {
    __pyx_v_skip = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3:
      __pyx_v_skip = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_skip == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2:
      __pyx_v_spanscalingmultiplier = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_spanscalingmultiplier == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_v_jittervalue = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_jittervalue == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("midpoint_displace", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.midpoint_displace");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.skip = __pyx_v_skip;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->midpoint_displace(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_jittervalue, __pyx_v_spanscalingmultiplier, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.midpoint_displace");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":259
 *             span = span >> 1
 *             spanscaling = spanscaling * spanscalingmultiplier
 *     cpdef jitter_heights(self, double amount):             # <<<<<<<<<<<<<<
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_17jitter_heights(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_heights(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount, int __pyx_skip_dispatch) {
  int __pyx_v_nx;
  int __pyx_v_ny;
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("jitter_heights");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__jitter_heights); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_17jitter_heights)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":261
 *     cpdef jitter_heights(self, double amount):
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0             # <<<<<<<<<<<<<<
 *         cdef int ny = 0
 *         cdef int idx = 0
 */
  __pyx_v_nx = 0;

  /* "pyspades\mapmaker.pyx":262
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 *         cdef int ny = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 * 
 */
  __pyx_v_ny = 0;

  /* "pyspades\mapmaker.pyx":263
 *         cdef int nx = 0
 *         cdef int ny = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades\mapmaker.pyx":265
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__pyx_v_idx < __pyx_t_4);
    if (!__pyx_t_5) break;

    /* "pyspades\mapmaker.pyx":266
 * 
 *         while idx<len(self.hmap):
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)             # <<<<<<<<<<<<<<
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = PyInt_FromLong(__Pyx_mod_int(__pyx_v_idx, __pyx_v_self->width)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__random); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_nx = __pyx_t_7;

    /* "pyspades\mapmaker.pyx":267
 *         while idx<len(self.hmap):
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 *             idx+=1
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(int) == sizeof(long) && unlikely(__pyx_v_self->width == -1) && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_idx))) {
      PyErr_Format(PyExc_OverflowError, "value too large to perform division");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = PyInt_FromLong(__Pyx_div_int(__pyx_v_idx, __pyx_v_self->width)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ny = __pyx_t_7;

    /* "pyspades\mapmaker.pyx":268
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.hmap[idx] = self.get_repeat(nx, ny)             # <<<<<<<<<<<<<<
 *             idx+=1
 *     cpdef jitter_colors(self, double amount):
 */
    __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_v_nx, __pyx_v_ny, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_1, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":269
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 *             idx+=1             # <<<<<<<<<<<<<<
 *     cpdef jitter_colors(self, double amount):
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_heights");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":259
 *             span = span >> 1
 *             spanscaling = spanscaling * spanscalingmultiplier
 *     cpdef jitter_heights(self, double amount):             # <<<<<<<<<<<<<<
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_17jitter_heights(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_17jitter_heights[] = "Image jittering filter. Amount is max pixels distance to jitter.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_17jitter_heights(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount) {
  double __pyx_v_amount;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("jitter_heights");
  assert(__pyx_arg_amount); {
    __pyx_v_amount = __pyx_PyFloat_AsDouble(__pyx_arg_amount); if (unlikely((__pyx_v_amount == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_heights");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->jitter_heights(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_amount, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_heights");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":270
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 *             idx+=1
 *     cpdef jitter_colors(self, double amount):             # <<<<<<<<<<<<<<
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_18jitter_colors(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_amount, int __pyx_skip_dispatch) {
  int __pyx_v_nx;
  int __pyx_v_ny;
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("jitter_colors");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__jitter_colors); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_18jitter_colors)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":272
 *     cpdef jitter_colors(self, double amount):
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0             # <<<<<<<<<<<<<<
 *         cdef int ny = 0
 *         cdef int idx = 0
 */
  __pyx_v_nx = 0;

  /* "pyspades\mapmaker.pyx":273
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 *         cdef int ny = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 * 
 */
  __pyx_v_ny = 0;

  /* "pyspades\mapmaker.pyx":274
 *         cdef int nx = 0
 *         cdef int ny = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades\mapmaker.pyx":276
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__pyx_v_idx < __pyx_t_4);
    if (!__pyx_t_5) break;

    /* "pyspades\mapmaker.pyx":277
 * 
 *         while idx<len(self.hmap):
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)             # <<<<<<<<<<<<<<
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.cmap[idx] = self.get_col_repeat(nx, ny)
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_1 = PyInt_FromLong(__Pyx_mod_int(__pyx_v_idx, __pyx_v_self->width)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__random); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_nx = __pyx_t_7;

    /* "pyspades\mapmaker.pyx":278
 *         while idx<len(self.hmap):
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)             # <<<<<<<<<<<<<<
 *             self.cmap[idx] = self.get_col_repeat(nx, ny)
 *             idx+=1
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(int) == sizeof(long) && unlikely(__pyx_v_self->width == -1) && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_idx))) {
      PyErr_Format(PyExc_OverflowError, "value too large to perform division");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = PyInt_FromLong(__Pyx_div_int(__pyx_v_idx, __pyx_v_self->width)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_amount); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_ny = __pyx_t_7;

    /* "pyspades\mapmaker.pyx":279
 *             nx = int((idx % self.width) + (random.random()-0.5)*amount)
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.cmap[idx] = self.get_col_repeat(nx, ny)             # <<<<<<<<<<<<<<
 *             idx+=1
 * 
 */
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_col_repeat(__pyx_v_self, __pyx_v_nx, __pyx_v_ny, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_idx, __pyx_t_1, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":280
 *             ny = int((idx // self.width) + (random.random()-0.5)*amount)
 *             self.cmap[idx] = self.get_col_repeat(nx, ny)
 *             idx+=1             # <<<<<<<<<<<<<<
 * 
 *     cpdef level_against_heightmap(self, HeightMap other, double height):
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_colors");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":270
 *             self.hmap[idx] = self.get_repeat(nx, ny)
 *             idx+=1
 *     cpdef jitter_colors(self, double amount):             # <<<<<<<<<<<<<<
 *         """Image jittering filter. Amount is max pixels distance to jitter."""
 *         cdef int nx = 0
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_18jitter_colors(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_18jitter_colors[] = "Image jittering filter. Amount is max pixels distance to jitter.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_18jitter_colors(PyObject *__pyx_v_self, PyObject *__pyx_arg_amount) {
  double __pyx_v_amount;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("jitter_colors");
  assert(__pyx_arg_amount); {
    __pyx_v_amount = __pyx_PyFloat_AsDouble(__pyx_arg_amount); if (unlikely((__pyx_v_amount == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_colors");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->jitter_colors(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_amount, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.jitter_colors");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":282
 *             idx+=1
 * 
 *     cpdef level_against_heightmap(self, HeightMap other, double height):             # <<<<<<<<<<<<<<
 *         """Use another HeightMap as an alpha-mask to force values to a
 *             specific height"""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_19level_against_heightmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_level_against_heightmap(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_other, double __pyx_v_height, int __pyx_skip_dispatch) {
  long __pyx_v_x;
  long __pyx_v_y;
  double __pyx_v_orig;
  double __pyx_v_dist;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  __Pyx_RefNannySetupContext("level_against_heightmap");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_19level_against_heightmap)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_height); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_INCREF(((PyObject *)__pyx_v_other));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_other));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":285
 *         """Use another HeightMap as an alpha-mask to force values to a
 *             specific height"""
 *         for x in xrange(0, self.width):             # <<<<<<<<<<<<<<
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)
 */
  __pyx_t_4 = __pyx_v_self->width;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_x = __pyx_t_5;

    /* "pyspades\mapmaker.pyx":286
 *             specific height"""
 *         for x in xrange(0, self.width):
 *             for y in xrange(0, self.height):             # <<<<<<<<<<<<<<
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - height
 */
    __pyx_t_6 = __pyx_v_self->height;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_y = __pyx_t_7;

      /* "pyspades\mapmaker.pyx":287
 *         for x in xrange(0, self.width):
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)             # <<<<<<<<<<<<<<
 *                 dist = orig - height
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))
 */
      __pyx_v_orig = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, 0);

      /* "pyspades\mapmaker.pyx":288
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - height             # <<<<<<<<<<<<<<
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))
 *     cpdef blend_heightmaps(self, HeightMap alphamap, HeightMap HeightMap):
 */
      __pyx_v_dist = (__pyx_v_orig - __pyx_v_height);

      /* "pyspades\mapmaker.pyx":289
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - height
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))             # <<<<<<<<<<<<<<
 *     cpdef blend_heightmaps(self, HeightMap alphamap, HeightMap HeightMap):
 *         """Blend according to two HeightMaps: one as an alpha-mask,
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, (__pyx_v_orig - (__pyx_v_dist * ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_other->__pyx_vtab)->get_repeat(__pyx_v_other, __pyx_v_x, __pyx_v_y, 0))), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.level_against_heightmap");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":282
 *             idx+=1
 * 
 *     cpdef level_against_heightmap(self, HeightMap other, double height):             # <<<<<<<<<<<<<<
 *         """Use another HeightMap as an alpha-mask to force values to a
 *             specific height"""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_19level_against_heightmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_19level_against_heightmap[] = "Use another HeightMap as an alpha-mask to force values to a\n            specific height";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_19level_against_heightmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_other = 0;
  double __pyx_v_height;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__other,&__pyx_n_s__height,0};
  __Pyx_RefNannySetupContext("level_against_heightmap");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__other);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__height);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("level_against_heightmap", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "level_against_heightmap") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_other = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)values[0]);
    __pyx_v_height = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_height == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_other = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_height = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_height == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("level_against_heightmap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.level_against_heightmap");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pyspades_8mapmaker_HeightMap, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_other);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->level_against_heightmap(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_t_1), __pyx_v_height, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.level_against_heightmap");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":290
 *                 dist = orig - height
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))
 *     cpdef blend_heightmaps(self, HeightMap alphamap, HeightMap HeightMap):             # <<<<<<<<<<<<<<
 *         """Blend according to two HeightMaps: one as an alpha-mask,
 *             the other contains desired heights"""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_20blend_heightmaps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_blend_heightmaps(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_alphamap, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_HeightMap, int __pyx_skip_dispatch) {
  long __pyx_v_x;
  long __pyx_v_y;
  double __pyx_v_orig;
  PyObject *__pyx_v_dist;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  double __pyx_t_8;
  __Pyx_RefNannySetupContext("blend_heightmaps");
  __pyx_v_dist = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__blend_heightmaps); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_20blend_heightmaps)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(((PyObject *)__pyx_v_alphamap));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_alphamap));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_alphamap));
      __Pyx_INCREF(((PyObject *)__pyx_v_HeightMap));
      PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_HeightMap));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_HeightMap));
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":293
 *         """Blend according to two HeightMaps: one as an alpha-mask,
 *             the other contains desired heights"""
 *         for x in xrange(0, self.width):             # <<<<<<<<<<<<<<
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)
 */
  __pyx_t_4 = __pyx_v_self->width;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_x = __pyx_t_5;

    /* "pyspades\mapmaker.pyx":294
 *             the other contains desired heights"""
 *         for x in xrange(0, self.width):
 *             for y in xrange(0, self.height):             # <<<<<<<<<<<<<<
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - HeightMap.get_repeat(x,y)
 */
    __pyx_t_6 = __pyx_v_self->height;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_y = __pyx_t_7;

      /* "pyspades\mapmaker.pyx":295
 *         for x in xrange(0, self.width):
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)             # <<<<<<<<<<<<<<
 *                 dist = orig - HeightMap.get_repeat(x,y)
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 */
      __pyx_v_orig = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->get_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, 0);

      /* "pyspades\mapmaker.pyx":296
 *             for y in xrange(0, self.height):
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - HeightMap.get_repeat(x,y)             # <<<<<<<<<<<<<<
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):
 */
      __pyx_t_1 = PyFloat_FromDouble((__pyx_v_orig - ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_HeightMap->__pyx_vtab)->get_repeat(__pyx_v_HeightMap, __pyx_v_x, __pyx_v_y, 0))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_v_dist);
      __pyx_v_dist = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "pyspades\mapmaker.pyx":297
 *                 orig = self.get_repeat(x,y)
 *                 dist = orig - HeightMap.get_repeat(x,y)
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))             # <<<<<<<<<<<<<<
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):
 *         for xx in xrange(x, x+w):
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_orig); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyFloat_FromDouble(((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_alphamap->__pyx_vtab)->get_repeat(__pyx_v_alphamap, __pyx_v_x, __pyx_v_y, 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_dist, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_t_8, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.blend_heightmaps");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":290
 *                 dist = orig - height
 *                 self.set_repeat(x,y, orig - dist * other.get_repeat(x,y))
 *     cpdef blend_heightmaps(self, HeightMap alphamap, HeightMap HeightMap):             # <<<<<<<<<<<<<<
 *         """Blend according to two HeightMaps: one as an alpha-mask,
 *             the other contains desired heights"""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_20blend_heightmaps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_20blend_heightmaps[] = "Blend according to two HeightMaps: one as an alpha-mask,\n            the other contains desired heights";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_20blend_heightmaps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_alphamap = 0;
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_HeightMap = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__alphamap,&__pyx_n_s__HeightMap,0};
  __Pyx_RefNannySetupContext("blend_heightmaps");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__alphamap);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__HeightMap);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("blend_heightmaps", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "blend_heightmaps") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_alphamap = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)values[0]);
    __pyx_v_HeightMap = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_alphamap = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_HeightMap = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("blend_heightmaps", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.blend_heightmaps");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alphamap), __pyx_ptype_8pyspades_8mapmaker_HeightMap, 1, "alphamap", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_HeightMap), __pyx_ptype_8pyspades_8mapmaker_HeightMap, 1, "HeightMap", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_alphamap);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_HeightMap);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->blend_heightmaps(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_t_1), ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_t_2), 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.blend_heightmaps");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":298
 *                 dist = orig - HeightMap.get_repeat(x,y)
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):             # <<<<<<<<<<<<<<
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_21rect_solid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_solid(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_z, int __pyx_skip_dispatch) {
  int __pyx_v_xx;
  int __pyx_v_yy;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("rect_solid");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rect_solid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_21rect_solid)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_w); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyInt_FromLong(__pyx_v_h); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":299
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):
 *         for xx in xrange(x, x+w):             # <<<<<<<<<<<<<<
 *             for yy in xrange(y, y+h):
 *                 self.set_repeat(xx,yy,z)
 */
  __pyx_t_8 = (__pyx_v_x + __pyx_v_w);
  for (__pyx_t_9 = __pyx_v_x; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_xx = __pyx_t_9;

    /* "pyspades\mapmaker.pyx":300
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):             # <<<<<<<<<<<<<<
 *                 self.set_repeat(xx,yy,z)
 *     cpdef rect_noise(self, int x, int y, int w, int h,
 */
    __pyx_t_10 = (__pyx_v_y + __pyx_v_h);
    for (__pyx_t_11 = __pyx_v_y; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_yy = __pyx_t_11;

      /* "pyspades\mapmaker.pyx":301
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 *                 self.set_repeat(xx,yy,z)             # <<<<<<<<<<<<<<
 *     cpdef rect_noise(self, int x, int y, int w, int h,
 *                      double jitter, double midpoint):
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, __pyx_v_xx, __pyx_v_yy, __pyx_v_z, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_solid");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":298
 *                 dist = orig - HeightMap.get_repeat(x,y)
 *                 self.set_repeat(x,y, orig - dist * alphamap.get_repeat(x,y))
 *     cpdef rect_solid(self, int x, int y, int w, int h, double z):             # <<<<<<<<<<<<<<
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_21rect_solid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_21rect_solid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_w;
  int __pyx_v_h;
  double __pyx_v_z;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__w,&__pyx_n_s__h,&__pyx_n_s__z,0};
  __Pyx_RefNannySetupContext("rect_solid");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__w);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__h);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__z);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "rect_solid") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_w = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_w = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_z = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rect_solid", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_solid");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->rect_solid(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_z, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_solid");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":302
 *             for yy in xrange(y, y+h):
 *                 self.set_repeat(xx,yy,z)
 *     cpdef rect_noise(self, int x, int y, int w, int h,             # <<<<<<<<<<<<<<
 *                      double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_22rect_noise(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_noise(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_jitter, double __pyx_v_midpoint, int __pyx_skip_dispatch) {
  double __pyx_v_halfjitter;
  int __pyx_v_xx;
  int __pyx_v_yy;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  __Pyx_RefNannySetupContext("rect_noise");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rect_noise); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_22rect_noise)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_w); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyInt_FromLong(__pyx_v_h); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_jitter); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_midpoint); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":304
 *     cpdef rect_noise(self, int x, int y, int w, int h,
 *                      double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5             # <<<<<<<<<<<<<<
 *         for xx in xrange(x,x+w):
 *             for yy in xrange(y,y+h):
 */
  __pyx_v_halfjitter = (__pyx_v_jitter * 0.5);

  /* "pyspades\mapmaker.pyx":305
 *                      double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 *         for xx in xrange(x,x+w):             # <<<<<<<<<<<<<<
 *             for yy in xrange(y,y+h):
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 */
  __pyx_t_9 = (__pyx_v_x + __pyx_v_w);
  for (__pyx_t_10 = __pyx_v_x; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_xx = __pyx_t_10;

    /* "pyspades\mapmaker.pyx":306
 *         cdef double halfjitter = jitter * 0.5
 *         for xx in xrange(x,x+w):
 *             for yy in xrange(y,y+h):             # <<<<<<<<<<<<<<
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 *                                          halfjitter))
 */
    __pyx_t_11 = (__pyx_v_y + __pyx_v_h);
    for (__pyx_t_12 = __pyx_v_y; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_yy = __pyx_t_12;

      /* "pyspades\mapmaker.pyx":307
 *         for xx in xrange(x,x+w):
 *             for yy in xrange(y,y+h):
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -             # <<<<<<<<<<<<<<
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_midpoint); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__random); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyFloat_FromDouble(__pyx_v_jitter); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pyspades\mapmaker.pyx":308
 *             for yy in xrange(y,y+h):
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 *                                          halfjitter))             # <<<<<<<<<<<<<<
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 *         for xx in xrange(x, x+w):
 */
      __pyx_t_8 = PyFloat_FromDouble(__pyx_v_halfjitter); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyNumber_Subtract(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Add(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set(__pyx_v_self, __pyx_v_xx, __pyx_v_yy, __pyx_t_13, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_noise");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":302
 *             for yy in xrange(y, y+h):
 *                 self.set_repeat(xx,yy,z)
 *     cpdef rect_noise(self, int x, int y, int w, int h,             # <<<<<<<<<<<<<<
 *                      double jitter, double midpoint):
 *         cdef double halfjitter = jitter * 0.5
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_22rect_noise(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_22rect_noise(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_w;
  int __pyx_v_h;
  double __pyx_v_jitter;
  double __pyx_v_midpoint;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__w,&__pyx_n_s__h,&__pyx_n_s__jitter,&__pyx_n_s__midpoint,0};
  __Pyx_RefNannySetupContext("rect_noise");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[6] = {0,0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__w);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__h);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__jitter);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  5:
      values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__midpoint);
      if (likely(values[5])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "rect_noise") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_w = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_jitter = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_jitter == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_midpoint = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_midpoint == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_w = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_jitter = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely((__pyx_v_jitter == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_midpoint = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 5)); if (unlikely((__pyx_v_midpoint == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rect_noise", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_noise");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->rect_noise(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_jitter, __pyx_v_midpoint, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_noise");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":309
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):             # <<<<<<<<<<<<<<
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_23rect_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_color(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, int __pyx_v_col, int __pyx_skip_dispatch) {
  int __pyx_v_xx;
  int __pyx_v_yy;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("rect_color");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rect_color); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_23rect_color)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_w); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyInt_FromLong(__pyx_v_h); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromLong(__pyx_v_col); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":310
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 *         for xx in xrange(x, x+w):             # <<<<<<<<<<<<<<
 *             for yy in xrange(y, y+h):
 *                 self.set_col_repeat(xx,yy,col)
 */
  __pyx_t_8 = (__pyx_v_x + __pyx_v_w);
  for (__pyx_t_9 = __pyx_v_x; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_xx = __pyx_t_9;

    /* "pyspades\mapmaker.pyx":311
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):             # <<<<<<<<<<<<<<
 *                 self.set_col_repeat(xx,yy,col)
 *     cpdef truncate(self):
 */
    __pyx_t_10 = (__pyx_v_y + __pyx_v_h);
    for (__pyx_t_11 = __pyx_v_y; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_yy = __pyx_t_11;

      /* "pyspades\mapmaker.pyx":312
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 *                 self.set_col_repeat(xx,yy,col)             # <<<<<<<<<<<<<<
 *     cpdef truncate(self):
 *         """Truncates the HeightMap to a valid (0-1) range.
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_col_repeat(__pyx_v_self, __pyx_v_xx, __pyx_v_yy, __pyx_v_col, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_color");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":309
 *                 self.set(xx,yy, midpoint + (random.random()*jitter -
 *                                          halfjitter))
 *     cpdef rect_color(self, int x, int y, int w, int h, int col):             # <<<<<<<<<<<<<<
 *         for xx in xrange(x, x+w):
 *             for yy in xrange(y, y+h):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_23rect_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_23rect_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_w;
  int __pyx_v_h;
  int __pyx_v_col;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__w,&__pyx_n_s__h,&__pyx_n_s__col,0};
  __Pyx_RefNannySetupContext("rect_color");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__w);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__h);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__col);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "rect_color") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_w = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_col = __Pyx_PyInt_AsInt(values[4]); if (unlikely((__pyx_v_col == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_w = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_w == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_h = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_h == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_col = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely((__pyx_v_col == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rect_color", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_color");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->rect_color(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, __pyx_v_col, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rect_color");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":313
 *             for yy in xrange(y, y+h):
 *                 self.set_col_repeat(xx,yy,col)
 *     cpdef truncate(self):             # <<<<<<<<<<<<<<
 *         """Truncates the HeightMap to a valid (0-1) range.
 *         Do this before painting or writing to voxels to avoid crashing."""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_24truncate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_truncate(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("truncate");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__truncate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_24truncate)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":316
 *         """Truncates the HeightMap to a valid (0-1) range.
 *         Do this before painting or writing to voxels to avoid crashing."""
 *         for idx in xrange(0,len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)
 *     cpdef offset_z(self, double qty):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_idx = __pyx_t_4;

    /* "pyspades\mapmaker.pyx":317
 *         Do this before painting or writing to voxels to avoid crashing."""
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)             # <<<<<<<<<<<<<<
 *     cpdef offset_z(self, double qty):
 *         for idx in xrange(0,len(self.hmap)):
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = 0.0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_GT); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_9) {
      __pyx_t_8 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __pyx_t_8;
      __pyx_t_8 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_2 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_t_1, Py_LT); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_9) {
      __pyx_t_7 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __pyx_t_7;
      __pyx_t_7 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_2 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_2, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.truncate");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":313
 *             for yy in xrange(y, y+h):
 *                 self.set_col_repeat(xx,yy,col)
 *     cpdef truncate(self):             # <<<<<<<<<<<<<<
 *         """Truncates the HeightMap to a valid (0-1) range.
 *         Do this before painting or writing to voxels to avoid crashing."""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_24truncate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_24truncate[] = "Truncates the HeightMap to a valid (0-1) range.\n        Do this before painting or writing to voxels to avoid crashing.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_24truncate(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("truncate");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->truncate(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.truncate");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":318
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)
 *     cpdef offset_z(self, double qty):             # <<<<<<<<<<<<<<
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_25offset_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_qty); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_offset_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_qty, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("offset_z");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__offset_z); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_25offset_z)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_qty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":319
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)
 *     cpdef offset_z(self, double qty):
 *         for idx in xrange(0,len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = self.hmap[idx]+qty
 *     cpdef rescale_z(self, double multiple):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_idx = __pyx_t_5;

    /* "pyspades\mapmaker.pyx":320
 *     cpdef offset_z(self, double qty):
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty             # <<<<<<<<<<<<<<
 *     cpdef rescale_z(self, double multiple):
 *         for idx in xrange(0,len(self.hmap)):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_qty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_3, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.offset_z");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":318
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = min(max(self.hmap[idx],0.0),1.0)
 *     cpdef offset_z(self, double qty):             # <<<<<<<<<<<<<<
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_25offset_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_qty); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_25offset_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_qty) {
  double __pyx_v_qty;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("offset_z");
  assert(__pyx_arg_qty); {
    __pyx_v_qty = __pyx_PyFloat_AsDouble(__pyx_arg_qty); if (unlikely((__pyx_v_qty == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.offset_z");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->offset_z(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_qty, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.offset_z");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":321
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty
 *     cpdef rescale_z(self, double multiple):             # <<<<<<<<<<<<<<
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_26rescale_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_multiple); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rescale_z(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, double __pyx_v_multiple, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("rescale_z");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rescale_z); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_26rescale_z)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_multiple); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":322
 *             self.hmap[idx] = self.hmap[idx]+qty
 *     cpdef rescale_z(self, double multiple):
 *         for idx in xrange(0,len(self.hmap)):             # <<<<<<<<<<<<<<
 *             self.hmap[idx] = self.hmap[idx]*multiple
 *     cpdef paint_gradient_fill(self, gradient):
 */
  __pyx_t_1 = __pyx_v_self->hmap;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_idx = __pyx_t_5;

    /* "pyspades\mapmaker.pyx":323
 *     cpdef rescale_z(self, double multiple):
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple             # <<<<<<<<<<<<<<
 *     cpdef paint_gradient_fill(self, gradient):
 *         """Surface the map with a single gradient."""
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_multiple); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_SetItemInt(__pyx_v_self->hmap, __pyx_v_idx, __pyx_t_3, sizeof(Py_ssize_t), PyInt_FromSsize_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rescale_z");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":321
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]+qty
 *     cpdef rescale_z(self, double multiple):             # <<<<<<<<<<<<<<
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_26rescale_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_multiple); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_26rescale_z(PyObject *__pyx_v_self, PyObject *__pyx_arg_multiple) {
  double __pyx_v_multiple;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rescale_z");
  assert(__pyx_arg_multiple); {
    __pyx_v_multiple = __pyx_PyFloat_AsDouble(__pyx_arg_multiple); if (unlikely((__pyx_v_multiple == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rescale_z");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->rescale_z(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_multiple, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rescale_z");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":324
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple
 *     cpdef paint_gradient_fill(self, gradient):             # <<<<<<<<<<<<<<
 *         """Surface the map with a single gradient."""
 *         cdef zcoldef = gradient.array()
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_27paint_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradient); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_paint_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradient, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_zcoldef = 0;
  int __pyx_v_idx;
  PyObject *__pyx_v_h;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("paint_gradient_fill");
  __pyx_v_h = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__paint_gradient_fill); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_27paint_gradient_fill)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_gradient);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_gradient);
      __Pyx_GIVEREF(__pyx_v_gradient);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":326
 *     cpdef paint_gradient_fill(self, gradient):
 *         """Surface the map with a single gradient."""
 *         cdef zcoldef = gradient.array()             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx = 0
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_gradient, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_zcoldef = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyspades\mapmaker.pyx":328
 *         cdef zcoldef = gradient.array()
 * 
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades\mapmaker.pyx":330
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 */
  while (1) {
    __pyx_t_3 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_v_idx < __pyx_t_4);
    if (!__pyx_t_5) break;

    /* "pyspades\mapmaker.pyx":331
 * 
 *         while idx<len(self.hmap):
 *             h = int(self.hmap[idx] * 63)             # <<<<<<<<<<<<<<
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 *             idx+=1
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_int_63); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_h);
    __pyx_v_h = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":332
 *         while idx<len(self.hmap):
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldef,h)             # <<<<<<<<<<<<<<
 *             idx+=1
 *     cpdef rewrite_gradient_fill(self, list gradients):
 */
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_h); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_paint_gradient(__pyx_v_zcoldef, __pyx_t_6)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_idx, __pyx_t_1, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":333
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 *             idx+=1             # <<<<<<<<<<<<<<
 *     cpdef rewrite_gradient_fill(self, list gradients):
 *         """Given a cmap of int-indexed gradient definitions,
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.paint_gradient_fill");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_zcoldef);
  __Pyx_DECREF(__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":324
 *         for idx in xrange(0,len(self.hmap)):
 *             self.hmap[idx] = self.hmap[idx]*multiple
 *     cpdef paint_gradient_fill(self, gradient):             # <<<<<<<<<<<<<<
 *         """Surface the map with a single gradient."""
 *         cdef zcoldef = gradient.array()
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_27paint_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradient); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_27paint_gradient_fill[] = "Surface the map with a single gradient.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_27paint_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradient) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("paint_gradient_fill");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_gradient;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->paint_gradient_fill(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.paint_gradient_fill");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":334
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 *             idx+=1
 *     cpdef rewrite_gradient_fill(self, list gradients):             # <<<<<<<<<<<<<<
 *         """Given a cmap of int-indexed gradient definitions,
 *         rewrite them as surface color definitions."""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_28rewrite_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradients); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rewrite_gradient_fill(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_gradients, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_zcoldefs = 0;
  PyObject *__pyx_v_n;
  int __pyx_v_idx;
  PyObject *__pyx_v_h;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("rewrite_gradient_fill");
  __pyx_v_n = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_h = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_28rewrite_gradient_fill)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(((PyObject *)__pyx_v_gradients));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_gradients));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_gradients));
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":338
 *         rewrite them as surface color definitions."""
 * 
 *         cdef zcoldefs = []             # <<<<<<<<<<<<<<
 *         for n in gradients:
 *             zcoldefs.append(n.array())
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_zcoldefs = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":339
 * 
 *         cdef zcoldefs = []
 *         for n in gradients:             # <<<<<<<<<<<<<<
 *             zcoldefs.append(n.array())
 * 
 */
  if (unlikely(__pyx_v_gradients == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_4 = 0; __pyx_t_1 = ((PyObject *)__pyx_v_gradients); __Pyx_INCREF(__pyx_t_1);
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++;
    __Pyx_DECREF(__pyx_v_n);
    __pyx_v_n = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":340
 *         cdef zcoldefs = []
 *         for n in gradients:
 *             zcoldefs.append(n.array())             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx = 0
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_n, __pyx_n_s__array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Append(__pyx_v_zcoldefs, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":342
 *             zcoldefs.append(n.array())
 * 
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades\mapmaker.pyx":344
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__pyx_v_idx < __pyx_t_4);
    if (!__pyx_t_5) break;

    /* "pyspades\mapmaker.pyx":345
 * 
 *         while idx<len(self.hmap):
 *             h = int(self.hmap[idx] * 63)             # <<<<<<<<<<<<<<
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 *             idx+=1
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_int_63); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_h);
    __pyx_v_h = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":346
 *         while idx<len(self.hmap):
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)             # <<<<<<<<<<<<<<
 *             idx+=1
 *     cpdef rgb_noise_colors(self, low, high):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_v_idx, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetItem(__pyx_v_zcoldefs, __pyx_t_3); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_h); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_paint_gradient(__pyx_t_1, __pyx_t_6)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_idx, __pyx_t_3, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":347
 *             h = int(self.hmap[idx] * 63)
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 *             idx+=1             # <<<<<<<<<<<<<<
 *     cpdef rgb_noise_colors(self, low, high):
 *         """Add noise to the heightmap colors."""
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rewrite_gradient_fill");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_zcoldefs);
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_DECREF(__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":334
 *             self.cmap[idx] = paint_gradient(zcoldef,h)
 *             idx+=1
 *     cpdef rewrite_gradient_fill(self, list gradients):             # <<<<<<<<<<<<<<
 *         """Given a cmap of int-indexed gradient definitions,
 *         rewrite them as surface color definitions."""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_28rewrite_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradients); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_28rewrite_gradient_fill[] = "Given a cmap of int-indexed gradient definitions,\n        rewrite them as surface color definitions.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_28rewrite_gradient_fill(PyObject *__pyx_v_self, PyObject *__pyx_v_gradients) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("rewrite_gradient_fill");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gradients), (&PyList_Type), 1, "gradients", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_gradients);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->rewrite_gradient_fill(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), ((PyObject*)__pyx_t_1), 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rewrite_gradient_fill");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":348
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 *             idx+=1
 *     cpdef rgb_noise_colors(self, low, high):             # <<<<<<<<<<<<<<
 *         """Add noise to the heightmap colors."""
 *         cdef int idx = 0
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_29rgb_noise_colors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_rgb_noise_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, PyObject *__pyx_v_low, PyObject *__pyx_v_high, int __pyx_skip_dispatch) {
  int __pyx_v_idx;
  PyObject *__pyx_v_patterns;
  PyObject *__pyx_v_mid;
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_g;
  PyObject *__pyx_v_b;
  long __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("rgb_noise_colors");
  __pyx_v_patterns = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_mid = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_g = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_b = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rgb_noise_colors); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_29rgb_noise_colors)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_low);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_low);
      __Pyx_GIVEREF(__pyx_v_low);
      __Pyx_INCREF(__pyx_v_high);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_high);
      __Pyx_GIVEREF(__pyx_v_high);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":350
 *     cpdef rgb_noise_colors(self, low, high):
 *         """Add noise to the heightmap colors."""
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         patterns = array.array('i', [random.randint(low,high) for n in xrange(101)])
 */
  __pyx_v_idx = 0;

  /* "pyspades\mapmaker.pyx":352
 *         cdef int idx = 0
 * 
 *         patterns = array.array('i', [random.randint(low,high) for n in xrange(101)])             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  for (__pyx_t_4 = 0; __pyx_t_4 < 101; __pyx_t_4+=1) {
    __pyx_v_n = __pyx_t_4;
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__randint); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_v_low);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_low);
    __Pyx_GIVEREF(__pyx_v_low);
    __Pyx_INCREF(__pyx_v_high);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_high);
    __Pyx_GIVEREF(__pyx_v_high);
    __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    if (unlikely(PyList_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_6));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__i));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_n_s__i));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__i));
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_v_patterns);
  __pyx_v_patterns = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":354
 *         patterns = array.array('i', [random.randint(low,high) for n in xrange(101)])
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             mid = self.cmap[idx]
 * 
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (__pyx_v_idx < __pyx_t_7);
    if (!__pyx_t_8) break;

    /* "pyspades\mapmaker.pyx":355
 * 
 *         while idx<len(self.hmap):
 *             mid = self.cmap[idx]             # <<<<<<<<<<<<<<
 * 
 *             r = max(0, min(0xFF,get_r(mid)+patterns[idx%len(patterns)]))
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_v_idx, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_mid);
    __pyx_v_mid = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":357
 *             mid = self.cmap[idx]
 * 
 *             r = max(0, min(0xFF,get_r(mid)+patterns[idx%len(patterns)]))             # <<<<<<<<<<<<<<
 *             g = max(0, min(0xFF,get_g(mid)+patterns[(idx+1)%len(patterns)]))
 *             b = max(0, min(0xFF,get_b(mid)+patterns[(idx+2)%len(patterns)]))
 */
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_v_mid); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_9, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_t_7 == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_10 = __Pyx_mod_Py_ssize_t(__pyx_v_idx, __pyx_t_7);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_patterns, __pyx_t_10, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = 0xFF;
    __pyx_t_1 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_LT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_6 = __pyx_t_3;
    } else {
      __pyx_t_2 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_3 = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_GT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_8) {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_6 = __pyx_t_3;
    } else {
      __pyx_t_1 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_v_r);
    __pyx_v_r = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pyspades\mapmaker.pyx":358
 * 
 *             r = max(0, min(0xFF,get_r(mid)+patterns[idx%len(patterns)]))
 *             g = max(0, min(0xFF,get_g(mid)+patterns[(idx+1)%len(patterns)]))             # <<<<<<<<<<<<<<
 *             b = max(0, min(0xFF,get_b(mid)+patterns[(idx+2)%len(patterns)]))
 * 
 */
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_v_mid); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_9, 0)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = (__pyx_v_idx + 1);
    __pyx_t_10 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_t_10 == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = __Pyx_mod_Py_ssize_t(__pyx_t_4, __pyx_t_10);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_patterns, __pyx_t_7, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = 0xFF;
    __pyx_t_6 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_LT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1;
    } else {
      __pyx_t_2 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_8) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1;
    } else {
      __pyx_t_6 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __pyx_t_6;
      __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_v_g);
    __pyx_v_g = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":359
 *             r = max(0, min(0xFF,get_r(mid)+patterns[idx%len(patterns)]))
 *             g = max(0, min(0xFF,get_g(mid)+patterns[(idx+1)%len(patterns)]))
 *             b = max(0, min(0xFF,get_b(mid)+patterns[(idx+2)%len(patterns)]))             # <<<<<<<<<<<<<<
 * 
 *             self.cmap[idx] = make_color(r,g,b)
 */
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_v_mid); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_9, 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__pyx_v_idx + 2);
    __pyx_t_7 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(__pyx_t_7 == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_10 = __Pyx_mod_Py_ssize_t(__pyx_t_4, __pyx_t_7);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_patterns, __pyx_t_10, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = 0xFF;
    __pyx_t_3 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_6, __pyx_t_3, Py_LT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_1 = __pyx_t_6;
    } else {
      __pyx_t_2 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_6, __pyx_t_2, Py_GT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_8) {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_1 = __pyx_t_6;
    } else {
      __pyx_t_3 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_b);
    __pyx_v_b = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":361
 *             b = max(0, min(0xFF,get_b(mid)+patterns[(idx+2)%len(patterns)]))
 * 
 *             self.cmap[idx] = make_color(r,g,b)             # <<<<<<<<<<<<<<
 * 
 *             idx+=1
 */
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_v_r); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_g); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_AsInt(__pyx_v_b); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_make_color(__pyx_t_9, __pyx_t_11, __pyx_t_12, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_SetItemInt(__pyx_v_self->cmap, __pyx_v_idx, __pyx_t_1, sizeof(int), PyInt_FromLong) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":363
 *             self.cmap[idx] = make_color(r,g,b)
 * 
 *             idx+=1             # <<<<<<<<<<<<<<
 * 
 *     cpdef smooth_colors(self):
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rgb_noise_colors");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_patterns);
  __Pyx_DECREF(__pyx_v_mid);
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_g);
  __Pyx_DECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":348
 *             self.cmap[idx] = paint_gradient(zcoldefs[self.cmap[idx]],h)
 *             idx+=1
 *     cpdef rgb_noise_colors(self, low, high):             # <<<<<<<<<<<<<<
 *         """Add noise to the heightmap colors."""
 *         cdef int idx = 0
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_29rgb_noise_colors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_29rgb_noise_colors[] = "Add noise to the heightmap colors.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_29rgb_noise_colors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_low = 0;
  PyObject *__pyx_v_high = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__low,&__pyx_n_s__high,0};
  __Pyx_RefNannySetupContext("rgb_noise_colors");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__low);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__high);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rgb_noise_colors", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "rgb_noise_colors") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_low = values[0];
    __pyx_v_high = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_low = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_high = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rgb_noise_colors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rgb_noise_colors");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_low;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_high;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->rgb_noise_colors(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_t_1, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.rgb_noise_colors");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":365
 *             idx+=1
 * 
 *     cpdef smooth_colors(self):             # <<<<<<<<<<<<<<
 *         """Average the color of each pixel to add smoothness."""
 *         cdef int x = 0
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_30smooth_colors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_smooth_colors(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_x;
  int __pyx_v_y;
  PyObject *__pyx_v_copy;
  PyObject *__pyx_v_swap;
  PyObject *__pyx_v_left;
  PyObject *__pyx_v_right;
  PyObject *__pyx_v_up;
  PyObject *__pyx_v_down;
  PyObject *__pyx_v_mid;
  long __pyx_v_r;
  long __pyx_v_g;
  long __pyx_v_b;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("smooth_colors");
  __pyx_v_copy = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_swap = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_left = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_right = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_up = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_down = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_mid = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__smooth_colors); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_30smooth_colors)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":367
 *     cpdef smooth_colors(self):
 *         """Average the color of each pixel to add smoothness."""
 *         cdef int x = 0             # <<<<<<<<<<<<<<
 *         cdef int y = 0
 * 
 */
  __pyx_v_x = 0;

  /* "pyspades\mapmaker.pyx":368
 *         """Average the color of each pixel to add smoothness."""
 *         cdef int x = 0
 *         cdef int y = 0             # <<<<<<<<<<<<<<
 * 
 *         import copy
 */
  __pyx_v_y = 0;

  /* "pyspades\mapmaker.pyx":370
 *         cdef int y = 0
 * 
 *         import copy             # <<<<<<<<<<<<<<
 * 
 *         swap = copy.deepcopy(self.cmap)
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__copy), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_copy);
  __pyx_v_copy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":372
 *         import copy
 * 
 *         swap = copy.deepcopy(self.cmap)             # <<<<<<<<<<<<<<
 * 
 *         while y<self.height:
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_copy, __pyx_n_s__deepcopy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_self->cmap);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->cmap);
  __Pyx_GIVEREF(__pyx_v_self->cmap);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_swap);
  __pyx_v_swap = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyspades\mapmaker.pyx":374
 *         swap = copy.deepcopy(self.cmap)
 * 
 *         while y<self.height:             # <<<<<<<<<<<<<<
 *             left = swap[((x-1)%self.width)+(y%self.height)*self.width]
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]
 */
  while (1) {
    __pyx_t_4 = (__pyx_v_y < __pyx_v_self->height);
    if (!__pyx_t_4) break;

    /* "pyspades\mapmaker.pyx":375
 * 
 *         while y<self.height:
 *             left = swap[((x-1)%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]
 */
    __pyx_t_5 = (__pyx_v_x - 1);
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = (__Pyx_mod_long(__pyx_t_5, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_6, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_v_left);
    __pyx_v_left = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":376
 *         while y<self.height:
 *             left = swap[((x-1)%self.width)+(y%self.height)*self.width]
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]             # <<<<<<<<<<<<<<
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]
 *             down = swap[((x)%self.width)+((y+1)%self.height)*self.width]
 */
    __pyx_t_6 = (__pyx_v_x + 1);
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = (__Pyx_mod_long(__pyx_t_6, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_5, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_v_right);
    __pyx_v_right = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":377
 *             left = swap[((x-1)%self.width)+(y%self.height)*self.width]
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]             # <<<<<<<<<<<<<<
 *             down = swap[((x)%self.width)+((y+1)%self.height)*self.width]
 *             mid = swap[((x)%self.width)+((y)%self.height)*self.width]
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = (__pyx_v_y - 1);
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_long(__pyx_t_5, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_6, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_v_up);
    __pyx_v_up = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":378
 *             right = swap[((x+1)%self.width)+(y%self.height)*self.width]
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]
 *             down = swap[((x)%self.width)+((y+1)%self.height)*self.width]             # <<<<<<<<<<<<<<
 *             mid = swap[((x)%self.width)+((y)%self.height)*self.width]
 * 
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = (__pyx_v_y + 1);
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_long(__pyx_t_6, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_5, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_v_down);
    __pyx_v_down = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":379
 *             up = swap[((x)%self.width)+((y-1)%self.height)*self.width]
 *             down = swap[((x)%self.width)+((y+1)%self.height)*self.width]
 *             mid = swap[((x)%self.width)+((y)%self.height)*self.width]             # <<<<<<<<<<<<<<
 * 
 *             r = (get_r(left) + get_r(right) + get_r(up) + get_r(down) + get_r(mid))/5
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = (__Pyx_mod_int(__pyx_v_x, __pyx_v_self->width) + (__Pyx_mod_int(__pyx_v_y, __pyx_v_self->height) * __pyx_v_self->width));
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_swap, __pyx_t_7, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_v_mid);
    __pyx_v_mid = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":381
 *             mid = swap[((x)%self.width)+((y)%self.height)*self.width]
 * 
 *             r = (get_r(left) + get_r(right) + get_r(up) + get_r(down) + get_r(mid))/5             # <<<<<<<<<<<<<<
 *             g = (get_g(left) + get_g(right) + get_g(up) + get_g(down) + get_g(mid))/5
 *             b = (get_b(left) + get_b(right) + get_b(up) + get_b(down) + get_b(mid))/5
 */
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_left); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_v_right); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_v_up); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_down); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_mid); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_r = __Pyx_div_long(((((__pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_7, 0) + __pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_8, 0)) + __pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_9, 0)) + __pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_10, 0)) + __pyx_f_8pyspades_8mapmaker_get_r(__pyx_t_11, 0)), 5);

    /* "pyspades\mapmaker.pyx":382
 * 
 *             r = (get_r(left) + get_r(right) + get_r(up) + get_r(down) + get_r(mid))/5
 *             g = (get_g(left) + get_g(right) + get_g(up) + get_g(down) + get_g(mid))/5             # <<<<<<<<<<<<<<
 *             b = (get_b(left) + get_b(right) + get_b(up) + get_b(down) + get_b(mid))/5
 * 
 */
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_left); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_right); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_v_up); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_v_down); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_mid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_g = __Pyx_div_long(((((__pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_11, 0) + __pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_10, 0)) + __pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_9, 0)) + __pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_8, 0)) + __pyx_f_8pyspades_8mapmaker_get_g(__pyx_t_7, 0)), 5);

    /* "pyspades\mapmaker.pyx":383
 *             r = (get_r(left) + get_r(right) + get_r(up) + get_r(down) + get_r(mid))/5
 *             g = (get_g(left) + get_g(right) + get_g(up) + get_g(down) + get_g(mid))/5
 *             b = (get_b(left) + get_b(right) + get_b(up) + get_b(down) + get_b(mid))/5             # <<<<<<<<<<<<<<
 * 
 *             self.set_col_repeat(x,y,make_color(r,g,b))
 */
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_left); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_v_right); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_v_up); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_down); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_mid); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_b = __Pyx_div_long(((((__pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_7, 0) + __pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_8, 0)) + __pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_9, 0)) + __pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_10, 0)) + __pyx_f_8pyspades_8mapmaker_get_b(__pyx_t_11, 0)), 5);

    /* "pyspades\mapmaker.pyx":385
 *             b = (get_b(left) + get_b(right) + get_b(up) + get_b(down) + get_b(mid))/5
 * 
 *             self.set_col_repeat(x,y,make_color(r,g,b))             # <<<<<<<<<<<<<<
 * 
 *             x += 1
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_col_repeat(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_f_8pyspades_8mapmaker_make_color(__pyx_v_r, __pyx_v_g, __pyx_v_b, 0), 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":387
 *             self.set_col_repeat(x,y,make_color(r,g,b))
 * 
 *             x += 1             # <<<<<<<<<<<<<<
 *             if x>=self.width:
 *                 x = 0
 */
    __pyx_v_x = (__pyx_v_x + 1);

    /* "pyspades\mapmaker.pyx":388
 * 
 *             x += 1
 *             if x>=self.width:             # <<<<<<<<<<<<<<
 *                 x = 0
 *                 y += 1
 */
    __pyx_t_4 = (__pyx_v_x >= __pyx_v_self->width);
    if (__pyx_t_4) {

      /* "pyspades\mapmaker.pyx":389
 *             x += 1
 *             if x>=self.width:
 *                 x = 0             # <<<<<<<<<<<<<<
 *                 y += 1
 * 
 */
      __pyx_v_x = 0;

      /* "pyspades\mapmaker.pyx":390
 *             if x>=self.width:
 *                 x = 0
 *                 y += 1             # <<<<<<<<<<<<<<
 * 
 *     cpdef write_vxl(self):
 */
      __pyx_v_y = (__pyx_v_y + 1);
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.smooth_colors");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_copy);
  __Pyx_DECREF(__pyx_v_swap);
  __Pyx_DECREF(__pyx_v_left);
  __Pyx_DECREF(__pyx_v_right);
  __Pyx_DECREF(__pyx_v_up);
  __Pyx_DECREF(__pyx_v_down);
  __Pyx_DECREF(__pyx_v_mid);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":365
 *             idx+=1
 * 
 *     cpdef smooth_colors(self):             # <<<<<<<<<<<<<<
 *         """Average the color of each pixel to add smoothness."""
 *         cdef int x = 0
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_30smooth_colors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_9HeightMap_30smooth_colors[] = "Average the color of each pixel to add smoothness.";
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_30smooth_colors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("smooth_colors");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->smooth_colors(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.smooth_colors");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":392
 *                 y += 1
 * 
 *     cpdef write_vxl(self):             # <<<<<<<<<<<<<<
 *         cdef VXLData vxl = VXLData()
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_31write_vxl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_write_vxl(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_8pyspades_3vxl_VXLData *__pyx_v_vxl = 0;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_h;
  int __pyx_v_z;
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("write_vxl");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__write_vxl); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_31write_vxl)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":393
 * 
 *     cpdef write_vxl(self):
 *         cdef VXLData vxl = VXLData()             # <<<<<<<<<<<<<<
 * 
 *         cdef int x = 0
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pyspades_3vxl_VXLData)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_vxl = ((struct __pyx_obj_8pyspades_3vxl_VXLData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":395
 *         cdef VXLData vxl = VXLData()
 * 
 *         cdef int x = 0             # <<<<<<<<<<<<<<
 *         cdef int y = 0
 *         cdef int h = 0
 */
  __pyx_v_x = 0;

  /* "pyspades\mapmaker.pyx":396
 * 
 *         cdef int x = 0
 *         cdef int y = 0             # <<<<<<<<<<<<<<
 *         cdef int h = 0
 *         cdef int z = 0
 */
  __pyx_v_y = 0;

  /* "pyspades\mapmaker.pyx":397
 *         cdef int x = 0
 *         cdef int y = 0
 *         cdef int h = 0             # <<<<<<<<<<<<<<
 *         cdef int z = 0
 *         cdef int idx = 0
 */
  __pyx_v_h = 0;

  /* "pyspades\mapmaker.pyx":398
 *         cdef int y = 0
 *         cdef int h = 0
 *         cdef int z = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 * 
 */
  __pyx_v_z = 0;

  /* "pyspades\mapmaker.pyx":399
 *         cdef int h = 0
 *         cdef int z = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 * 
 *         while idx<len(self.hmap):
 */
  __pyx_v_idx = 0;

  /* "pyspades\mapmaker.pyx":401
 *         cdef int idx = 0
 * 
 *         while idx<len(self.hmap):             # <<<<<<<<<<<<<<
 *             x = idx % self.width
 *             y = idx // self.height
 */
  while (1) {
    __pyx_t_1 = __pyx_v_self->hmap;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_v_idx < __pyx_t_3);
    if (!__pyx_t_4) break;

    /* "pyspades\mapmaker.pyx":402
 * 
 *         while idx<len(self.hmap):
 *             x = idx % self.width             # <<<<<<<<<<<<<<
 *             y = idx // self.height
 *             h = int(self.hmap[idx] * 63)
 */
    if (unlikely(__pyx_v_self->width == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_x = __Pyx_mod_int(__pyx_v_idx, __pyx_v_self->width);

    /* "pyspades\mapmaker.pyx":403
 *         while idx<len(self.hmap):
 *             x = idx % self.width
 *             y = idx // self.height             # <<<<<<<<<<<<<<
 *             h = int(self.hmap[idx] * 63)
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),
 */
    if (unlikely(__pyx_v_self->height == 0)) {
      PyErr_Format(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(int) == sizeof(long) && unlikely(__pyx_v_self->height == -1) && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_idx))) {
      PyErr_Format(PyExc_OverflowError, "value too large to perform division");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_y = __Pyx_div_int(__pyx_v_idx, __pyx_v_self->height);

    /* "pyspades\mapmaker.pyx":404
 *             x = idx % self.width
 *             y = idx // self.height
 *             h = int(self.hmap[idx] * 63)             # <<<<<<<<<<<<<<
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),
 *                                 self.cmap[idx])
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->hmap, __pyx_v_idx, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_int_63); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_h = __pyx_t_5;

    /* "pyspades\mapmaker.pyx":405
 *             y = idx // self.height
 *             h = int(self.hmap[idx] * 63)
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),             # <<<<<<<<<<<<<<
 *                                 self.cmap[idx])
 *             idx+=1
 */
    __pyx_t_5 = 63;
    __pyx_t_6 = (__pyx_v_h + 3);
    __pyx_t_7 = 63;
    if ((__pyx_t_6 < __pyx_t_7)) {
      __pyx_t_8 = __pyx_t_6;
    } else {
      __pyx_t_8 = __pyx_t_7;
    }

    /* "pyspades\mapmaker.pyx":406
 *             h = int(self.hmap[idx] * 63)
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),
 *                                 self.cmap[idx])             # <<<<<<<<<<<<<<
 *             idx+=1
 *         return vxl
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->cmap, __pyx_v_idx, sizeof(int), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    ((struct __pyx_vtabstruct_8pyspades_3vxl_VXLData *)__pyx_v_vxl->__pyx_vtab)->set_column_fast(__pyx_v_vxl, __pyx_v_x, __pyx_v_y, __pyx_v_h, __pyx_t_5, ((int)__pyx_t_8), __pyx_t_9, 0);

    /* "pyspades\mapmaker.pyx":407
 *             vxl.set_column_fast(x, y, h, 63, int(min(63,h+3)),
 *                                 self.cmap[idx])
 *             idx+=1             # <<<<<<<<<<<<<<
 *         return vxl
 *     cpdef line_add(self,int x,int y,
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  /* "pyspades\mapmaker.pyx":408
 *                                 self.cmap[idx])
 *             idx+=1
 *         return vxl             # <<<<<<<<<<<<<<
 *     cpdef line_add(self,int x,int y,
 *                 int x2,int y2,int radius, double depth):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vxl));
  __pyx_r = ((PyObject *)__pyx_v_vxl);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.write_vxl");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vxl);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":392
 *                 y += 1
 * 
 *     cpdef write_vxl(self):             # <<<<<<<<<<<<<<
 *         cdef VXLData vxl = VXLData()
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_31write_vxl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_31write_vxl(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("write_vxl");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->write_vxl(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.write_vxl");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":409
 *             idx+=1
 *         return vxl
 *     cpdef line_add(self,int x,int y,             # <<<<<<<<<<<<<<
 *                 int x2,int y2,int radius, double depth):
 *         cdef int posx, posy
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_32line_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_line_add(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_depth, int __pyx_skip_dispatch) {
  int __pyx_v_posx;
  int __pyx_v_posy;
  PyObject *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("line_add");
  __pyx_v_c = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__line_add); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_32line_add)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_x2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyInt_FromLong(__pyx_v_y2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromLong(__pyx_v_radius); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_depth); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":412
 *                 int x2,int y2,int radius, double depth):
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):             # <<<<<<<<<<<<<<
 *             posx = c[0]
 *             posy = c[1]
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pyspades_8mapmaker_bresenham_line(__pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_9 = 0; __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++;
    __Pyx_DECREF(__pyx_v_c);
    __pyx_v_c = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":413
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):
 *             posx = c[0]             # <<<<<<<<<<<<<<
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_c, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posx = __pyx_t_10;

    /* "pyspades\mapmaker.pyx":414
 *         for c in bresenham_line(x,y,x2,y2):
 *             posx = c[0]
 *             posy = c[1]             # <<<<<<<<<<<<<<
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_c, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posy = __pyx_t_10;

    /* "pyspades\mapmaker.pyx":415
 *             posx = c[0]
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):             # <<<<<<<<<<<<<<
 *                 for y in xrange(-radius,radius+1):
 *                     self.add_repeat(posx+x,posy+y,depth)
 */
    __pyx_t_11 = (__pyx_v_radius + 1);
    for (__pyx_t_10 = (-__pyx_v_radius); __pyx_t_10 < __pyx_t_11; __pyx_t_10+=1) {
      __pyx_v_x = __pyx_t_10;

      /* "pyspades\mapmaker.pyx":416
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):             # <<<<<<<<<<<<<<
 *                     self.add_repeat(posx+x,posy+y,depth)
 *     cpdef line_set(self,int x,int y,
 */
      __pyx_t_12 = (__pyx_v_radius + 1);
      for (__pyx_t_13 = (-__pyx_v_radius); __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_y = __pyx_t_13;

        /* "pyspades\mapmaker.pyx":417
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):
 *                     self.add_repeat(posx+x,posy+y,depth)             # <<<<<<<<<<<<<<
 *     cpdef line_set(self,int x,int y,
 *                 int x2,int y2,int radius, double height):
 */
        __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->add_repeat(__pyx_v_self, (__pyx_v_posx + __pyx_v_x), (__pyx_v_posy + __pyx_v_y), __pyx_v_depth, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_add");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":409
 *             idx+=1
 *         return vxl
 *     cpdef line_add(self,int x,int y,             # <<<<<<<<<<<<<<
 *                 int x2,int y2,int radius, double depth):
 *         cdef int posx, posy
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_32line_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_32line_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_x2;
  int __pyx_v_y2;
  int __pyx_v_radius;
  double __pyx_v_depth;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__x2,&__pyx_n_s__y2,&__pyx_n_s__radius,&__pyx_n_s__depth,0};
  __Pyx_RefNannySetupContext("line_add");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[6] = {0,0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y2);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__radius);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  5:
      values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__depth);
      if (likely(values[5])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "line_add") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x2 = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_x2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y2 = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_y2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_radius = __Pyx_PyInt_AsInt(values[4]); if (unlikely((__pyx_v_radius == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_depth = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_depth == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x2 = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_x2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y2 = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_y2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_radius = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely((__pyx_v_radius == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_depth = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 5)); if (unlikely((__pyx_v_depth == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("line_add", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_add");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->line_add(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2, __pyx_v_radius, __pyx_v_depth, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_add");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":418
 *                 for y in xrange(-radius,radius+1):
 *                     self.add_repeat(posx+x,posy+y,depth)
 *     cpdef line_set(self,int x,int y,             # <<<<<<<<<<<<<<
 *                 int x2,int y2,int radius, double height):
 *         cdef int posx, posy
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_33line_set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_8pyspades_8mapmaker_9HeightMap_line_set(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *__pyx_v_self, int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2, int __pyx_v_radius, double __pyx_v_height, int __pyx_skip_dispatch) {
  int __pyx_v_posx;
  int __pyx_v_posy;
  PyObject *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("line_set");
  __pyx_v_c = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__line_set); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_8pyspades_8mapmaker_9HeightMap_33line_set)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_x2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyInt_FromLong(__pyx_v_y2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromLong(__pyx_v_radius); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_height); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyTuple_New(6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyspades\mapmaker.pyx":421
 *                 int x2,int y2,int radius, double height):
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):             # <<<<<<<<<<<<<<
 *             posx = c[0]
 *             posy = c[1]
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_8pyspades_8mapmaker_bresenham_line(__pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_9 = 0; __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++;
    __Pyx_DECREF(__pyx_v_c);
    __pyx_v_c = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":422
 *         cdef int posx, posy
 *         for c in bresenham_line(x,y,x2,y2):
 *             posx = c[0]             # <<<<<<<<<<<<<<
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_c, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posx = __pyx_t_10;

    /* "pyspades\mapmaker.pyx":423
 *         for c in bresenham_line(x,y,x2,y2):
 *             posx = c[0]
 *             posy = c[1]             # <<<<<<<<<<<<<<
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_c, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_posy = __pyx_t_10;

    /* "pyspades\mapmaker.pyx":424
 *             posx = c[0]
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):             # <<<<<<<<<<<<<<
 *                 for y in xrange(-radius,radius+1):
 *                     self.set_repeat(posx+x,posy+y,height)
 */
    __pyx_t_11 = (__pyx_v_radius + 1);
    for (__pyx_t_10 = (-__pyx_v_radius); __pyx_t_10 < __pyx_t_11; __pyx_t_10+=1) {
      __pyx_v_x = __pyx_t_10;

      /* "pyspades\mapmaker.pyx":425
 *             posy = c[1]
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):             # <<<<<<<<<<<<<<
 *                     self.set_repeat(posx+x,posy+y,height)
 * 
 */
      __pyx_t_12 = (__pyx_v_radius + 1);
      for (__pyx_t_13 = (-__pyx_v_radius); __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_y = __pyx_t_13;

        /* "pyspades\mapmaker.pyx":426
 *             for x in xrange(-radius,radius+1):
 *                 for y in xrange(-radius,radius+1):
 *                     self.set_repeat(posx+x,posy+y,height)             # <<<<<<<<<<<<<<
 * 
 * cdef lim_byte(int val):
 */
        __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)__pyx_v_self->__pyx_vtab)->set_repeat(__pyx_v_self, (__pyx_v_posx + __pyx_v_x), (__pyx_v_posy + __pyx_v_y), __pyx_v_height, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_set");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":418
 *                 for y in xrange(-radius,radius+1):
 *                     self.add_repeat(posx+x,posy+y,depth)
 *     cpdef line_set(self,int x,int y,             # <<<<<<<<<<<<<<
 *                 int x2,int y2,int radius, double height):
 *         cdef int posx, posy
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_33line_set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_33line_set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_x2;
  int __pyx_v_y2;
  int __pyx_v_radius;
  double __pyx_v_height;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__x2,&__pyx_n_s__y2,&__pyx_n_s__radius,&__pyx_n_s__height,0};
  __Pyx_RefNannySetupContext("line_set");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[6] = {0,0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y2);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__radius);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  5:
      values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__height);
      if (likely(values[5])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "line_set") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x2 = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_x2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y2 = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_y2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_radius = __Pyx_PyInt_AsInt(values[4]); if (unlikely((__pyx_v_radius == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_height = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_height == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_x == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_y == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_x2 = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_x2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_y2 = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_y2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_radius = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely((__pyx_v_radius == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_height = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 5)); if (unlikely((__pyx_v_height == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("line_set", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_set");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap *)((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->__pyx_vtab)->line_set(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_x2, __pyx_v_y2, __pyx_v_radius, __pyx_v_height, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.line_set");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":154
 * @cython.final
 * cdef class HeightMap:
 *     cdef public int width             # <<<<<<<<<<<<<<
 *     cdef public int height
 *     cdef public object hmap
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_5width___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_5width___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->width); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.width.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_5width_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_5width_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->width = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.width.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":155
 * cdef class HeightMap:
 *     cdef public int width
 *     cdef public int height             # <<<<<<<<<<<<<<
 *     cdef public object hmap
 *     cdef public object cmap
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6height___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_6height___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->height); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.height.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_6height_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_6height_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__");
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->height = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.HeightMap.height.__set__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":156
 *     cdef public int width
 *     cdef public int height
 *     cdef public object hmap             # <<<<<<<<<<<<<<
 *     cdef public object cmap
 *     def __init__(self, height):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap);
  __pyx_r = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap);
  __Pyx_DECREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap);
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_2__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_2__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__del__");
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap);
  __Pyx_DECREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap);
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->hmap = Py_None;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":157
 *     cdef public int height
 *     cdef public object hmap
 *     cdef public object cmap             # <<<<<<<<<<<<<<
 *     def __init__(self, height):
 *         self.width = 512
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap);
  __pyx_r = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap);
  __Pyx_DECREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap);
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_2__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_2__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__del__");
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap);
  __Pyx_DECREF(((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap);
  ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)__pyx_v_self)->cmap = Py_None;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":428
 *                     self.set_repeat(posx+x,posy+y,height)
 * 
 * cdef lim_byte(int val):             # <<<<<<<<<<<<<<
 *     return max(0,min(255,val))
 * 
 */

static  PyObject *__pyx_f_8pyspades_8mapmaker_lim_byte(int __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  long __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("lim_byte");

  /* "pyspades\mapmaker.pyx":429
 * 
 * cdef lim_byte(int val):
 *     return max(0,min(255,val))             # <<<<<<<<<<<<<<
 * 
 * cpdef inline int make_color(int r, int g, int b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_val;
  __pyx_t_2 = 255;
  if ((__pyx_t_1 < __pyx_t_2)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_t_2 = __pyx_t_3;
  __pyx_t_3 = 0;
  if ((__pyx_t_2 > __pyx_t_3)) {
    __pyx_t_4 = __pyx_t_2;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_t_5 = PyInt_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.lim_byte");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":431
 *     return max(0,min(255,val))
 * 
 * cpdef inline int make_color(int r, int g, int b):             # <<<<<<<<<<<<<<
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_1make_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_make_color(int __pyx_v_r, int __pyx_v_g, int __pyx_v_b, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("make_color");

  /* "pyspades\mapmaker.pyx":432
 * 
 * cpdef inline int make_color(int r, int g, int b):
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)             # <<<<<<<<<<<<<<
 * 
 * cpdef inline int get_r(int color):
 */
  __pyx_r = (((__pyx_v_b | (__pyx_v_g << 8)) | (__pyx_v_r << 16)) | (((int)128) << 24));
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":431
 *     return max(0,min(255,val))
 * 
 * cpdef inline int make_color(int r, int g, int b):             # <<<<<<<<<<<<<<
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_1make_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_1make_color(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_r;
  int __pyx_v_g;
  int __pyx_v_b;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__r,&__pyx_n_s__g,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("make_color");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__r);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__g);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("make_color", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("make_color", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "make_color") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_r = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_r == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_g = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_g == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_r = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_r == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_g = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_g == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_color", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.make_color");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_make_color(__pyx_v_r, __pyx_v_g, __pyx_v_b, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.make_color");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":434
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)
 * 
 * cpdef inline int get_r(int color):             # <<<<<<<<<<<<<<
 *     return (color>>16) & 0xFF
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_2get_r(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_r(int __pyx_v_color, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("get_r");

  /* "pyspades\mapmaker.pyx":435
 * 
 * cpdef inline int get_r(int color):
 *     return (color>>16) & 0xFF             # <<<<<<<<<<<<<<
 * 
 * cpdef inline int get_g(int color):
 */
  __pyx_r = ((__pyx_v_color >> 16) & 0xFF);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":434
 *     return b | (g << 8) | (r << 16) | (<int>128 << 24)
 * 
 * cpdef inline int get_r(int color):             # <<<<<<<<<<<<<<
 *     return (color>>16) & 0xFF
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_2get_r(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_2get_r(PyObject *__pyx_self, PyObject *__pyx_arg_color) {
  int __pyx_v_color;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_r");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_color); {
    __pyx_v_color = __Pyx_PyInt_AsInt(__pyx_arg_color); if (unlikely((__pyx_v_color == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.get_r");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_get_r(__pyx_v_color, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.get_r");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":437
 *     return (color>>16) & 0xFF
 * 
 * cpdef inline int get_g(int color):             # <<<<<<<<<<<<<<
 *     return (color>>8) & 0xFF
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_3get_g(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_g(int __pyx_v_color, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("get_g");

  /* "pyspades\mapmaker.pyx":438
 * 
 * cpdef inline int get_g(int color):
 *     return (color>>8) & 0xFF             # <<<<<<<<<<<<<<
 * 
 * cpdef inline int get_b(int color):
 */
  __pyx_r = ((__pyx_v_color >> 8) & 0xFF);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":437
 *     return (color>>16) & 0xFF
 * 
 * cpdef inline int get_g(int color):             # <<<<<<<<<<<<<<
 *     return (color>>8) & 0xFF
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_3get_g(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_3get_g(PyObject *__pyx_self, PyObject *__pyx_arg_color) {
  int __pyx_v_color;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_g");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_color); {
    __pyx_v_color = __Pyx_PyInt_AsInt(__pyx_arg_color); if (unlikely((__pyx_v_color == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.get_g");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_get_g(__pyx_v_color, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.get_g");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":440
 *     return (color>>8) & 0xFF
 * 
 * cpdef inline int get_b(int color):             # <<<<<<<<<<<<<<
 *     return (color) & 0xFF
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_4get_b(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_get_b(int __pyx_v_color, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("get_b");

  /* "pyspades\mapmaker.pyx":441
 * 
 * cpdef inline int get_b(int color):
 *     return (color) & 0xFF             # <<<<<<<<<<<<<<
 * 
 * cdef inline int paint_gradient(object zcoltable, int z):
 */
  __pyx_r = (__pyx_v_color & 0xFF);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":440
 *     return (color>>8) & 0xFF
 * 
 * cpdef inline int get_b(int color):             # <<<<<<<<<<<<<<
 *     return (color) & 0xFF
 * 
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_4get_b(PyObject *__pyx_self, PyObject *__pyx_arg_color); /*proto*/
static PyObject *__pyx_pf_8pyspades_8mapmaker_4get_b(PyObject *__pyx_self, PyObject *__pyx_arg_color) {
  int __pyx_v_color;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_b");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_color); {
    __pyx_v_color = __Pyx_PyInt_AsInt(__pyx_arg_color); if (unlikely((__pyx_v_color == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.get_b");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_f_8pyspades_8mapmaker_get_b(__pyx_v_color, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyspades.mapmaker.get_b");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":443
 *     return (color) & 0xFF
 * 
 * cdef inline int paint_gradient(object zcoltable, int z):             # <<<<<<<<<<<<<<
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)
 */

static CYTHON_INLINE int __pyx_f_8pyspades_8mapmaker_paint_gradient(PyObject *__pyx_v_zcoltable, int __pyx_v_z) {
  int __pyx_v_zz;
  int __pyx_v_rnd;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("paint_gradient");

  /* "pyspades\mapmaker.pyx":444
 * 
 * cdef inline int paint_gradient(object zcoltable, int z):
 *     cdef int zz = z*3             # <<<<<<<<<<<<<<
 *     cdef int rnd = random.randint(-4,4)
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 */
  __pyx_v_zz = (__pyx_v_z * 3);

  /* "pyspades\mapmaker.pyx":445
 * cdef inline int paint_gradient(object zcoltable, int z):
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)             # <<<<<<<<<<<<<<
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 *                       lim_byte(zcoltable[zz+1]+rnd),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__randint); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rnd = __pyx_t_3;

  /* "pyspades\mapmaker.pyx":446
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)
 *     return make_color(lim_byte(zcoltable[zz]+rnd),             # <<<<<<<<<<<<<<
 *                       lim_byte(zcoltable[zz+1]+rnd),
 *                       lim_byte(zcoltable[zz+2]+rnd)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_zcoltable, __pyx_v_zz, sizeof(int), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_rnd); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_f_8pyspades_8mapmaker_lim_byte(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyspades\mapmaker.pyx":447
 *     cdef int rnd = random.randint(-4,4)
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 *                       lim_byte(zcoltable[zz+1]+rnd),             # <<<<<<<<<<<<<<
 *                       lim_byte(zcoltable[zz+2]+rnd)
 *                       )
 */
  __pyx_t_5 = (__pyx_v_zz + 1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_zcoltable, __pyx_t_5, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_rnd); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_f_8pyspades_8mapmaker_lim_byte(__pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":448
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 *                       lim_byte(zcoltable[zz+1]+rnd),
 *                       lim_byte(zcoltable[zz+2]+rnd)             # <<<<<<<<<<<<<<
 *                       )
 * 
 */
  __pyx_t_5 = (__pyx_v_zz + 2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_zcoltable, __pyx_t_5, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_rnd); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_f_8pyspades_8mapmaker_lim_byte(__pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_f_8pyspades_8mapmaker_make_color(__pyx_t_3, __pyx_t_6, __pyx_t_7, 0);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pyspades.mapmaker.paint_gradient");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":451
 *                       )
 * 
 * cdef inline list bresenham_line(int x, int y, int x2, int y2):             # <<<<<<<<<<<<<<
 *     cdef int steep = 0
 *     cdef list coords = []
 */

static CYTHON_INLINE PyObject *__pyx_f_8pyspades_8mapmaker_bresenham_line(int __pyx_v_x, int __pyx_v_y, int __pyx_v_x2, int __pyx_v_y2) {
  int __pyx_v_steep;
  PyObject *__pyx_v_coords = 0;
  int __pyx_v_dx;
  int __pyx_v_dy;
  int __pyx_v_sx;
  int __pyx_v_sy;
  int __pyx_v_d;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("bresenham_line");

  /* "pyspades\mapmaker.pyx":452
 * 
 * cdef inline list bresenham_line(int x, int y, int x2, int y2):
 *     cdef int steep = 0             # <<<<<<<<<<<<<<
 *     cdef list coords = []
 *     cdef int dx, dy, sx, sy, d
 */
  __pyx_v_steep = 0;

  /* "pyspades\mapmaker.pyx":453
 * cdef inline list bresenham_line(int x, int y, int x2, int y2):
 *     cdef int steep = 0
 *     cdef list coords = []             # <<<<<<<<<<<<<<
 *     cdef int dx, dy, sx, sy, d
 *     dx = abs(x2 - x)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_coords = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":455
 *     cdef list coords = []
 *     cdef int dx, dy, sx, sy, d
 *     dx = abs(x2 - x)             # <<<<<<<<<<<<<<
 *     if (x2 - x) > 0: sx = 1
 *     else: sx = -1
 */
  __pyx_t_1 = PyInt_FromLong((__pyx_v_x2 - __pyx_v_x)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dx = __pyx_t_3;

  /* "pyspades\mapmaker.pyx":456
 *     cdef int dx, dy, sx, sy, d
 *     dx = abs(x2 - x)
 *     if (x2 - x) > 0: sx = 1             # <<<<<<<<<<<<<<
 *     else: sx = -1
 *     dy = abs(y2 - y)
 */
  __pyx_t_4 = ((__pyx_v_x2 - __pyx_v_x) > 0);
  if (__pyx_t_4) {
    __pyx_v_sx = 1;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pyspades\mapmaker.pyx":457
 *     dx = abs(x2 - x)
 *     if (x2 - x) > 0: sx = 1
 *     else: sx = -1             # <<<<<<<<<<<<<<
 *     dy = abs(y2 - y)
 *     if (y2 - y) > 0: sy = 1
 */
    __pyx_v_sx = -1;
  }
  __pyx_L3:;

  /* "pyspades\mapmaker.pyx":458
 *     if (x2 - x) > 0: sx = 1
 *     else: sx = -1
 *     dy = abs(y2 - y)             # <<<<<<<<<<<<<<
 *     if (y2 - y) > 0: sy = 1
 *     else: sy = -1
 */
  __pyx_t_2 = PyInt_FromLong((__pyx_v_y2 - __pyx_v_y)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_dy = __pyx_t_3;

  /* "pyspades\mapmaker.pyx":459
 *     else: sx = -1
 *     dy = abs(y2 - y)
 *     if (y2 - y) > 0: sy = 1             # <<<<<<<<<<<<<<
 *     else: sy = -1
 *     if dy > dx:
 */
  __pyx_t_4 = ((__pyx_v_y2 - __pyx_v_y) > 0);
  if (__pyx_t_4) {
    __pyx_v_sy = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "pyspades\mapmaker.pyx":460
 *     dy = abs(y2 - y)
 *     if (y2 - y) > 0: sy = 1
 *     else: sy = -1             # <<<<<<<<<<<<<<
 *     if dy > dx:
 *         steep = 1
 */
    __pyx_v_sy = -1;
  }
  __pyx_L4:;

  /* "pyspades\mapmaker.pyx":461
 *     if (y2 - y) > 0: sy = 1
 *     else: sy = -1
 *     if dy > dx:             # <<<<<<<<<<<<<<
 *         steep = 1
 *         x,y = y,x
 */
  __pyx_t_4 = (__pyx_v_dy > __pyx_v_dx);
  if (__pyx_t_4) {

    /* "pyspades\mapmaker.pyx":462
 *     else: sy = -1
 *     if dy > dx:
 *         steep = 1             # <<<<<<<<<<<<<<
 *         x,y = y,x
 *         dx,dy = dy,dx
 */
    __pyx_v_steep = 1;

    /* "pyspades\mapmaker.pyx":463
 *     if dy > dx:
 *         steep = 1
 *         x,y = y,x             # <<<<<<<<<<<<<<
 *         dx,dy = dy,dx
 *         sx,sy = sy,sx
 */
    __pyx_t_3 = __pyx_v_y;
    __pyx_t_5 = __pyx_v_x;
    __pyx_v_x = __pyx_t_3;
    __pyx_v_y = __pyx_t_5;

    /* "pyspades\mapmaker.pyx":464
 *         steep = 1
 *         x,y = y,x
 *         dx,dy = dy,dx             # <<<<<<<<<<<<<<
 *         sx,sy = sy,sx
 *     d = (2 * dy) - dx
 */
    __pyx_t_5 = __pyx_v_dy;
    __pyx_t_3 = __pyx_v_dx;
    __pyx_v_dx = __pyx_t_5;
    __pyx_v_dy = __pyx_t_3;

    /* "pyspades\mapmaker.pyx":465
 *         x,y = y,x
 *         dx,dy = dy,dx
 *         sx,sy = sy,sx             # <<<<<<<<<<<<<<
 *     d = (2 * dy) - dx
 *     for i in xrange(0,dx):
 */
    __pyx_t_3 = __pyx_v_sy;
    __pyx_t_5 = __pyx_v_sx;
    __pyx_v_sx = __pyx_t_3;
    __pyx_v_sy = __pyx_t_5;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "pyspades\mapmaker.pyx":466
 *         dx,dy = dy,dx
 *         sx,sy = sy,sx
 *     d = (2 * dy) - dx             # <<<<<<<<<<<<<<
 *     for i in xrange(0,dx):
 *         if steep: coords.append((y,x))
 */
  __pyx_v_d = ((2 * __pyx_v_dy) - __pyx_v_dx);

  /* "pyspades\mapmaker.pyx":467
 *         sx,sy = sy,sx
 *     d = (2 * dy) - dx
 *     for i in xrange(0,dx):             # <<<<<<<<<<<<<<
 *         if steep: coords.append((y,x))
 *         else: coords.append((x,y))
 */
  __pyx_t_5 = __pyx_v_dx;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "pyspades\mapmaker.pyx":468
 *     d = (2 * dy) - dx
 *     for i in xrange(0,dx):
 *         if steep: coords.append((y,x))             # <<<<<<<<<<<<<<
 *         else: coords.append((x,y))
 *         while d >= 0:
 */
    if (__pyx_v_steep) {
      if (unlikely(__pyx_v_coords == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
      }
      __pyx_t_1 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = PyList_Append(__pyx_v_coords, ((PyObject *)__pyx_t_7)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      goto __pyx_L8;
    }
    /*else*/ {

      /* "pyspades\mapmaker.pyx":469
 *     for i in xrange(0,dx):
 *         if steep: coords.append((y,x))
 *         else: coords.append((x,y))             # <<<<<<<<<<<<<<
 *         while d >= 0:
 *             y = y + sy
 */
      if (unlikely(__pyx_v_coords == Py_None)) {
        PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
      }
      __pyx_t_7 = PyInt_FromLong(__pyx_v_x); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_y); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_7 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = PyList_Append(__pyx_v_coords, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    }
    __pyx_L8:;

    /* "pyspades\mapmaker.pyx":470
 *         if steep: coords.append((y,x))
 *         else: coords.append((x,y))
 *         while d >= 0:             # <<<<<<<<<<<<<<
 *             y = y + sy
 *             d = d - (2 * dx)
 */
    while (1) {
      __pyx_t_4 = (__pyx_v_d >= 0);
      if (!__pyx_t_4) break;

      /* "pyspades\mapmaker.pyx":471
 *         else: coords.append((x,y))
 *         while d >= 0:
 *             y = y + sy             # <<<<<<<<<<<<<<
 *             d = d - (2 * dx)
 *         x = x + sx
 */
      __pyx_v_y = (__pyx_v_y + __pyx_v_sy);

      /* "pyspades\mapmaker.pyx":472
 *         while d >= 0:
 *             y = y + sy
 *             d = d - (2 * dx)             # <<<<<<<<<<<<<<
 *         x = x + sx
 *         d = d + (2 * dy)
 */
      __pyx_v_d = (__pyx_v_d - (2 * __pyx_v_dx));
    }

    /* "pyspades\mapmaker.pyx":473
 *             y = y + sy
 *             d = d - (2 * dx)
 *         x = x + sx             # <<<<<<<<<<<<<<
 *         d = d + (2 * dy)
 *     coords.append((x2,y2))
 */
    __pyx_v_x = (__pyx_v_x + __pyx_v_sx);

    /* "pyspades\mapmaker.pyx":474
 *             d = d - (2 * dx)
 *         x = x + sx
 *         d = d + (2 * dy)             # <<<<<<<<<<<<<<
 *     coords.append((x2,y2))
 *     return coords
 */
    __pyx_v_d = (__pyx_v_d + (2 * __pyx_v_dy));
  }

  /* "pyspades\mapmaker.pyx":475
 *         x = x + sx
 *         d = d + (2 * dy)
 *     coords.append((x2,y2))             # <<<<<<<<<<<<<<
 *     return coords
 * 
 */
  if (unlikely(__pyx_v_coords == Py_None)) {
    PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyInt_FromLong(__pyx_v_x2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_y2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_7));
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = PyList_Append(__pyx_v_coords, ((PyObject *)__pyx_t_7)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;

  /* "pyspades\mapmaker.pyx":476
 *         d = d + (2 * dy)
 *     coords.append((x2,y2))
 *     return coords             # <<<<<<<<<<<<<<
 * 
 * from color import *
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_coords));
  __pyx_r = __pyx_v_coords;
  goto __pyx_L0;

  __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.bresenham_line");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":481
 * 
 * class Gradient(object):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.steps = []
 *         for n in xrange(0,64):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient___init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient___init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8Gradient___init__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient___init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  long __pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__");
  __pyx_self = __pyx_self;

  /* "pyspades\mapmaker.pyx":482
 * class Gradient(object):
 *     def __init__(self):
 *         self.steps = []             # <<<<<<<<<<<<<<
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__steps, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":483
 *     def __init__(self):
 *         self.steps = []
 *         for n in xrange(0,64):             # <<<<<<<<<<<<<<
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):
 */
  for (__pyx_t_2 = 0; __pyx_t_2 < 64; __pyx_t_2+=1) {
    __pyx_v_n = __pyx_t_2;

    /* "pyspades\mapmaker.pyx":484
 *         self.steps = []
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))             # <<<<<<<<<<<<<<
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__steps); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Append(__pyx_t_1, ((PyObject *)__pyx_k_tuple_7)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.__init__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":485
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):             # <<<<<<<<<<<<<<
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_1set_step_rgb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_1set_step_rgb = {__Pyx_NAMESTR("set_step_rgb"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8Gradient_1set_step_rgb, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_1set_step_rgb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_rgb = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__step,&__pyx_n_s__rgb,0};
  __Pyx_RefNannySetupContext("set_step_rgb");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__step);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_step_rgb", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rgb);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_step_rgb", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set_step_rgb") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_step = values[1];
    __pyx_v_rgb = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_step = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_rgb = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_step_rgb", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.set_step_rgb");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "pyspades\mapmaker.pyx":486
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)             # <<<<<<<<<<<<<<
 *     def set_step_hsb(self, step, hsb):
 *         rgb = hsb_to_rgb(*hsb)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rgb, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rgb, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rgb, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_255);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_int_255);
  __Pyx_GIVEREF(__pyx_int_255);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__steps); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_3, __pyx_v_step, ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.set_step_rgb");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":487
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):             # <<<<<<<<<<<<<<
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_2set_step_hsb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_2set_step_hsb = {__Pyx_NAMESTR("set_step_hsb"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8Gradient_2set_step_hsb, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_2set_step_hsb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_hsb = 0;
  PyObject *__pyx_v_rgb;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__step,&__pyx_n_s__hsb,0};
  __Pyx_RefNannySetupContext("set_step_hsb");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__step);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_step_hsb", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hsb);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("set_step_hsb", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set_step_hsb") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_step = values[1];
    __pyx_v_hsb = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_step = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_hsb = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_step_hsb", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.set_step_hsb");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_rgb = Py_None; __Pyx_INCREF(Py_None);

  /* "pyspades\mapmaker.pyx":488
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):
 *         rgb = hsb_to_rgb(*hsb)             # <<<<<<<<<<<<<<
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def rgb(self, start_pos, start_color, end_pos, end_color):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__hsb_to_rgb); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_Tuple(__pyx_v_hsb); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_rgb);
  __pyx_v_rgb = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyspades\mapmaker.pyx":489
 *     def set_step_hsb(self, step, hsb):
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)             # <<<<<<<<<<<<<<
 *     def rgb(self, start_pos, start_color, end_pos, end_color):
 *         """Linear interpolation of (0-255) RGB values."""
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rgb, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rgb, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rgb, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_255);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_int_255);
  __Pyx_GIVEREF(__pyx_int_255);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__steps); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_1, __pyx_v_step, ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.set_step_hsb");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_rgb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":490
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def rgb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_3rgb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8Gradient_3rgb[] = "Linear interpolation of (0-255) RGB values.";
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_3rgb = {__Pyx_NAMESTR("rgb"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8Gradient_3rgb, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_8Gradient_3rgb)};
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_3rgb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_start_pos = 0;
  PyObject *__pyx_v_start_color = 0;
  PyObject *__pyx_v_end_pos = 0;
  PyObject *__pyx_v_end_color = 0;
  PyObject *__pyx_v_dist;
  PyObject *__pyx_v_n;
  PyObject *__pyx_v_pct;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__start_pos,&__pyx_n_s__start_color,&__pyx_n_s__end_pos,&__pyx_n_s__end_color,0};
  __Pyx_RefNannySetupContext("rgb");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start_pos);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start_color);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_color);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "rgb") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_start_pos = values[1];
    __pyx_v_start_color = values[2];
    __pyx_v_end_pos = values[3];
    __pyx_v_end_color = values[4];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_start_pos = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_start_color = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_end_pos = PyTuple_GET_ITEM(__pyx_args, 3);
    __pyx_v_end_color = PyTuple_GET_ITEM(__pyx_args, 4);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rgb", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.rgb");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_dist = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_n = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_pct = Py_None; __Pyx_INCREF(Py_None);

  /* "pyspades\mapmaker.pyx":492
 *     def rgb(self, start_pos, start_color, end_pos, end_color):
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos             # <<<<<<<<<<<<<<
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_end_pos, __pyx_v_start_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_dist);
  __pyx_v_dist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":493
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 *         for n in xrange(start_pos, end_pos):             # <<<<<<<<<<<<<<
 *             pct = float(n - start_pos) / dist
 *             self.set_step_rgb(n, interpolate_rgb(start_color,
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_start_pos);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_start_pos);
  __Pyx_GIVEREF(__pyx_v_start_pos);
  __Pyx_INCREF(__pyx_v_end_pos);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_end_pos);
  __Pyx_GIVEREF(__pyx_v_end_pos);
  __pyx_t_3 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = 0; __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_1))) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_1))) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    } else {
      __pyx_t_3 = PyIter_Next(__pyx_t_1);
      if (!__pyx_t_3) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF(__pyx_v_n);
    __pyx_v_n = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":494
 *         dist = end_pos - start_pos
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist             # <<<<<<<<<<<<<<
 *             self.set_step_rgb(n, interpolate_rgb(start_color,
 *                                              end_color,
 */
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_n, __pyx_v_start_pos); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_4 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dist); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_pct);
    __pyx_v_pct = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pyspades\mapmaker.pyx":495
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist
 *             self.set_step_rgb(n, interpolate_rgb(start_color,             # <<<<<<<<<<<<<<
 *                                              end_color,
 *                                              pct))
 */
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__set_step_rgb); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__interpolate_rgb); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pyspades\mapmaker.pyx":497
 *             self.set_step_rgb(n, interpolate_rgb(start_color,
 *                                              end_color,
 *                                              pct))             # <<<<<<<<<<<<<<
 *     def hsb(self, start_pos, start_color, end_pos, end_color):
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 */
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_start_color);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_start_color);
    __Pyx_GIVEREF(__pyx_v_start_color);
    __Pyx_INCREF(__pyx_v_end_color);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_end_color);
    __Pyx_GIVEREF(__pyx_v_end_color);
    __Pyx_INCREF(__pyx_v_pct);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_pct);
    __Pyx_GIVEREF(__pyx_v_pct);
    __pyx_t_7 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.rgb");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_dist);
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_DECREF(__pyx_v_pct);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":498
 *                                              end_color,
 *                                              pct))
 *     def hsb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 *             as used in GIMP."""
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_4hsb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pyspades_8mapmaker_8Gradient_4hsb[] = "Linear interpolation of (0-360,0-100,0-100) HSB values\n            as used in GIMP.";
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_4hsb = {__Pyx_NAMESTR("hsb"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8Gradient_4hsb, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_8Gradient_4hsb)};
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_4hsb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_start_pos = 0;
  PyObject *__pyx_v_start_color = 0;
  PyObject *__pyx_v_end_pos = 0;
  PyObject *__pyx_v_end_color = 0;
  PyObject *__pyx_v_dist;
  PyObject *__pyx_v_n;
  PyObject *__pyx_v_pct;
  PyObject *__pyx_v_interp;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  double __pyx_t_7;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__start_pos,&__pyx_n_s__start_color,&__pyx_n_s__end_pos,&__pyx_n_s__end_color,0};
  __Pyx_RefNannySetupContext("hsb");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start_pos);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start_color);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_color);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "hsb") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_start_pos = values[1];
    __pyx_v_start_color = values[2];
    __pyx_v_end_pos = values[3];
    __pyx_v_end_color = values[4];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_start_pos = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_start_color = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_end_pos = PyTuple_GET_ITEM(__pyx_args, 3);
    __pyx_v_end_color = PyTuple_GET_ITEM(__pyx_args, 4);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hsb", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.hsb");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_start_color);
  __Pyx_INCREF(__pyx_v_end_color);
  __pyx_v_dist = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_n = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_pct = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_interp = Py_None; __Pyx_INCREF(Py_None);

  /* "pyspades\mapmaker.pyx":501
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 *             as used in GIMP."""
 *         dist = end_pos - start_pos             # <<<<<<<<<<<<<<
 *         start_color = (start_color[0]/360.,
 *                        start_color[1]/100.,
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_end_pos, __pyx_v_start_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_dist);
  __pyx_v_dist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":502
 *             as used in GIMP."""
 *         dist = end_pos - start_pos
 *         start_color = (start_color[0]/360.,             # <<<<<<<<<<<<<<
 *                        start_color[1]/100.,
 *                        start_color[2]/100.)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_start_color, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(360.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":503
 *         dist = end_pos - start_pos
 *         start_color = (start_color[0]/360.,
 *                        start_color[1]/100.,             # <<<<<<<<<<<<<<
 *                        start_color[2]/100.)
 *         end_color = (end_color[0]/360.,
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_start_color, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(100.); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":504
 *         start_color = (start_color[0]/360.,
 *                        start_color[1]/100.,
 *                        start_color[2]/100.)             # <<<<<<<<<<<<<<
 *         end_color = (end_color[0]/360.,
 *                        end_color[1]/100.,
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_start_color, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(100.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_v_start_color);
  __pyx_v_start_color = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":505
 *                        start_color[1]/100.,
 *                        start_color[2]/100.)
 *         end_color = (end_color[0]/360.,             # <<<<<<<<<<<<<<
 *                        end_color[1]/100.,
 *                        end_color[2]/100.)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_end_color, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(360.); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pyspades\mapmaker.pyx":506
 *                        start_color[2]/100.)
 *         end_color = (end_color[0]/360.,
 *                        end_color[1]/100.,             # <<<<<<<<<<<<<<
 *                        end_color[2]/100.)
 *         for n in xrange(start_pos, end_pos):
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_end_color, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyFloat_FromDouble(100.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":507
 *         end_color = (end_color[0]/360.,
 *                        end_color[1]/100.,
 *                        end_color[2]/100.)             # <<<<<<<<<<<<<<
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_end_color, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(100.); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_v_end_color);
  __pyx_v_end_color = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyspades\mapmaker.pyx":508
 *                        end_color[1]/100.,
 *                        end_color[2]/100.)
 *         for n in xrange(start_pos, end_pos):             # <<<<<<<<<<<<<<
 *             pct = float(n - start_pos) / dist
 *             interp = interpolate_hsb(start_color, end_color, pct)
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __Pyx_INCREF(__pyx_v_start_pos);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_start_pos);
  __Pyx_GIVEREF(__pyx_v_start_pos);
  __Pyx_INCREF(__pyx_v_end_pos);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_end_pos);
  __Pyx_GIVEREF(__pyx_v_end_pos);
  __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_6 = 0; __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5);
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_5))) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_5))) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++;
    } else {
      __pyx_t_1 = PyIter_Next(__pyx_t_5);
      if (!__pyx_t_1) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_v_n);
    __pyx_v_n = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyspades\mapmaker.pyx":509
 *                        end_color[2]/100.)
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist             # <<<<<<<<<<<<<<
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)
 */
    __pyx_t_1 = PyNumber_Subtract(__pyx_v_n, __pyx_v_start_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_7 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyFloat_FromDouble(__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_dist); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_pct);
    __pyx_v_pct = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyspades\mapmaker.pyx":510
 *         for n in xrange(start_pos, end_pos):
 *             pct = float(n - start_pos) / dist
 *             interp = interpolate_hsb(start_color, end_color, pct)             # <<<<<<<<<<<<<<
 *             self.set_step_hsb(n, interp)
 *     def array(self):
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__interpolate_hsb); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(__pyx_v_start_color);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_start_color);
    __Pyx_GIVEREF(__pyx_v_start_color);
    __Pyx_INCREF(__pyx_v_end_color);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_end_color);
    __Pyx_GIVEREF(__pyx_v_end_color);
    __Pyx_INCREF(__pyx_v_pct);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_pct);
    __Pyx_GIVEREF(__pyx_v_pct);
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_interp);
    __pyx_v_interp = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pyspades\mapmaker.pyx":511
 *             pct = float(n - start_pos) / dist
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)             # <<<<<<<<<<<<<<
 *     def array(self):
 *         base = list(self.steps)
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__set_step_hsb); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    __Pyx_INCREF(__pyx_v_interp);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_interp);
    __Pyx_GIVEREF(__pyx_v_interp);
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.hsb");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_dist);
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_DECREF(__pyx_v_pct);
  __Pyx_DECREF(__pyx_v_interp);
  __Pyx_DECREF(__pyx_v_start_color);
  __Pyx_DECREF(__pyx_v_end_color);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\mapmaker.pyx":512
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)
 *     def array(self):             # <<<<<<<<<<<<<<
 *         base = list(self.steps)
 *         base.reverse()
 */

static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_5array(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_8mapmaker_8Gradient_5array = {__Pyx_NAMESTR("array"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8Gradient_5array, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_8pyspades_8mapmaker_8Gradient_5array(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_v_result;
  PyObject *__pyx_v_rgb;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("array");
  __pyx_self = __pyx_self;
  __pyx_v_base = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_result = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_rgb = Py_None; __Pyx_INCREF(Py_None);

  /* "pyspades\mapmaker.pyx":513
 *             self.set_step_hsb(n, interp)
 *     def array(self):
 *         base = list(self.steps)             # <<<<<<<<<<<<<<
 *         base.reverse()
 *         result = []
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__steps); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_base));
  __pyx_v_base = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":514
 *     def array(self):
 *         base = list(self.steps)
 *         base.reverse()             # <<<<<<<<<<<<<<
 *         result = []
 *         for rgb in base:
 */
  if (unlikely(__pyx_v_base == Py_None)) {
    PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'reverse'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_3 = PyList_Reverse(__pyx_v_base); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pyspades\mapmaker.pyx":515
 *         base = list(self.steps)
 *         base.reverse()
 *         result = []             # <<<<<<<<<<<<<<
 *         for rgb in base:
 *             result.append(int(rgb[0]))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_result));
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":516
 *         base.reverse()
 *         result = []
 *         for rgb in base:             # <<<<<<<<<<<<<<
 *             result.append(int(rgb[0]))
 *             result.append(int(rgb[1]))
 */
  if (unlikely(__pyx_v_base == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_4 = 0; __pyx_t_1 = ((PyObject *)__pyx_v_base); __Pyx_INCREF(__pyx_t_1);
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++;
    __Pyx_DECREF(__pyx_v_rgb);
    __pyx_v_rgb = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pyspades\mapmaker.pyx":517
 *         result = []
 *         for rgb in base:
 *             result.append(int(rgb[0]))             # <<<<<<<<<<<<<<
 *             result.append(int(rgb[1]))
 *             result.append(int(rgb[2]))
 */
    if (unlikely(__pyx_v_result == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rgb, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_3 = PyList_Append(__pyx_v_result, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyspades\mapmaker.pyx":518
 *         for rgb in base:
 *             result.append(int(rgb[0]))
 *             result.append(int(rgb[1]))             # <<<<<<<<<<<<<<
 *             result.append(int(rgb[2]))
 *         return array.array('i',result)
 */
    if (unlikely(__pyx_v_result == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rgb, 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_3 = PyList_Append(__pyx_v_result, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyspades\mapmaker.pyx":519
 *             result.append(int(rgb[0]))
 *             result.append(int(rgb[1]))
 *             result.append(int(rgb[2]))             # <<<<<<<<<<<<<<
 *         return array.array('i',result)
 */
    if (unlikely(__pyx_v_result == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_rgb, 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_3 = PyList_Append(__pyx_v_result, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":520
 *             result.append(int(rgb[1]))
 *             result.append(int(rgb[2]))
 *         return array.array('i',result)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__i));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__i));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__i));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_result));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_result));
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.mapmaker.Gradient.array");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_base);
  __Pyx_DECREF(__pyx_v_result);
  __Pyx_DECREF(__pyx_v_rgb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8pyspades_8mapmaker_BiomeMap __pyx_vtable_8pyspades_8mapmaker_BiomeMap;

static PyObject *__pyx_tp_new_8pyspades_8mapmaker_BiomeMap(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pyspades_8mapmaker_BiomeMap;
  p->biomes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->tmap = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->gradients = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pyspades_8mapmaker_BiomeMap(PyObject *o) {
  struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *p = (struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)o;
  Py_XDECREF(((PyObject *)p->biomes));
  Py_XDECREF(((PyObject *)p->tmap));
  Py_XDECREF(((PyObject *)p->gradients));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pyspades_8mapmaker_BiomeMap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *p = (struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)o;
  if (p->biomes) {
    e = (*v)(p->biomes, a); if (e) return e;
  }
  if (p->tmap) {
    e = (*v)(p->tmap, a); if (e) return e;
  }
  if (p->gradients) {
    e = (*v)(p->gradients, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pyspades_8mapmaker_BiomeMap(PyObject *o) {
  struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *p = (struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->biomes);
  p->biomes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->tmap);
  p->tmap = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->gradients);
  p->gradients = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_width(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_width(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_5width_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_height(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_height(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6height_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_twidth(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_twidth(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6twidth_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_theight(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_theight(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_7theight_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_biomes(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_biomes(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_1__set__(o, v);
  }
  else {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_6biomes_2__del__(o);
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_tmap(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_tmap(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_1__set__(o, v);
  }
  else {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_4tmap_2__del__(o);
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_8BiomeMap_gradients(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_gradients(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_1__set__(o, v);
  }
  else {
    return __pyx_pf_8pyspades_8mapmaker_8BiomeMap_9gradients_2__del__(o);
  }
}

static PyMethodDef __pyx_methods_8pyspades_8mapmaker_BiomeMap[] = {
  {__Pyx_NAMESTR("get_repeat"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8BiomeMap_1get_repeat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_8BiomeMap_1get_repeat)},
  {__Pyx_NAMESTR("set_repeat"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8BiomeMap_2set_repeat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_8BiomeMap_2set_repeat)},
  {__Pyx_NAMESTR("noise"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8BiomeMap_3noise, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("random_points"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8BiomeMap_4random_points, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_8BiomeMap_4random_points)},
  {__Pyx_NAMESTR("point_flood"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8BiomeMap_5point_flood, METH_O, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_8BiomeMap_5point_flood)},
  {__Pyx_NAMESTR("jitter"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8BiomeMap_6jitter, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("create_heightmap"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8BiomeMap_7create_heightmap, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_8BiomeMap_7create_heightmap)},
  {__Pyx_NAMESTR("rect_of_point"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_8BiomeMap_8rect_of_point, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pyspades_8mapmaker_BiomeMap[] = {
  {(char *)"width", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_width, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_width, 0, 0},
  {(char *)"height", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_height, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_height, 0, 0},
  {(char *)"twidth", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_twidth, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_twidth, 0, 0},
  {(char *)"theight", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_theight, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_theight, 0, 0},
  {(char *)"biomes", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_biomes, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_biomes, 0, 0},
  {(char *)"tmap", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_tmap, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_tmap, 0, 0},
  {(char *)"gradients", __pyx_getprop_8pyspades_8mapmaker_8BiomeMap_gradients, __pyx_setprop_8pyspades_8mapmaker_8BiomeMap_gradients, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BiomeMap = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_BiomeMap = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BiomeMap = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_BiomeMap = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_8pyspades_8mapmaker_BiomeMap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pyspades.mapmaker.BiomeMap"), /*tp_name*/
  sizeof(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pyspades_8mapmaker_BiomeMap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BiomeMap, /*tp_as_number*/
  &__pyx_tp_as_sequence_BiomeMap, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BiomeMap, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_BiomeMap, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    A tilemap containing biome data for a HeightMap.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pyspades_8mapmaker_BiomeMap, /*tp_traverse*/
  __pyx_tp_clear_8pyspades_8mapmaker_BiomeMap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pyspades_8mapmaker_BiomeMap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pyspades_8mapmaker_BiomeMap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_8pyspades_8mapmaker_8BiomeMap___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pyspades_8mapmaker_BiomeMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_8pyspades_8mapmaker_HeightMap __pyx_vtable_8pyspades_8mapmaker_HeightMap;

static PyObject *__pyx_tp_new_8pyspades_8mapmaker_HeightMap(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pyspades_8mapmaker_HeightMap;
  p->hmap = Py_None; Py_INCREF(Py_None);
  p->cmap = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pyspades_8mapmaker_HeightMap(PyObject *o) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *p = (struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)o;
  Py_XDECREF(p->hmap);
  Py_XDECREF(p->cmap);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pyspades_8mapmaker_HeightMap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *p = (struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)o;
  if (p->hmap) {
    e = (*v)(p->hmap, a); if (e) return e;
  }
  if (p->cmap) {
    e = (*v)(p->cmap, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pyspades_8mapmaker_HeightMap(PyObject *o) {
  struct __pyx_obj_8pyspades_8mapmaker_HeightMap *p = (struct __pyx_obj_8pyspades_8mapmaker_HeightMap *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->hmap);
  p->hmap = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cmap);
  p->cmap = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_9HeightMap_width(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_9HeightMap_5width___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_9HeightMap_width(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_9HeightMap_5width_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_9HeightMap_height(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_9HeightMap_6height___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_9HeightMap_height(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_9HeightMap_6height_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_9HeightMap_hmap(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_9HeightMap_hmap(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_1__set__(o, v);
  }
  else {
    return __pyx_pf_8pyspades_8mapmaker_9HeightMap_4hmap_2__del__(o);
  }
}

static PyObject *__pyx_getprop_8pyspades_8mapmaker_9HeightMap_cmap(PyObject *o, void *x) {
  return __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap___get__(o);
}

static int __pyx_setprop_8pyspades_8mapmaker_9HeightMap_cmap(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_1__set__(o, v);
  }
  else {
    return __pyx_pf_8pyspades_8mapmaker_9HeightMap_4cmap_2__del__(o);
  }
}

static PyMethodDef __pyx_methods_8pyspades_8mapmaker_HeightMap[] = {
  {__Pyx_NAMESTR("get"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_1get, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_repeat"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_2get_repeat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_2get_repeat)},
  {__Pyx_NAMESTR("set"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_3set, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_repeat"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_4set_repeat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_4set_repeat)},
  {__Pyx_NAMESTR("add_repeat"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_5add_repeat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_col"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_6get_col, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_col_repeat"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_7get_col_repeat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_col_repeat"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_8set_col_repeat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("fill_col"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_9fill_col, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("mult_repeat"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_10mult_repeat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("seed"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_11seed, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("peaking"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_12peaking, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_12peaking)},
  {__Pyx_NAMESTR("dipping"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_13dipping, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_13dipping)},
  {__Pyx_NAMESTR("rolling"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_14rolling, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_14rolling)},
  {__Pyx_NAMESTR("smoothing"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_15smoothing, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_15smoothing)},
  {__Pyx_NAMESTR("midpoint_displace"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_16midpoint_displace, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_16midpoint_displace)},
  {__Pyx_NAMESTR("jitter_heights"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_17jitter_heights, METH_O, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_17jitter_heights)},
  {__Pyx_NAMESTR("jitter_colors"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_18jitter_colors, METH_O, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_18jitter_colors)},
  {__Pyx_NAMESTR("level_against_heightmap"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_19level_against_heightmap, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_19level_against_heightmap)},
  {__Pyx_NAMESTR("blend_heightmaps"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_20blend_heightmaps, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_20blend_heightmaps)},
  {__Pyx_NAMESTR("rect_solid"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_21rect_solid, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("rect_noise"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_22rect_noise, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("rect_color"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_23rect_color, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("truncate"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_24truncate, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_24truncate)},
  {__Pyx_NAMESTR("offset_z"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_25offset_z, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("rescale_z"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_26rescale_z, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("paint_gradient_fill"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_27paint_gradient_fill, METH_O, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_27paint_gradient_fill)},
  {__Pyx_NAMESTR("rewrite_gradient_fill"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_28rewrite_gradient_fill, METH_O, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_28rewrite_gradient_fill)},
  {__Pyx_NAMESTR("rgb_noise_colors"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_29rgb_noise_colors, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_29rgb_noise_colors)},
  {__Pyx_NAMESTR("smooth_colors"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_30smooth_colors, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pyspades_8mapmaker_9HeightMap_30smooth_colors)},
  {__Pyx_NAMESTR("write_vxl"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_31write_vxl, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("line_add"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_32line_add, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("line_set"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_9HeightMap_33line_set, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pyspades_8mapmaker_HeightMap[] = {
  {(char *)"width", __pyx_getprop_8pyspades_8mapmaker_9HeightMap_width, __pyx_setprop_8pyspades_8mapmaker_9HeightMap_width, 0, 0},
  {(char *)"height", __pyx_getprop_8pyspades_8mapmaker_9HeightMap_height, __pyx_setprop_8pyspades_8mapmaker_9HeightMap_height, 0, 0},
  {(char *)"hmap", __pyx_getprop_8pyspades_8mapmaker_9HeightMap_hmap, __pyx_setprop_8pyspades_8mapmaker_9HeightMap_hmap, 0, 0},
  {(char *)"cmap", __pyx_getprop_8pyspades_8mapmaker_9HeightMap_cmap, __pyx_setprop_8pyspades_8mapmaker_9HeightMap_cmap, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_HeightMap = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_HeightMap = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_HeightMap = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_HeightMap = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_8pyspades_8mapmaker_HeightMap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pyspades.mapmaker.HeightMap"), /*tp_name*/
  sizeof(struct __pyx_obj_8pyspades_8mapmaker_HeightMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pyspades_8mapmaker_HeightMap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_HeightMap, /*tp_as_number*/
  &__pyx_tp_as_sequence_HeightMap, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_HeightMap, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_HeightMap, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pyspades_8mapmaker_HeightMap, /*tp_traverse*/
  __pyx_tp_clear_8pyspades_8mapmaker_HeightMap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pyspades_8mapmaker_HeightMap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pyspades_8mapmaker_HeightMap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_8pyspades_8mapmaker_9HeightMap___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pyspades_8mapmaker_HeightMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("make_color"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_1make_color, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_r"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_2get_r, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_g"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_3get_g, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_b"), (PyCFunction)__pyx_pf_8pyspades_8mapmaker_4get_b, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

char* __pyx_import_star_type_names[] = {
  "VXLData",
  "__pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace",
  "MapData",
  "__pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points",
  "HeightMap",
  "BiomeMap",
  0
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  char** type_name = __pyx_import_star_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}


/* import_all_from is an unexposed function from ceval.c */

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = __Pyx_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;

    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1; /* Unexpected error */
        PyErr_Clear();
        dict = __Pyx_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
        all = PyMapping_Keys(dict);
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }

    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}


static int __pyx_import_star(PyObject* m) {

    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;

    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;

    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;

bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("mapmaker"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 1},
  {&__pyx_n_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 1},
  {&__pyx_n_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 1},
  {&__pyx_n_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 1},
  {&__pyx_n_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 1},
  {&__pyx_n_s__Biome, __pyx_k__Biome, sizeof(__pyx_k__Biome), 0, 0, 1, 1},
  {&__pyx_n_s__Gradient, __pyx_k__Gradient, sizeof(__pyx_k__Gradient), 0, 0, 1, 1},
  {&__pyx_n_s__HeightMap, __pyx_k__HeightMap, sizeof(__pyx_k__HeightMap), 0, 0, 1, 1},
  {&__pyx_n_s____init__, __pyx_k____init__, sizeof(__pyx_k____init__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__add, __pyx_k__add, sizeof(__pyx_k__add), 0, 0, 1, 1},
  {&__pyx_n_s__add_repeat, __pyx_k__add_repeat, sizeof(__pyx_k__add_repeat), 0, 0, 1, 1},
  {&__pyx_n_s__alphamap, __pyx_k__alphamap, sizeof(__pyx_k__alphamap), 0, 0, 1, 1},
  {&__pyx_n_s__append, __pyx_k__append, sizeof(__pyx_k__append), 0, 0, 1, 1},
  {&__pyx_n_s__array, __pyx_k__array, sizeof(__pyx_k__array), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__biome, __pyx_k__biome, sizeof(__pyx_k__biome), 0, 0, 1, 1},
  {&__pyx_n_s__biomes, __pyx_k__biomes, sizeof(__pyx_k__biomes), 0, 0, 1, 1},
  {&__pyx_n_s__blend_heightmaps, __pyx_k__blend_heightmaps, sizeof(__pyx_k__blend_heightmaps), 0, 0, 1, 1},
  {&__pyx_n_s__choice, __pyx_k__choice, sizeof(__pyx_k__choice), 0, 0, 1, 1},
  {&__pyx_n_s__cmap, __pyx_k__cmap, sizeof(__pyx_k__cmap), 0, 0, 1, 1},
  {&__pyx_n_s__col, __pyx_k__col, sizeof(__pyx_k__col), 0, 0, 1, 1},
  {&__pyx_n_s__collections, __pyx_k__collections, sizeof(__pyx_k__collections), 0, 0, 1, 1},
  {&__pyx_n_s__color, __pyx_k__color, sizeof(__pyx_k__color), 0, 0, 1, 1},
  {&__pyx_n_s__copy, __pyx_k__copy, sizeof(__pyx_k__copy), 0, 0, 1, 1},
  {&__pyx_n_s__create_heightmap, __pyx_k__create_heightmap, sizeof(__pyx_k__create_heightmap), 0, 0, 1, 1},
  {&__pyx_n_s__deepcopy, __pyx_k__deepcopy, sizeof(__pyx_k__deepcopy), 0, 0, 1, 1},
  {&__pyx_n_s__depth, __pyx_k__depth, sizeof(__pyx_k__depth), 0, 0, 1, 1},
  {&__pyx_n_s__deque, __pyx_k__deque, sizeof(__pyx_k__deque), 0, 0, 1, 1},
  {&__pyx_n_s__dipping, __pyx_k__dipping, sizeof(__pyx_k__dipping), 0, 0, 1, 1},
  {&__pyx_n_s__end_color, __pyx_k__end_color, sizeof(__pyx_k__end_color), 0, 0, 1, 1},
  {&__pyx_n_s__end_pos, __pyx_k__end_pos, sizeof(__pyx_k__end_pos), 0, 0, 1, 1},
  {&__pyx_n_s__f, __pyx_k__f, sizeof(__pyx_k__f), 0, 0, 1, 1},
  {&__pyx_n_s__fill_col, __pyx_k__fill_col, sizeof(__pyx_k__fill_col), 0, 0, 1, 1},
  {&__pyx_n_s__g, __pyx_k__g, sizeof(__pyx_k__g), 0, 0, 1, 1},
  {&__pyx_n_s__generate_classic, __pyx_k__generate_classic, sizeof(__pyx_k__generate_classic), 0, 0, 1, 1},
  {&__pyx_n_s__get, __pyx_k__get, sizeof(__pyx_k__get), 0, 0, 1, 1},
  {&__pyx_n_s__get_col, __pyx_k__get_col, sizeof(__pyx_k__get_col), 0, 0, 1, 1},
  {&__pyx_n_s__get_col_repeat, __pyx_k__get_col_repeat, sizeof(__pyx_k__get_col_repeat), 0, 0, 1, 1},
  {&__pyx_n_s__get_repeat, __pyx_k__get_repeat, sizeof(__pyx_k__get_repeat), 0, 0, 1, 1},
  {&__pyx_n_s__gradient, __pyx_k__gradient, sizeof(__pyx_k__gradient), 0, 0, 1, 1},
  {&__pyx_n_s__gradients, __pyx_k__gradients, sizeof(__pyx_k__gradients), 0, 0, 1, 1},
  {&__pyx_n_s__h, __pyx_k__h, sizeof(__pyx_k__h), 0, 0, 1, 1},
  {&__pyx_n_s__height, __pyx_k__height, sizeof(__pyx_k__height), 0, 0, 1, 1},
  {&__pyx_n_s__high, __pyx_k__high, sizeof(__pyx_k__high), 0, 0, 1, 1},
  {&__pyx_n_s__hmap, __pyx_k__hmap, sizeof(__pyx_k__hmap), 0, 0, 1, 1},
  {&__pyx_n_s__hsb, __pyx_k__hsb, sizeof(__pyx_k__hsb), 0, 0, 1, 1},
  {&__pyx_n_s__hsb_to_rgb, __pyx_k__hsb_to_rgb, sizeof(__pyx_k__hsb_to_rgb), 0, 0, 1, 1},
  {&__pyx_n_s__i, __pyx_k__i, sizeof(__pyx_k__i), 0, 0, 1, 1},
  {&__pyx_n_s__id, __pyx_k__id, sizeof(__pyx_k__id), 0, 0, 1, 1},
  {&__pyx_n_s__interpolate_hsb, __pyx_k__interpolate_hsb, sizeof(__pyx_k__interpolate_hsb), 0, 0, 1, 1},
  {&__pyx_n_s__interpolate_rgb, __pyx_k__interpolate_rgb, sizeof(__pyx_k__interpolate_rgb), 0, 0, 1, 1},
  {&__pyx_n_s__jitter, __pyx_k__jitter, sizeof(__pyx_k__jitter), 0, 0, 1, 1},
  {&__pyx_n_s__jitter_colors, __pyx_k__jitter_colors, sizeof(__pyx_k__jitter_colors), 0, 0, 1, 1},
  {&__pyx_n_s__jitter_heights, __pyx_k__jitter_heights, sizeof(__pyx_k__jitter_heights), 0, 0, 1, 1},
  {&__pyx_n_s__jittervalue, __pyx_k__jittervalue, sizeof(__pyx_k__jittervalue), 0, 0, 1, 1},
  {&__pyx_n_s__line_add, __pyx_k__line_add, sizeof(__pyx_k__line_add), 0, 0, 1, 1},
  {&__pyx_n_s__line_set, __pyx_k__line_set, sizeof(__pyx_k__line_set), 0, 0, 1, 1},
  {&__pyx_n_s__low, __pyx_k__low, sizeof(__pyx_k__low), 0, 0, 1, 1},
  {&__pyx_n_s__map, __pyx_k__map, sizeof(__pyx_k__map), 0, 0, 1, 1},
  {&__pyx_n_s__math, __pyx_k__math, sizeof(__pyx_k__math), 0, 0, 1, 1},
  {&__pyx_n_s__midpoint, __pyx_k__midpoint, sizeof(__pyx_k__midpoint), 0, 0, 1, 1},
  {&__pyx_n_s__midpoint_displace, __pyx_k__midpoint_displace, sizeof(__pyx_k__midpoint_displace), 0, 0, 1, 1},
  {&__pyx_n_s__mult, __pyx_k__mult, sizeof(__pyx_k__mult), 0, 0, 1, 1},
  {&__pyx_n_s__mult_repeat, __pyx_k__mult_repeat, sizeof(__pyx_k__mult_repeat), 0, 0, 1, 1},
  {&__pyx_n_s__noise, __pyx_k__noise, sizeof(__pyx_k__noise), 0, 0, 1, 1},
  {&__pyx_n_s__object, __pyx_k__object, sizeof(__pyx_k__object), 0, 0, 1, 1},
  {&__pyx_n_s__offset_z, __pyx_k__offset_z, sizeof(__pyx_k__offset_z), 0, 0, 1, 1},
  {&__pyx_n_s__other, __pyx_k__other, sizeof(__pyx_k__other), 0, 0, 1, 1},
  {&__pyx_n_s__paint_gradient_fill, __pyx_k__paint_gradient_fill, sizeof(__pyx_k__paint_gradient_fill), 0, 0, 1, 1},
  {&__pyx_n_s__peaking, __pyx_k__peaking, sizeof(__pyx_k__peaking), 0, 0, 1, 1},
  {&__pyx_n_s__pi, __pyx_k__pi, sizeof(__pyx_k__pi), 0, 0, 1, 1},
  {&__pyx_n_s__point_flood, __pyx_k__point_flood, sizeof(__pyx_k__point_flood), 0, 0, 1, 1},
  {&__pyx_n_s__popleft, __pyx_k__popleft, sizeof(__pyx_k__popleft), 0, 0, 1, 1},
  {&__pyx_n_s__qty, __pyx_k__qty, sizeof(__pyx_k__qty), 0, 0, 1, 1},
  {&__pyx_n_s__r, __pyx_k__r, sizeof(__pyx_k__r), 0, 0, 1, 1},
  {&__pyx_n_s__radius, __pyx_k__radius, sizeof(__pyx_k__radius), 0, 0, 1, 1},
  {&__pyx_n_s__randint, __pyx_k__randint, sizeof(__pyx_k__randint), 0, 0, 1, 1},
  {&__pyx_n_s__random, __pyx_k__random, sizeof(__pyx_k__random), 0, 0, 1, 1},
  {&__pyx_n_s__random_points, __pyx_k__random_points, sizeof(__pyx_k__random_points), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__rect_color, __pyx_k__rect_color, sizeof(__pyx_k__rect_color), 0, 0, 1, 1},
  {&__pyx_n_s__rect_noise, __pyx_k__rect_noise, sizeof(__pyx_k__rect_noise), 0, 0, 1, 1},
  {&__pyx_n_s__rect_of_point, __pyx_k__rect_of_point, sizeof(__pyx_k__rect_of_point), 0, 0, 1, 1},
  {&__pyx_n_s__rect_solid, __pyx_k__rect_solid, sizeof(__pyx_k__rect_solid), 0, 0, 1, 1},
  {&__pyx_n_s__rescale_z, __pyx_k__rescale_z, sizeof(__pyx_k__rescale_z), 0, 0, 1, 1},
  {&__pyx_n_s__reverse, __pyx_k__reverse, sizeof(__pyx_k__reverse), 0, 0, 1, 1},
  {&__pyx_n_s__rgb, __pyx_k__rgb, sizeof(__pyx_k__rgb), 0, 0, 1, 1},
  {&__pyx_n_s__rgb_noise_colors, __pyx_k__rgb_noise_colors, sizeof(__pyx_k__rgb_noise_colors), 0, 0, 1, 1},
  {&__pyx_n_s__rolling, __pyx_k__rolling, sizeof(__pyx_k__rolling), 0, 0, 1, 1},
  {&__pyx_n_s__seed, __pyx_k__seed, sizeof(__pyx_k__seed), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__set, __pyx_k__set, sizeof(__pyx_k__set), 0, 0, 1, 1},
  {&__pyx_n_s__set_col_repeat, __pyx_k__set_col_repeat, sizeof(__pyx_k__set_col_repeat), 0, 0, 1, 1},
  {&__pyx_n_s__set_column_fast, __pyx_k__set_column_fast, sizeof(__pyx_k__set_column_fast), 0, 0, 1, 1},
  {&__pyx_n_s__set_repeat, __pyx_k__set_repeat, sizeof(__pyx_k__set_repeat), 0, 0, 1, 1},
  {&__pyx_n_s__set_step_hsb, __pyx_k__set_step_hsb, sizeof(__pyx_k__set_step_hsb), 0, 0, 1, 1},
  {&__pyx_n_s__set_step_rgb, __pyx_k__set_step_rgb, sizeof(__pyx_k__set_step_rgb), 0, 0, 1, 1},
  {&__pyx_n_s__sin, __pyx_k__sin, sizeof(__pyx_k__sin), 0, 0, 1, 1},
  {&__pyx_n_s__skip, __pyx_k__skip, sizeof(__pyx_k__skip), 0, 0, 1, 1},
  {&__pyx_n_s__smooth_colors, __pyx_k__smooth_colors, sizeof(__pyx_k__smooth_colors), 0, 0, 1, 1},
  {&__pyx_n_s__smoothing, __pyx_k__smoothing, sizeof(__pyx_k__smoothing), 0, 0, 1, 1},
  {&__pyx_n_s__start_color, __pyx_k__start_color, sizeof(__pyx_k__start_color), 0, 0, 1, 1},
  {&__pyx_n_s__start_pos, __pyx_k__start_pos, sizeof(__pyx_k__start_pos), 0, 0, 1, 1},
  {&__pyx_n_s__step, __pyx_k__step, sizeof(__pyx_k__step), 0, 0, 1, 1},
  {&__pyx_n_s__steps, __pyx_k__steps, sizeof(__pyx_k__steps), 0, 0, 1, 1},
  {&__pyx_n_s__sys, __pyx_k__sys, sizeof(__pyx_k__sys), 0, 0, 1, 1},
  {&__pyx_n_s__theight, __pyx_k__theight, sizeof(__pyx_k__theight), 0, 0, 1, 1},
  {&__pyx_n_s__tmap, __pyx_k__tmap, sizeof(__pyx_k__tmap), 0, 0, 1, 1},
  {&__pyx_n_s__truncate, __pyx_k__truncate, sizeof(__pyx_k__truncate), 0, 0, 1, 1},
  {&__pyx_n_s__twidth, __pyx_k__twidth, sizeof(__pyx_k__twidth), 0, 0, 1, 1},
  {&__pyx_n_s__val, __pyx_k__val, sizeof(__pyx_k__val), 0, 0, 1, 1},
  {&__pyx_n_s__variation, __pyx_k__variation, sizeof(__pyx_k__variation), 0, 0, 1, 1},
  {&__pyx_n_s__w, __pyx_k__w, sizeof(__pyx_k__w), 0, 0, 1, 1},
  {&__pyx_n_s__width, __pyx_k__width, sizeof(__pyx_k__width), 0, 0, 1, 1},
  {&__pyx_n_s__write_vxl, __pyx_k__write_vxl, sizeof(__pyx_k__write_vxl), 0, 0, 1, 1},
  {&__pyx_n_s__x, __pyx_k__x, sizeof(__pyx_k__x), 0, 0, 1, 1},
  {&__pyx_n_s__x2, __pyx_k__x2, sizeof(__pyx_k__x2), 0, 0, 1, 1},
  {&__pyx_n_s__xrange, __pyx_k__xrange, sizeof(__pyx_k__xrange), 0, 0, 1, 1},
  {&__pyx_n_s__y, __pyx_k__y, sizeof(__pyx_k__y), 0, 0, 1, 1},
  {&__pyx_n_s__y2, __pyx_k__y2, sizeof(__pyx_k__y2), 0, 0, 1, 1},
  {&__pyx_n_s__z, __pyx_k__z, sizeof(__pyx_k__z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetName(__pyx_b, __pyx_n_s__object); if (!__pyx_builtin_object) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetName(__pyx_b, __pyx_n_s__xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "pyspades\mapmaker.pyx":124
 *             x = idx % self.width
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),             # <<<<<<<<<<<<<<
 *                                              y + random.randint(-1,1))
 *     cpdef create_heightmap(self):
 */
  __pyx_k_tuple_1 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_1));
  __Pyx_INCREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_1, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  __Pyx_INCREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_1, 1, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_1));

  /* "pyspades\mapmaker.pyx":125
 *             y = idx // self.height
 *             self.tmap[idx] = self.get_repeat(x + random.randint(-1,1),
 *                                              y + random.randint(-1,1))             # <<<<<<<<<<<<<<
 *     cpdef create_heightmap(self):
 *         """Return a HeightMap with unfinished color data and a list of
 */
  __pyx_k_tuple_2 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_2));
  __Pyx_INCREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  __Pyx_INCREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 1, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "pyspades\mapmaker.pyx":445
 * cdef inline int paint_gradient(object zcoltable, int z):
 *     cdef int zz = z*3
 *     cdef int rnd = random.randint(-4,4)             # <<<<<<<<<<<<<<
 *     return make_color(lim_byte(zcoltable[zz]+rnd),
 *                       lim_byte(zcoltable[zz+1]+rnd),
 */
  __pyx_k_tuple_6 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_INCREF(__pyx_int_neg_4);
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, __pyx_int_neg_4);
  __Pyx_GIVEREF(__pyx_int_neg_4);
  __Pyx_INCREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 1, __pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "pyspades\mapmaker.pyx":484
 *         self.steps = []
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))             # <<<<<<<<<<<<<<
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */
  __pyx_k_tuple_7 = PyTuple_New(4); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 2, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 3, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  #if PY_VERSION_HEX < 0x02040000
  if (unlikely(__Pyx_Py23SetsImport() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_neg_4 = PyInt_FromLong(-4); if (unlikely(!__pyx_int_neg_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_63 = PyInt_FromLong(63); if (unlikely(!__pyx_int_63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initmapmaker(void); /*proto*/
PyMODINIT_FUNC initmapmaker(void)
#else
PyMODINIT_FUNC PyInit_mapmaker(void); /*proto*/
PyMODINIT_FUNC PyInit_mapmaker(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_mapmaker(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("mapmaker"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_pyspades__mapmaker) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_8pyspades_8mapmaker_BiomeMap = &__pyx_vtable_8pyspades_8mapmaker_BiomeMap;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.get_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_get_repeat;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.set_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int, int, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_set_repeat;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.noise = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_noise;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.random_points = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_8BiomeMap_random_points *__pyx_optional_args))__pyx_f_8pyspades_8mapmaker_8BiomeMap_random_points;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.point_flood = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_point_flood;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.jitter = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_jitter;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.create_heightmap = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_create_heightmap;
  __pyx_vtable_8pyspades_8mapmaker_BiomeMap.rect_of_point = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_BiomeMap *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_8BiomeMap_rect_of_point;
  if (PyType_Ready(&__pyx_type_8pyspades_8mapmaker_BiomeMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pyspades_8mapmaker_BiomeMap.tp_dict, __pyx_vtabptr_8pyspades_8mapmaker_BiomeMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BiomeMap", (PyObject *)&__pyx_type_8pyspades_8mapmaker_BiomeMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pyspades_8mapmaker_BiomeMap = &__pyx_type_8pyspades_8mapmaker_BiomeMap;
  __pyx_vtabptr_8pyspades_8mapmaker_HeightMap = &__pyx_vtable_8pyspades_8mapmaker_HeightMap;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.get = (double (*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_get;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.get_repeat = (double (*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_get_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.set = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_set;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.set_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_set_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.add_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_add_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.get_col = (int (*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_get_col;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.get_col_repeat = (int (*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_get_col_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.set_col_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_set_col_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.fill_col = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_fill_col;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.mult_repeat = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_mult_repeat;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.seed = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_seed;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.peaking = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_peaking;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.dipping = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_dipping;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rolling = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rolling;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.smoothing = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_smoothing;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.midpoint_displace = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, double, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_8mapmaker_9HeightMap_midpoint_displace *__pyx_optional_args))__pyx_f_8pyspades_8mapmaker_9HeightMap_midpoint_displace;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.jitter_heights = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_heights;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.jitter_colors = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_jitter_colors;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.level_against_heightmap = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_level_against_heightmap;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.blend_heightmaps = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_blend_heightmaps;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rect_solid = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_solid;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rect_noise = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, double, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_noise;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rect_color = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rect_color;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.truncate = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_truncate;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.offset_z = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_offset_z;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rescale_z = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rescale_z;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.paint_gradient_fill = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_paint_gradient_fill;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rewrite_gradient_fill = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rewrite_gradient_fill;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.rgb_noise_colors = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_rgb_noise_colors;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.smooth_colors = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_smooth_colors;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.write_vxl = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_write_vxl;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.line_add = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_line_add;
  __pyx_vtable_8pyspades_8mapmaker_HeightMap.line_set = (PyObject *(*)(struct __pyx_obj_8pyspades_8mapmaker_HeightMap *, int, int, int, int, int, double, int __pyx_skip_dispatch))__pyx_f_8pyspades_8mapmaker_9HeightMap_line_set;
  if (PyType_Ready(&__pyx_type_8pyspades_8mapmaker_HeightMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pyspades_8mapmaker_HeightMap.tp_dict, __pyx_vtabptr_8pyspades_8mapmaker_HeightMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "HeightMap", (PyObject *)&__pyx_type_8pyspades_8mapmaker_HeightMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pyspades_8mapmaker_HeightMap = &__pyx_type_8pyspades_8mapmaker_HeightMap;
  /*--- Type import code ---*/
  __pyx_ptype_8pyspades_3vxl_VXLData = __Pyx_ImportType("pyspades.vxl", "VXLData", sizeof(struct __pyx_obj_8pyspades_3vxl_VXLData), 1); if (unlikely(!__pyx_ptype_8pyspades_3vxl_VXLData)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pyspades_3vxl_VXLData = (struct __pyx_vtabstruct_8pyspades_3vxl_VXLData*)__Pyx_GetVtable(__pyx_ptype_8pyspades_3vxl_VXLData->tp_dict); if (unlikely(!__pyx_vtabptr_8pyspades_3vxl_VXLData)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pyspades\mapmaker.pyx":23
 *     void genland(unsigned long seed, MapData * map)
 * 
 * import array             # <<<<<<<<<<<<<<
 * import random
 * import math
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__array), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__array, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":24
 * 
 * import array
 * import random             # <<<<<<<<<<<<<<
 * import math
 * import sys
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__random), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__random, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":25
 * import array
 * import random
 * import math             # <<<<<<<<<<<<<<
 * import sys
 * from collections import deque
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__math), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__math, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":26
 * import random
 * import math
 * import sys             # <<<<<<<<<<<<<<
 * from collections import deque
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__sys), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":27
 * import math
 * import sys
 * from collections import deque             # <<<<<<<<<<<<<<
 * cimport cython
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__deque));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__deque));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__deque));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__collections), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__deque); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__deque, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":30
 * cimport cython
 * 
 * def generate_classic(seed):             # <<<<<<<<<<<<<<
 *     cdef VXLData map = VXLData()
 *     genland(seed, map.map)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8pyspades_8mapmaker_generate_classic, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__generate_classic, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":35
 *     return map
 * 
 * class Biome(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, gradient, height, variation, noise):
 *         """
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

  /* "pyspades\mapmaker.pyx":36
 * 
 * class Biome(object):
 *     def __init__(self, gradient, height, variation, noise):             # <<<<<<<<<<<<<<
 *         """
 *         Create a biome with a Gradient object, typical height(0.0-1.0), and
 */
  __pyx_t_1 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_8pyspades_8mapmaker_5Biome___init__, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s____init__, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\mapmaker.pyx":35
 *     return map
 * 
 * class Biome(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, gradient, height, variation, noise):
 *         """
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_t_2), __pyx_n_s__Biome, __pyx_n_s_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Biome, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":478
 *     return coords
 * 
 * from color import *             # <<<<<<<<<<<<<<
 * 
 * class Gradient(object):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_9));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s_9));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_9));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s__color), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (__pyx_import_star(__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyspades\mapmaker.pyx":480
 * from color import *
 * 
 * class Gradient(object):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.steps = []
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));

  /* "pyspades\mapmaker.pyx":481
 * 
 * class Gradient(object):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.steps = []
 *         for n in xrange(0,64):
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient___init__, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":485
 *         for n in xrange(0,64):
 *             self.steps.append((0,0,0,0))
 *     def set_step_rgb(self, step, rgb):             # <<<<<<<<<<<<<<
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_1set_step_rgb, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s__set_step_rgb, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":487
 *     def set_step_rgb(self, step, rgb):
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def set_step_hsb(self, step, hsb):             # <<<<<<<<<<<<<<
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_2set_step_hsb, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s__set_step_hsb, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":490
 *         rgb = hsb_to_rgb(*hsb)
 *         self.steps[step] = (rgb[0],rgb[1],rgb[2],255)
 *     def rgb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-255) RGB values."""
 *         dist = end_pos - start_pos
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_3rgb, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s__rgb, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":498
 *                                              end_color,
 *                                              pct))
 *     def hsb(self, start_pos, start_color, end_pos, end_color):             # <<<<<<<<<<<<<<
 *         """Linear interpolation of (0-360,0-100,0-100) HSB values
 *             as used in GIMP."""
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_4hsb, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s__hsb, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":512
 *             interp = interpolate_hsb(start_color, end_color, pct)
 *             self.set_step_hsb(n, interp)
 *     def array(self):             # <<<<<<<<<<<<<<
 *         base = list(self.steps)
 *         base.reverse()
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_8pyspades_8mapmaker_8Gradient_5array, NULL, __pyx_n_s_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s__array, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\mapmaker.pyx":480
 * from color import *
 * 
 * class Gradient(object):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.steps = []
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  __pyx_t_1 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_3), __pyx_n_s__Gradient, __pyx_n_s_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__Gradient, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

  /* "pyspades\mapmaker.pyx":1
 * # Copyright (c) James Hofmann 2012.             # <<<<<<<<<<<<<<
 * 
 * # This file is part of pyspades.
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pyspades.mapmaker");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyspades.mapmaker");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}


static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}


static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
    if (Py_TYPE(obj)->tp_as_number && Py_TYPE(obj)->tp_as_number->nb_float) {
        return PyFloat_AsDouble(obj);
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
    /* Default metaclass */
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, "__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;

    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;

    /* Python2 __metaclass__ */
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}


static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module) {
	__pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
    if (op == NULL)
        return NULL;
	op->func.m_ml = ml;
	Py_XINCREF(self);
	op->func.m_self = self;
	Py_XINCREF(module);
	op->func.m_module = module;
	PyObject_GC_Track(op);
	return (PyObject *)op;
}

static void __pyx_binding_PyCFunctionType_dealloc(__pyx_binding_PyCFunctionType_object *m) {
	PyObject_GC_UnTrack(m);
	Py_XDECREF(m->func.m_self);
	Py_XDECREF(m->func.m_module);
    PyObject_GC_Del(m);
}

static PyObject *__pyx_binding_PyCFunctionType_descr_get(PyObject *func, PyObject *obj, PyObject *type) {
	if (obj == Py_None)
		obj = NULL;
	return PyMethod_New(func, obj, type);
}

static int __pyx_binding_PyCFunctionType_init(void) {
    __pyx_binding_PyCFunctionType_type = PyCFunction_Type;
    __pyx_binding_PyCFunctionType_type.tp_name = __Pyx_NAMESTR("cython_binding_builtin_function_or_method");
    __pyx_binding_PyCFunctionType_type.tp_dealloc = (destructor)__pyx_binding_PyCFunctionType_dealloc;
    __pyx_binding_PyCFunctionType_type.tp_descr_get = __pyx_binding_PyCFunctionType_descr_get;
    if (PyType_Ready(&__pyx_binding_PyCFunctionType_type) < 0) {
        return -1;
    }
    __pyx_binding_PyCFunctionType = &__pyx_binding_PyCFunctionType_type;
    return 0;

}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


static void __Pyx_WriteUnraisable(const char *name) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    long size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && ((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        PyErr_Warn(NULL, warning);
        #else
        PyErr_WarnEx(NULL, warning, 0);
        #endif
    }
    else if (((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyMapping_GetItemString(dict, (char *)"__pyx_vtable__");
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
