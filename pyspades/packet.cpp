/* Generated by Cython 0.14.1 on Tue Mar 05 15:51:22 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__pyspades__packet

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "packet.pyx",
  "bytes.pxd",
  "loaders.pxd",
};

/* Type declarations */

/* "pyspades\bytes.pxd":13
 * 
 *     cdef char * check_available(self, int size) except NULL
 *     cpdef read(self, int bytes = ?)             # <<<<<<<<<<<<<<
 *     cpdef int readByte(self, bint unsigned = ?) except INT_ERROR
 *     cpdef int readShort(self, bint unsigned = ?, bint big_endian = ?) \
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_read {
  int __pyx_n;
  int bytes;
};

/* "pyspades\bytes.pxd":14
 *     cdef char * check_available(self, int size) except NULL
 *     cpdef read(self, int bytes = ?)
 *     cpdef int readByte(self, bint unsigned = ?) except INT_ERROR             # <<<<<<<<<<<<<<
 *     cpdef int readShort(self, bint unsigned = ?, bint big_endian = ?) \
 *                         except INT_ERROR
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readByte {
  int __pyx_n;
  int __pyx_unsigned;
};

/* "pyspades\bytes.pxd":15
 *     cpdef read(self, int bytes = ?)
 *     cpdef int readByte(self, bint unsigned = ?) except INT_ERROR
 *     cpdef int readShort(self, bint unsigned = ?, bint big_endian = ?) \             # <<<<<<<<<<<<<<
 *                         except INT_ERROR
 *     cpdef long long readInt(self, bint unsigned = ?, bint big_endian = ?) \
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readShort {
  int __pyx_n;
  int __pyx_unsigned;
  int big_endian;
};

/* "pyspades\bytes.pxd":17
 *     cpdef int readShort(self, bint unsigned = ?, bint big_endian = ?) \
 *                         except INT_ERROR
 *     cpdef long long readInt(self, bint unsigned = ?, bint big_endian = ?) \             # <<<<<<<<<<<<<<
 *                             except LONG_LONG_ERROR
 *     cpdef float readFloat(self, bint big_endian = ?) except FLOAT_ERROR
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readInt {
  int __pyx_n;
  int __pyx_unsigned;
  int big_endian;
};

/* "pyspades\bytes.pxd":19
 *     cpdef long long readInt(self, bint unsigned = ?, bint big_endian = ?) \
 *                             except LONG_LONG_ERROR
 *     cpdef float readFloat(self, bint big_endian = ?) except FLOAT_ERROR             # <<<<<<<<<<<<<<
 *     cpdef readString(self, int size = ?)
 *     cpdef ByteReader readReader(self, int size = ?)
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readFloat {
  int __pyx_n;
  int big_endian;
};

/* "pyspades\bytes.pxd":20
 *                             except LONG_LONG_ERROR
 *     cpdef float readFloat(self, bint big_endian = ?) except FLOAT_ERROR
 *     cpdef readString(self, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef ByteReader readReader(self, int size = ?)
 *     cpdef int dataLeft(self)
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readString {
  int __pyx_n;
  int size;
};

/* "pyspades\bytes.pxd":21
 *     cpdef float readFloat(self, bint big_endian = ?) except FLOAT_ERROR
 *     cpdef readString(self, int size = ?)
 *     cpdef ByteReader readReader(self, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef int dataLeft(self)
 *     cdef void _skip(self, int bytes)
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readReader {
  int __pyx_n;
  int size;
};

/* "pyspades\bytes.pxd":34
 *     cdef void writeSize(self, char * data, int size)
 *     cpdef write(self, data)
 *     cpdef writeByte(self, int value, bint unsigned = ?)             # <<<<<<<<<<<<<<
 *     cpdef writeShort(self, int value, bint unsigned = ?,
 *                      bint big_endian = ?)
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeByte {
  int __pyx_n;
  int __pyx_unsigned;
};

/* "pyspades\bytes.pxd":35
 *     cpdef write(self, data)
 *     cpdef writeByte(self, int value, bint unsigned = ?)
 *     cpdef writeShort(self, int value, bint unsigned = ?,             # <<<<<<<<<<<<<<
 *                      bint big_endian = ?)
 *     cpdef writeInt(self, long long value, bint unsigned = ?,
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeShort {
  int __pyx_n;
  int __pyx_unsigned;
  int big_endian;
};

/* "pyspades\bytes.pxd":37
 *     cpdef writeShort(self, int value, bint unsigned = ?,
 *                      bint big_endian = ?)
 *     cpdef writeInt(self, long long value, bint unsigned = ?,             # <<<<<<<<<<<<<<
 *                    bint big_endian = ?)
 *     cpdef writeFloat(self, float value, bint big_endian = ?)
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeInt {
  int __pyx_n;
  int __pyx_unsigned;
  int big_endian;
};

/* "pyspades\bytes.pxd":39
 *     cpdef writeInt(self, long long value, bint unsigned = ?,
 *                    bint big_endian = ?)
 *     cpdef writeFloat(self, float value, bint big_endian = ?)             # <<<<<<<<<<<<<<
 *     cpdef writeStringSize(self, char * value, int size)
 *     cpdef writeString(self, value, int size = ?)
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeFloat {
  int __pyx_n;
  int big_endian;
};

/* "pyspades\bytes.pxd":41
 *     cpdef writeFloat(self, float value, bint big_endian = ?)
 *     cpdef writeStringSize(self, char * value, int size)
 *     cpdef writeString(self, value, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef pad(self, int bytes)
 *     cpdef rewind(self, int bytes)
 */

struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeString {
  int __pyx_n;
  int size;
};

/* "pyspades\bytes.pxd":29
 *     cpdef size_t tell(self)
 * 
 * cdef class ByteWriter:             # <<<<<<<<<<<<<<
 *     cdef void * stream
 * 
 */

struct __pyx_obj_8pyspades_5bytes_ByteWriter {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_5bytes_ByteWriter *__pyx_vtab;
  void *stream;
};

/* "pyspades\loaders.pxd":20
 * from pyspades.bytes cimport ByteWriter, ByteReader
 * 
 * cdef class Loader:             # <<<<<<<<<<<<<<
 *     cpdef read(self, ByteReader reader)
 *     cpdef write(self, ByteWriter reader)
 */

struct __pyx_obj_8pyspades_7loaders_Loader {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_7loaders_Loader *__pyx_vtab;
};

/* "pyspades\bytes.pxd":5
 * DEF FLOAT_ERROR = float('nan')
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef char * data
 *     cdef char * pos
 */

struct __pyx_obj_8pyspades_5bytes_ByteReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyspades_5bytes_ByteReader *__pyx_vtab;
  char *data;
  char *pos;
  char *end;
  int start;
  int size;
  PyObject *input;
};


struct __pyx_vtabstruct_8pyspades_5bytes_ByteReader {
  char *(*check_available)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int);
  PyObject *(*read)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_read *__pyx_optional_args);
  int (*readByte)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readByte *__pyx_optional_args);
  int (*readShort)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readShort *__pyx_optional_args);
  PY_LONG_LONG (*readInt)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readInt *__pyx_optional_args);
  float (*readFloat)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readFloat *__pyx_optional_args);
  PyObject *(*readString)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readString *__pyx_optional_args);
  struct __pyx_obj_8pyspades_5bytes_ByteReader *(*readReader)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readReader *__pyx_optional_args);
  int (*dataLeft)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch);
  void (*_skip)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int);
  PyObject *(*skipBytes)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int, int __pyx_skip_dispatch);
  PyObject *(*rewind)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int, int __pyx_skip_dispatch);
  PyObject *(*seek)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, size_t, int __pyx_skip_dispatch);
  size_t (*tell)(struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_5bytes_ByteReader *__pyx_vtabptr_8pyspades_5bytes_ByteReader;


/* "pyspades\loaders.pxd":20
 * from pyspades.bytes cimport ByteWriter, ByteReader
 * 
 * cdef class Loader:             # <<<<<<<<<<<<<<
 *     cpdef read(self, ByteReader reader)
 *     cpdef write(self, ByteWriter reader)
 */

struct __pyx_vtabstruct_8pyspades_7loaders_Loader {
  PyObject *(*read)(struct __pyx_obj_8pyspades_7loaders_Loader *, struct __pyx_obj_8pyspades_5bytes_ByteReader *, int __pyx_skip_dispatch);
  PyObject *(*write)(struct __pyx_obj_8pyspades_7loaders_Loader *, struct __pyx_obj_8pyspades_5bytes_ByteWriter *, int __pyx_skip_dispatch);
  struct __pyx_obj_8pyspades_5bytes_ByteWriter *(*generate)(struct __pyx_obj_8pyspades_7loaders_Loader *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_7loaders_Loader *__pyx_vtabptr_8pyspades_7loaders_Loader;


/* "pyspades\bytes.pxd":29
 *     cpdef size_t tell(self)
 * 
 * cdef class ByteWriter:             # <<<<<<<<<<<<<<
 *     cdef void * stream
 * 
 */

struct __pyx_vtabstruct_8pyspades_5bytes_ByteWriter {
  void (*writeSize)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, char *, int);
  PyObject *(*write)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*writeByte)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeByte *__pyx_optional_args);
  PyObject *(*writeShort)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeShort *__pyx_optional_args);
  PyObject *(*writeInt)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, PY_LONG_LONG, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeInt *__pyx_optional_args);
  PyObject *(*writeFloat)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, float, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeFloat *__pyx_optional_args);
  PyObject *(*writeStringSize)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, char *, int, int __pyx_skip_dispatch);
  PyObject *(*writeString)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8pyspades_5bytes_10ByteWriter_writeString *__pyx_optional_args);
  PyObject *(*pad)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, int, int __pyx_skip_dispatch);
  PyObject *(*rewind)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, int, int __pyx_skip_dispatch);
  size_t (*tell)(struct __pyx_obj_8pyspades_5bytes_ByteWriter *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8pyspades_5bytes_ByteWriter *__pyx_vtabptr_8pyspades_5bytes_ByteWriter;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, long size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from pyspades.bytes */

static PyTypeObject *__pyx_ptype_8pyspades_5bytes_ByteReader = 0;
static PyTypeObject *__pyx_ptype_8pyspades_5bytes_ByteWriter = 0;
/* Module declarations from pyspades.loaders */

static PyTypeObject *__pyx_ptype_8pyspades_7loaders_Loader = 0;
/* Module declarations from pyspades.packet */

static CYTHON_INLINE struct __pyx_obj_8pyspades_7loaders_Loader *__pyx_f_8pyspades_6packet_load_contained_packet(struct __pyx_obj_8pyspades_5bytes_ByteReader *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pyspades.packet"
static int __pyx_module_is_main_pyspades__packet = 0;

/* Implementation of pyspades.packet */
static char __pyx_k_1[] = "pyspades.common";
static char __pyx_k_2[] = "*";
static char __pyx_k_3[] = "pyspades.packet";
static char __pyx_k__id[] = "id";
static char __pyx_k__copy[] = "copy";
static char __pyx_k__item[] = "item";
static char __pyx_k__SetHP[] = "SetHP";
static char __pyx_k__debug[] = "debug";
static char __pyx_k__Restock[] = "Restock";
static char __pyx_k__SetTool[] = "SetTool";
static char __pyx_k__FogColor[] = "FogColor";
static char __pyx_k__MapChunk[] = "MapChunk";
static char __pyx_k__MapStart[] = "MapStart";
static char __pyx_k__SetColor[] = "SetColor";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__pyspades[] = "pyspades";
static char __pyx_k__readByte[] = "readByte";
static char __pyx_k__BlockLine[] = "BlockLine";
static char __pyx_k__HitPacket[] = "HitPacket";
static char __pyx_k__InputData[] = "InputData";
static char __pyx_k__IntelDrop[] = "IntelDrop";
static char __pyx_k__StateData[] = "StateData";
static char __pyx_k__contained[] = "contained";
static char __pyx_k__ChangeTeam[] = "ChangeTeam";
static char __pyx_k__KillAction[] = "KillAction";
static char __pyx_k__MoveObject[] = "MoveObject";
static char __pyx_k__PlayerLeft[] = "PlayerLeft";
static char __pyx_k__BlockAction[] = "BlockAction";
static char __pyx_k__ChatMessage[] = "ChatMessage";
static char __pyx_k__IntelPickup[] = "IntelPickup";
static char __pyx_k__ProgressBar[] = "ProgressBar";
static char __pyx_k__WeaponInput[] = "WeaponInput";
static char __pyx_k__WorldUpdate[] = "WorldUpdate";
static char __pyx_k__ChangeWeapon[] = "ChangeWeapon";
static char __pyx_k__CreatePlayer[] = "CreatePlayer";
static char __pyx_k__IntelCapture[] = "IntelCapture";
static char __pyx_k__PositionData[] = "PositionData";
static char __pyx_k__WeaponReload[] = "WeaponReload";
static char __pyx_k__GrenadePacket[] = "GrenadePacket";
static char __pyx_k__CLIENT_LOADERS[] = "CLIENT_LOADERS";
static char __pyx_k__CONTAINED_LIST[] = "CONTAINED_LIST";
static char __pyx_k__ExistingPlayer[] = "ExistingPlayer";
static char __pyx_k__SERVER_LOADERS[] = "SERVER_LOADERS";
static char __pyx_k__OrientationData[] = "OrientationData";
static char __pyx_k__ShortPlayerData[] = "ShortPlayerData";
static char __pyx_k__TerritoryCapture[] = "TerritoryCapture";
static char __pyx_k__CONTAINED_LOADERS[] = "CONTAINED_LOADERS";
static char __pyx_k__load_client_packet[] = "load_client_packet";
static char __pyx_k__load_server_packet[] = "load_server_packet";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_n_s_3;
static PyObject *__pyx_n_s__BlockAction;
static PyObject *__pyx_n_s__BlockLine;
static PyObject *__pyx_n_s__CLIENT_LOADERS;
static PyObject *__pyx_n_s__CONTAINED_LIST;
static PyObject *__pyx_n_s__CONTAINED_LOADERS;
static PyObject *__pyx_n_s__ChangeTeam;
static PyObject *__pyx_n_s__ChangeWeapon;
static PyObject *__pyx_n_s__ChatMessage;
static PyObject *__pyx_n_s__CreatePlayer;
static PyObject *__pyx_n_s__ExistingPlayer;
static PyObject *__pyx_n_s__FogColor;
static PyObject *__pyx_n_s__GrenadePacket;
static PyObject *__pyx_n_s__HitPacket;
static PyObject *__pyx_n_s__InputData;
static PyObject *__pyx_n_s__IntelCapture;
static PyObject *__pyx_n_s__IntelDrop;
static PyObject *__pyx_n_s__IntelPickup;
static PyObject *__pyx_n_s__KillAction;
static PyObject *__pyx_n_s__MapChunk;
static PyObject *__pyx_n_s__MapStart;
static PyObject *__pyx_n_s__MoveObject;
static PyObject *__pyx_n_s__OrientationData;
static PyObject *__pyx_n_s__PlayerLeft;
static PyObject *__pyx_n_s__PositionData;
static PyObject *__pyx_n_s__ProgressBar;
static PyObject *__pyx_n_s__Restock;
static PyObject *__pyx_n_s__SERVER_LOADERS;
static PyObject *__pyx_n_s__SetColor;
static PyObject *__pyx_n_s__SetHP;
static PyObject *__pyx_n_s__SetTool;
static PyObject *__pyx_n_s__ShortPlayerData;
static PyObject *__pyx_n_s__StateData;
static PyObject *__pyx_n_s__TerritoryCapture;
static PyObject *__pyx_n_s__WeaponInput;
static PyObject *__pyx_n_s__WeaponReload;
static PyObject *__pyx_n_s__WorldUpdate;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__contained;
static PyObject *__pyx_n_s__copy;
static PyObject *__pyx_n_s__debug;
static PyObject *__pyx_n_s__id;
static PyObject *__pyx_n_s__item;
static PyObject *__pyx_n_s__load_client_packet;
static PyObject *__pyx_n_s__load_server_packet;
static PyObject *__pyx_n_s__pyspades;
static PyObject *__pyx_n_s__readByte;

/* "pyspades\packet.pyx":72
 *     CLIENT_LOADERS[item.id] = item
 * 
 * def load_server_packet(data):             # <<<<<<<<<<<<<<
 *     return load_contained_packet(data, SERVER_LOADERS)
 * 
 */

static PyObject *__pyx_pf_8pyspades_6packet_load_server_packet(PyObject *__pyx_self, PyObject *__pyx_v_data); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_6packet_load_server_packet = {__Pyx_NAMESTR("load_server_packet"), (PyCFunction)__pyx_pf_8pyspades_6packet_load_server_packet, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_8pyspades_6packet_load_server_packet(PyObject *__pyx_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("load_server_packet");
  __pyx_self = __pyx_self;

  /* "pyspades\packet.pyx":73
 * 
 * def load_server_packet(data):
 *     return load_contained_packet(data, SERVER_LOADERS)             # <<<<<<<<<<<<<<
 * 
 * def load_client_packet(data):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_8pyspades_5bytes_ByteReader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_data;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__SERVER_LOADERS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((PyObject *)__pyx_f_8pyspades_6packet_load_contained_packet(((struct __pyx_obj_8pyspades_5bytes_ByteReader *)__pyx_t_1), ((PyObject*)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.packet.load_server_packet");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\packet.pyx":75
 *     return load_contained_packet(data, SERVER_LOADERS)
 * 
 * def load_client_packet(data):             # <<<<<<<<<<<<<<
 *     return load_contained_packet(data, CLIENT_LOADERS)
 * 
 */

static PyObject *__pyx_pf_8pyspades_6packet_1load_client_packet(PyObject *__pyx_self, PyObject *__pyx_v_data); /*proto*/
static PyMethodDef __pyx_mdef_8pyspades_6packet_1load_client_packet = {__Pyx_NAMESTR("load_client_packet"), (PyCFunction)__pyx_pf_8pyspades_6packet_1load_client_packet, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_8pyspades_6packet_1load_client_packet(PyObject *__pyx_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("load_client_packet");
  __pyx_self = __pyx_self;

  /* "pyspades\packet.pyx":76
 * 
 * def load_client_packet(data):
 *     return load_contained_packet(data, CLIENT_LOADERS)             # <<<<<<<<<<<<<<
 * 
 * cdef inline Loader load_contained_packet(ByteReader data, dict table):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_8pyspades_5bytes_ByteReader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_data;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__CLIENT_LOADERS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected dict, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((PyObject *)__pyx_f_8pyspades_6packet_load_contained_packet(((struct __pyx_obj_8pyspades_5bytes_ByteReader *)__pyx_t_1), ((PyObject*)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyspades.packet.load_client_packet");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyspades\packet.pyx":78
 *     return load_contained_packet(data, CLIENT_LOADERS)
 * 
 * cdef inline Loader load_contained_packet(ByteReader data, dict table):             # <<<<<<<<<<<<<<
 *     type = data.readByte(True)
 *     return table[type](data)
 */

static CYTHON_INLINE struct __pyx_obj_8pyspades_7loaders_Loader *__pyx_f_8pyspades_6packet_load_contained_packet(struct __pyx_obj_8pyspades_5bytes_ByteReader *__pyx_v_data, PyObject *__pyx_v_table) {
  int __pyx_v_type;
  struct __pyx_obj_8pyspades_7loaders_Loader *__pyx_r = NULL;
  int __pyx_t_1;
  struct __pyx_opt_args_8pyspades_5bytes_10ByteReader_readByte __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("load_contained_packet");

  /* "pyspades\packet.pyx":79
 * 
 * cdef inline Loader load_contained_packet(ByteReader data, dict table):
 *     type = data.readByte(True)             # <<<<<<<<<<<<<<
 *     return table[type](data)
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.__pyx_unsigned = 1;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pyspades_5bytes_ByteReader *)__pyx_v_data->__pyx_vtab)->readByte(__pyx_v_data, 0, &__pyx_t_2); if (unlikely(__pyx_t_1 == -2147483648LL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_type = __pyx_t_1;

  /* "pyspades\packet.pyx":80
 * cdef inline Loader load_contained_packet(ByteReader data, dict table):
 *     type = data.readByte(True)
 *     return table[type](data)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_table), __pyx_v_type, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
  __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_8pyspades_7loaders_Loader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((struct __pyx_obj_8pyspades_7loaders_Loader *)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_8pyspades_7loaders_Loader *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyspades.packet.load_contained_packet");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

char* __pyx_import_star_type_names[] = {
  "ByteWriter",
  "Loader",
  "ByteReader",
  0
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  char** type_name = __pyx_import_star_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}


/* import_all_from is an unexposed function from ceval.c */

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = __Pyx_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;

    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1; /* Unexpected error */
        PyErr_Clear();
        dict = __Pyx_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
        all = PyMapping_Keys(dict);
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }

    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            PyString_Check(name) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            PyUnicode_Check(name) &&
            PyUnicode_AS_UNICODE(name)[0] == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}


static int __pyx_import_star(PyObject* m) {

    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;

    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;

    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;

bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("packet"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_n_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 1},
  {&__pyx_n_s__BlockAction, __pyx_k__BlockAction, sizeof(__pyx_k__BlockAction), 0, 0, 1, 1},
  {&__pyx_n_s__BlockLine, __pyx_k__BlockLine, sizeof(__pyx_k__BlockLine), 0, 0, 1, 1},
  {&__pyx_n_s__CLIENT_LOADERS, __pyx_k__CLIENT_LOADERS, sizeof(__pyx_k__CLIENT_LOADERS), 0, 0, 1, 1},
  {&__pyx_n_s__CONTAINED_LIST, __pyx_k__CONTAINED_LIST, sizeof(__pyx_k__CONTAINED_LIST), 0, 0, 1, 1},
  {&__pyx_n_s__CONTAINED_LOADERS, __pyx_k__CONTAINED_LOADERS, sizeof(__pyx_k__CONTAINED_LOADERS), 0, 0, 1, 1},
  {&__pyx_n_s__ChangeTeam, __pyx_k__ChangeTeam, sizeof(__pyx_k__ChangeTeam), 0, 0, 1, 1},
  {&__pyx_n_s__ChangeWeapon, __pyx_k__ChangeWeapon, sizeof(__pyx_k__ChangeWeapon), 0, 0, 1, 1},
  {&__pyx_n_s__ChatMessage, __pyx_k__ChatMessage, sizeof(__pyx_k__ChatMessage), 0, 0, 1, 1},
  {&__pyx_n_s__CreatePlayer, __pyx_k__CreatePlayer, sizeof(__pyx_k__CreatePlayer), 0, 0, 1, 1},
  {&__pyx_n_s__ExistingPlayer, __pyx_k__ExistingPlayer, sizeof(__pyx_k__ExistingPlayer), 0, 0, 1, 1},
  {&__pyx_n_s__FogColor, __pyx_k__FogColor, sizeof(__pyx_k__FogColor), 0, 0, 1, 1},
  {&__pyx_n_s__GrenadePacket, __pyx_k__GrenadePacket, sizeof(__pyx_k__GrenadePacket), 0, 0, 1, 1},
  {&__pyx_n_s__HitPacket, __pyx_k__HitPacket, sizeof(__pyx_k__HitPacket), 0, 0, 1, 1},
  {&__pyx_n_s__InputData, __pyx_k__InputData, sizeof(__pyx_k__InputData), 0, 0, 1, 1},
  {&__pyx_n_s__IntelCapture, __pyx_k__IntelCapture, sizeof(__pyx_k__IntelCapture), 0, 0, 1, 1},
  {&__pyx_n_s__IntelDrop, __pyx_k__IntelDrop, sizeof(__pyx_k__IntelDrop), 0, 0, 1, 1},
  {&__pyx_n_s__IntelPickup, __pyx_k__IntelPickup, sizeof(__pyx_k__IntelPickup), 0, 0, 1, 1},
  {&__pyx_n_s__KillAction, __pyx_k__KillAction, sizeof(__pyx_k__KillAction), 0, 0, 1, 1},
  {&__pyx_n_s__MapChunk, __pyx_k__MapChunk, sizeof(__pyx_k__MapChunk), 0, 0, 1, 1},
  {&__pyx_n_s__MapStart, __pyx_k__MapStart, sizeof(__pyx_k__MapStart), 0, 0, 1, 1},
  {&__pyx_n_s__MoveObject, __pyx_k__MoveObject, sizeof(__pyx_k__MoveObject), 0, 0, 1, 1},
  {&__pyx_n_s__OrientationData, __pyx_k__OrientationData, sizeof(__pyx_k__OrientationData), 0, 0, 1, 1},
  {&__pyx_n_s__PlayerLeft, __pyx_k__PlayerLeft, sizeof(__pyx_k__PlayerLeft), 0, 0, 1, 1},
  {&__pyx_n_s__PositionData, __pyx_k__PositionData, sizeof(__pyx_k__PositionData), 0, 0, 1, 1},
  {&__pyx_n_s__ProgressBar, __pyx_k__ProgressBar, sizeof(__pyx_k__ProgressBar), 0, 0, 1, 1},
  {&__pyx_n_s__Restock, __pyx_k__Restock, sizeof(__pyx_k__Restock), 0, 0, 1, 1},
  {&__pyx_n_s__SERVER_LOADERS, __pyx_k__SERVER_LOADERS, sizeof(__pyx_k__SERVER_LOADERS), 0, 0, 1, 1},
  {&__pyx_n_s__SetColor, __pyx_k__SetColor, sizeof(__pyx_k__SetColor), 0, 0, 1, 1},
  {&__pyx_n_s__SetHP, __pyx_k__SetHP, sizeof(__pyx_k__SetHP), 0, 0, 1, 1},
  {&__pyx_n_s__SetTool, __pyx_k__SetTool, sizeof(__pyx_k__SetTool), 0, 0, 1, 1},
  {&__pyx_n_s__ShortPlayerData, __pyx_k__ShortPlayerData, sizeof(__pyx_k__ShortPlayerData), 0, 0, 1, 1},
  {&__pyx_n_s__StateData, __pyx_k__StateData, sizeof(__pyx_k__StateData), 0, 0, 1, 1},
  {&__pyx_n_s__TerritoryCapture, __pyx_k__TerritoryCapture, sizeof(__pyx_k__TerritoryCapture), 0, 0, 1, 1},
  {&__pyx_n_s__WeaponInput, __pyx_k__WeaponInput, sizeof(__pyx_k__WeaponInput), 0, 0, 1, 1},
  {&__pyx_n_s__WeaponReload, __pyx_k__WeaponReload, sizeof(__pyx_k__WeaponReload), 0, 0, 1, 1},
  {&__pyx_n_s__WorldUpdate, __pyx_k__WorldUpdate, sizeof(__pyx_k__WorldUpdate), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__contained, __pyx_k__contained, sizeof(__pyx_k__contained), 0, 0, 1, 1},
  {&__pyx_n_s__copy, __pyx_k__copy, sizeof(__pyx_k__copy), 0, 0, 1, 1},
  {&__pyx_n_s__debug, __pyx_k__debug, sizeof(__pyx_k__debug), 0, 0, 1, 1},
  {&__pyx_n_s__id, __pyx_k__id, sizeof(__pyx_k__id), 0, 0, 1, 1},
  {&__pyx_n_s__item, __pyx_k__item, sizeof(__pyx_k__item), 0, 0, 1, 1},
  {&__pyx_n_s__load_client_packet, __pyx_k__load_client_packet, sizeof(__pyx_k__load_client_packet), 0, 0, 1, 1},
  {&__pyx_n_s__load_server_packet, __pyx_k__load_server_packet, sizeof(__pyx_k__load_server_packet), 0, 0, 1, 1},
  {&__pyx_n_s__pyspades, __pyx_k__pyspades, sizeof(__pyx_k__pyspades), 0, 0, 1, 1},
  {&__pyx_n_s__readByte, __pyx_k__readByte, sizeof(__pyx_k__readByte), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpacket(void); /*proto*/
PyMODINIT_FUNC initpacket(void)
#else
PyMODINIT_FUNC PyInit_packet(void); /*proto*/
PyMODINIT_FUNC PyInit_packet(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  Py_ssize_t __pyx_t_33;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_packet(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("packet"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_pyspades__packet) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_8pyspades_5bytes_ByteReader = __Pyx_ImportType("pyspades.bytes", "ByteReader", sizeof(struct __pyx_obj_8pyspades_5bytes_ByteReader), 1); if (unlikely(!__pyx_ptype_8pyspades_5bytes_ByteReader)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pyspades_5bytes_ByteReader = (struct __pyx_vtabstruct_8pyspades_5bytes_ByteReader*)__Pyx_GetVtable(__pyx_ptype_8pyspades_5bytes_ByteReader->tp_dict); if (unlikely(!__pyx_vtabptr_8pyspades_5bytes_ByteReader)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pyspades_5bytes_ByteWriter = __Pyx_ImportType("pyspades.bytes", "ByteWriter", sizeof(struct __pyx_obj_8pyspades_5bytes_ByteWriter), 1); if (unlikely(!__pyx_ptype_8pyspades_5bytes_ByteWriter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pyspades_5bytes_ByteWriter = (struct __pyx_vtabstruct_8pyspades_5bytes_ByteWriter*)__Pyx_GetVtable(__pyx_ptype_8pyspades_5bytes_ByteWriter->tp_dict); if (unlikely(!__pyx_vtabptr_8pyspades_5bytes_ByteWriter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pyspades_7loaders_Loader = __Pyx_ImportType("pyspades.loaders", "Loader", sizeof(struct __pyx_obj_8pyspades_7loaders_Loader), 1); if (unlikely(!__pyx_ptype_8pyspades_7loaders_Loader)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pyspades_7loaders_Loader = (struct __pyx_vtabstruct_8pyspades_7loaders_Loader*)__Pyx_GetVtable(__pyx_ptype_8pyspades_7loaders_Loader->tp_dict); if (unlikely(!__pyx_vtabptr_8pyspades_7loaders_Loader)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pyspades\packet.pyx":18
 * # along with pyspades.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * from pyspades.common import *             # <<<<<<<<<<<<<<
 * from pyspades.loaders cimport Loader
 * from pyspades import debug
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_2));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_2));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_1), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":20
 * from pyspades.common import *
 * from pyspades.loaders cimport Loader
 * from pyspades import debug             # <<<<<<<<<<<<<<
 * from pyspades.bytes cimport ByteReader, ByteWriter
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__debug));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__debug));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__debug));
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__pyspades), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__debug); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__debug, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyspades\packet.pyx":23
 * from pyspades.bytes cimport ByteReader, ByteWriter
 * 
 * from pyspades import contained             # <<<<<<<<<<<<<<
 * 
 * CONTAINED_LIST = [
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__contained));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__contained));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__contained));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__pyspades), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__contained); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__contained, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":26
 * 
 * CONTAINED_LIST = [
 *     contained.PositionData,             # <<<<<<<<<<<<<<
 *     contained.OrientationData,
 *     contained.WorldUpdate,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__PositionData); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":27
 * CONTAINED_LIST = [
 *     contained.PositionData,
 *     contained.OrientationData,             # <<<<<<<<<<<<<<
 *     contained.WorldUpdate,
 *     contained.InputData,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__OrientationData); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":28
 *     contained.PositionData,
 *     contained.OrientationData,
 *     contained.WorldUpdate,             # <<<<<<<<<<<<<<
 *     contained.InputData,
 *     contained.WeaponInput,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__WorldUpdate); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":29
 *     contained.OrientationData,
 *     contained.WorldUpdate,
 *     contained.InputData,             # <<<<<<<<<<<<<<
 *     contained.WeaponInput,
 *     contained.HitPacket,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__InputData); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":30
 *     contained.WorldUpdate,
 *     contained.InputData,
 *     contained.WeaponInput,             # <<<<<<<<<<<<<<
 *     contained.HitPacket,
 *     contained.GrenadePacket,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__WeaponInput); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":31
 *     contained.InputData,
 *     contained.WeaponInput,
 *     contained.HitPacket,             # <<<<<<<<<<<<<<
 *     contained.GrenadePacket,
 *     contained.SetTool,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__HitPacket); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":32
 *     contained.WeaponInput,
 *     contained.HitPacket,
 *     contained.GrenadePacket,             # <<<<<<<<<<<<<<
 *     contained.SetTool,
 *     contained.SetColor,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__GrenadePacket); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":33
 *     contained.HitPacket,
 *     contained.GrenadePacket,
 *     contained.SetTool,             # <<<<<<<<<<<<<<
 *     contained.SetColor,
 *     contained.ExistingPlayer,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__SetTool); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":34
 *     contained.GrenadePacket,
 *     contained.SetTool,
 *     contained.SetColor,             # <<<<<<<<<<<<<<
 *     contained.ExistingPlayer,
 *     contained.ShortPlayerData,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__SetColor); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":35
 *     contained.SetTool,
 *     contained.SetColor,
 *     contained.ExistingPlayer,             # <<<<<<<<<<<<<<
 *     contained.ShortPlayerData,
 *     contained.MoveObject,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ExistingPlayer); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":36
 *     contained.SetColor,
 *     contained.ExistingPlayer,
 *     contained.ShortPlayerData,             # <<<<<<<<<<<<<<
 *     contained.MoveObject,
 *     contained.CreatePlayer,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ShortPlayerData); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":37
 *     contained.ExistingPlayer,
 *     contained.ShortPlayerData,
 *     contained.MoveObject,             # <<<<<<<<<<<<<<
 *     contained.CreatePlayer,
 *     contained.BlockAction,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_13 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__MoveObject); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":38
 *     contained.ShortPlayerData,
 *     contained.MoveObject,
 *     contained.CreatePlayer,             # <<<<<<<<<<<<<<
 *     contained.BlockAction,
 *     contained.BlockLine,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__CreatePlayer); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":39
 *     contained.MoveObject,
 *     contained.CreatePlayer,
 *     contained.BlockAction,             # <<<<<<<<<<<<<<
 *     contained.BlockLine,
 *     contained.StateData,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__BlockAction); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":40
 *     contained.CreatePlayer,
 *     contained.BlockAction,
 *     contained.BlockLine,             # <<<<<<<<<<<<<<
 *     contained.StateData,
 *     contained.KillAction,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_16 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__BlockLine); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":41
 *     contained.BlockAction,
 *     contained.BlockLine,
 *     contained.StateData,             # <<<<<<<<<<<<<<
 *     contained.KillAction,
 *     contained.ChatMessage,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_17 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__StateData); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":42
 *     contained.BlockLine,
 *     contained.StateData,
 *     contained.KillAction,             # <<<<<<<<<<<<<<
 *     contained.ChatMessage,
 *     contained.MapStart,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_18 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__KillAction); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":43
 *     contained.StateData,
 *     contained.KillAction,
 *     contained.ChatMessage,             # <<<<<<<<<<<<<<
 *     contained.MapStart,
 *     contained.MapChunk,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_19 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ChatMessage); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":44
 *     contained.KillAction,
 *     contained.ChatMessage,
 *     contained.MapStart,             # <<<<<<<<<<<<<<
 *     contained.MapChunk,
 *     contained.PlayerLeft,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_20 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__MapStart); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":45
 *     contained.ChatMessage,
 *     contained.MapStart,
 *     contained.MapChunk,             # <<<<<<<<<<<<<<
 *     contained.PlayerLeft,
 *     contained.TerritoryCapture,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_21 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__MapChunk); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":46
 *     contained.MapStart,
 *     contained.MapChunk,
 *     contained.PlayerLeft,             # <<<<<<<<<<<<<<
 *     contained.TerritoryCapture,
 *     contained.ProgressBar,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_22 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__PlayerLeft); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":47
 *     contained.MapChunk,
 *     contained.PlayerLeft,
 *     contained.TerritoryCapture,             # <<<<<<<<<<<<<<
 *     contained.ProgressBar,
 *     contained.IntelCapture,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_23 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__TerritoryCapture); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":48
 *     contained.PlayerLeft,
 *     contained.TerritoryCapture,
 *     contained.ProgressBar,             # <<<<<<<<<<<<<<
 *     contained.IntelCapture,
 *     contained.IntelPickup,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_24 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ProgressBar); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":49
 *     contained.TerritoryCapture,
 *     contained.ProgressBar,
 *     contained.IntelCapture,             # <<<<<<<<<<<<<<
 *     contained.IntelPickup,
 *     contained.IntelDrop,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_25 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__IntelCapture); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":50
 *     contained.ProgressBar,
 *     contained.IntelCapture,
 *     contained.IntelPickup,             # <<<<<<<<<<<<<<
 *     contained.IntelDrop,
 *     contained.Restock,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_26 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__IntelPickup); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":51
 *     contained.IntelCapture,
 *     contained.IntelPickup,
 *     contained.IntelDrop,             # <<<<<<<<<<<<<<
 *     contained.Restock,
 *     contained.FogColor,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_27 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__IntelDrop); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":52
 *     contained.IntelPickup,
 *     contained.IntelDrop,
 *     contained.Restock,             # <<<<<<<<<<<<<<
 *     contained.FogColor,
 *     contained.WeaponReload,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_28 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__Restock); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":53
 *     contained.IntelDrop,
 *     contained.Restock,
 *     contained.FogColor,             # <<<<<<<<<<<<<<
 *     contained.WeaponReload,
 *     contained.ChangeTeam,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_29 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__FogColor); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":54
 *     contained.Restock,
 *     contained.FogColor,
 *     contained.WeaponReload,             # <<<<<<<<<<<<<<
 *     contained.ChangeTeam,
 *     contained.ChangeWeapon
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_30 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__WeaponReload); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":55
 *     contained.FogColor,
 *     contained.WeaponReload,
 *     contained.ChangeTeam,             # <<<<<<<<<<<<<<
 *     contained.ChangeWeapon
 * ]
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_31 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ChangeTeam); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":56
 *     contained.WeaponReload,
 *     contained.ChangeTeam,
 *     contained.ChangeWeapon             # <<<<<<<<<<<<<<
 * ]
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_32 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__ChangeWeapon); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(31); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_2, 12, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_2, 13, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_2, 14, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_2, 15, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_2, 16, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_2, 17, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_2, 18, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_2, 19, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_2, 20, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_2, 21, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_2, 22, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_2, 23, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_2, 24, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_2, 25, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_2, 26, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_2, 27, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_29);
  PyList_SET_ITEM(__pyx_t_2, 28, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_30);
  PyList_SET_ITEM(__pyx_t_2, 29, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_31);
  PyList_SET_ITEM(__pyx_t_2, 30, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_31 = 0;
  __pyx_t_32 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CONTAINED_LIST, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":59
 * ]
 * 
 * CONTAINED_LOADERS = {}             # <<<<<<<<<<<<<<
 * 
 * for item in CONTAINED_LIST:
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CONTAINED_LOADERS, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":61
 * CONTAINED_LOADERS = {}
 * 
 * for item in CONTAINED_LIST:             # <<<<<<<<<<<<<<
 *     CONTAINED_LOADERS[item.id] = item
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__CONTAINED_LIST); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_33 = 0; __pyx_t_32 = __pyx_t_2; __Pyx_INCREF(__pyx_t_32);
  } else {
    __pyx_t_33 = -1; __pyx_t_32 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_32);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_32))) {
      if (__pyx_t_33 >= PyList_GET_SIZE(__pyx_t_32)) break;
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_32, __pyx_t_33); __Pyx_INCREF(__pyx_t_2); __pyx_t_33++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_32))) {
      if (__pyx_t_33 >= PyTuple_GET_SIZE(__pyx_t_32)) break;
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_32, __pyx_t_33); __Pyx_INCREF(__pyx_t_2); __pyx_t_33++;
    } else {
      __pyx_t_2 = PyIter_Next(__pyx_t_32);
      if (!__pyx_t_2) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s__item, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyspades\packet.pyx":62
 * 
 * for item in CONTAINED_LIST:
 *     CONTAINED_LOADERS[item.id] = item             # <<<<<<<<<<<<<<
 * 
 * SERVER_LOADERS = CONTAINED_LOADERS.copy()
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__item); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_31 = __Pyx_GetName(__pyx_m, __pyx_n_s__CONTAINED_LOADERS); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_31);
    __pyx_t_30 = __Pyx_GetName(__pyx_m, __pyx_n_s__item); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_30);
    __pyx_t_29 = PyObject_GetAttr(__pyx_t_30, __pyx_n_s__id); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
    if (PyObject_SetItem(__pyx_t_31, __pyx_t_29, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;

  /* "pyspades\packet.pyx":64
 *     CONTAINED_LOADERS[item.id] = item
 * 
 * SERVER_LOADERS = CONTAINED_LOADERS.copy()             # <<<<<<<<<<<<<<
 * for item in (contained.SetHP,):
 *     SERVER_LOADERS[item.id] = item
 */
  __pyx_t_32 = __Pyx_GetName(__pyx_m, __pyx_n_s__CONTAINED_LOADERS); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_32, __pyx_n_s__copy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__SERVER_LOADERS, __pyx_t_32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;

  /* "pyspades\packet.pyx":65
 * 
 * SERVER_LOADERS = CONTAINED_LOADERS.copy()
 * for item in (contained.SetHP,):             # <<<<<<<<<<<<<<
 *     SERVER_LOADERS[item.id] = item
 * 
 */
  __pyx_t_32 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_32, __pyx_n_s__SetHP); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = PyTuple_New(1); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_32));
  PyTuple_SET_ITEM(__pyx_t_32, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_33 = 0; __pyx_t_2 = ((PyObject *)__pyx_t_32); __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_32)); __pyx_t_32 = 0;
  for (;;) {
    if (__pyx_t_33 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    __pyx_t_32 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_33); __Pyx_INCREF(__pyx_t_32); __pyx_t_33++;
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s__item, __pyx_t_32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;

    /* "pyspades\packet.pyx":66
 * SERVER_LOADERS = CONTAINED_LOADERS.copy()
 * for item in (contained.SetHP,):
 *     SERVER_LOADERS[item.id] = item             # <<<<<<<<<<<<<<
 * 
 * CLIENT_LOADERS = CONTAINED_LOADERS.copy()
 */
    __pyx_t_32 = __Pyx_GetName(__pyx_m, __pyx_n_s__item); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_32);
    __pyx_t_29 = __Pyx_GetName(__pyx_m, __pyx_n_s__SERVER_LOADERS); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_29);
    __pyx_t_31 = __Pyx_GetName(__pyx_m, __pyx_n_s__item); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_31);
    __pyx_t_30 = PyObject_GetAttr(__pyx_t_31, __pyx_n_s__id); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_30);
    __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
    if (PyObject_SetItem(__pyx_t_29, __pyx_t_30, __pyx_t_32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
    __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":68
 *     SERVER_LOADERS[item.id] = item
 * 
 * CLIENT_LOADERS = CONTAINED_LOADERS.copy()             # <<<<<<<<<<<<<<
 * for item in (contained.HitPacket,):
 *     CLIENT_LOADERS[item.id] = item
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__CONTAINED_LOADERS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_32 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__copy); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_32, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CLIENT_LOADERS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyspades\packet.pyx":69
 * 
 * CLIENT_LOADERS = CONTAINED_LOADERS.copy()
 * for item in (contained.HitPacket,):             # <<<<<<<<<<<<<<
 *     CLIENT_LOADERS[item.id] = item
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__contained); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_32 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__HitPacket); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  __pyx_t_32 = 0;
  __pyx_t_33 = 0; __pyx_t_32 = ((PyObject *)__pyx_t_2); __Pyx_INCREF(__pyx_t_32);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_33 >= PyTuple_GET_SIZE(__pyx_t_32)) break;
    __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_32, __pyx_t_33); __Pyx_INCREF(__pyx_t_2); __pyx_t_33++;
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s__item, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyspades\packet.pyx":70
 * CLIENT_LOADERS = CONTAINED_LOADERS.copy()
 * for item in (contained.HitPacket,):
 *     CLIENT_LOADERS[item.id] = item             # <<<<<<<<<<<<<<
 * 
 * def load_server_packet(data):
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__item); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_30 = __Pyx_GetName(__pyx_m, __pyx_n_s__CLIENT_LOADERS); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_30);
    __pyx_t_29 = __Pyx_GetName(__pyx_m, __pyx_n_s__item); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_29);
    __pyx_t_31 = PyObject_GetAttr(__pyx_t_29, __pyx_n_s__id); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_31);
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    if (PyObject_SetItem(__pyx_t_30, __pyx_t_31, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
    __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;

  /* "pyspades\packet.pyx":72
 *     CLIENT_LOADERS[item.id] = item
 * 
 * def load_server_packet(data):             # <<<<<<<<<<<<<<
 *     return load_contained_packet(data, SERVER_LOADERS)
 * 
 */
  __pyx_t_32 = PyCFunction_NewEx(&__pyx_mdef_8pyspades_6packet_load_server_packet, NULL, __pyx_n_s_3); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__load_server_packet, __pyx_t_32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;

  /* "pyspades\packet.pyx":75
 *     return load_contained_packet(data, SERVER_LOADERS)
 * 
 * def load_client_packet(data):             # <<<<<<<<<<<<<<
 *     return load_contained_packet(data, CLIENT_LOADERS)
 * 
 */
  __pyx_t_32 = PyCFunction_NewEx(&__pyx_mdef_8pyspades_6packet_1load_client_packet, NULL, __pyx_n_s_3); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__load_client_packet, __pyx_t_32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;

  /* "pyspades\packet.pyx":1
 * # Copyright (c) Mathias Kaerlev 2011-2012.             # <<<<<<<<<<<<<<
 * 
 * # This file is part of pyspades.
 */
  __pyx_t_32 = PyDict_New(); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_32));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_32)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_32)); __pyx_t_32 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pyspades.packet");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyspades.packet");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}


static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    long size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && ((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        PyErr_Warn(NULL, warning);
        #else
        PyErr_WarnEx(NULL, warning, 0);
        #endif
    }
    else if (((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyMapping_GetItemString(dict, (char *)"__pyx_vtable__");
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
