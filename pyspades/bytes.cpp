/* Generated by Cython 0.14.1 on Thu Mar 07 14:34:44 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__bytes
#include "bytes_c.cpp"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "bytes.pyx",
};

/* Type declarations */

/* "bytes.pxd":13
 * 
 *     cdef char * check_available(self, int size) except NULL
 *     cpdef read(self, int bytes = ?)             # <<<<<<<<<<<<<<
 *     cpdef int readByte(self, bint unsigned = ?) except INT_ERROR
 *     cpdef int readShort(self, bint unsigned = ?, bint big_endian = ?) \
 */

struct __pyx_opt_args_5bytes_10ByteReader_read {
  int __pyx_n;
  int bytes;
};

/* "bytes.pxd":14
 *     cdef char * check_available(self, int size) except NULL
 *     cpdef read(self, int bytes = ?)
 *     cpdef int readByte(self, bint unsigned = ?) except INT_ERROR             # <<<<<<<<<<<<<<
 *     cpdef int readShort(self, bint unsigned = ?, bint big_endian = ?) \
 *                         except INT_ERROR
 */

struct __pyx_opt_args_5bytes_10ByteReader_readByte {
  int __pyx_n;
  int __pyx_unsigned;
};

/* "bytes.pxd":15
 *     cpdef read(self, int bytes = ?)
 *     cpdef int readByte(self, bint unsigned = ?) except INT_ERROR
 *     cpdef int readShort(self, bint unsigned = ?, bint big_endian = ?) \             # <<<<<<<<<<<<<<
 *                         except INT_ERROR
 *     cpdef long long readInt(self, bint unsigned = ?, bint big_endian = ?) \
 */

struct __pyx_opt_args_5bytes_10ByteReader_readShort {
  int __pyx_n;
  int __pyx_unsigned;
  int big_endian;
};

/* "bytes.pxd":17
 *     cpdef int readShort(self, bint unsigned = ?, bint big_endian = ?) \
 *                         except INT_ERROR
 *     cpdef long long readInt(self, bint unsigned = ?, bint big_endian = ?) \             # <<<<<<<<<<<<<<
 *                             except LONG_LONG_ERROR
 *     cpdef float readFloat(self, bint big_endian = ?) except FLOAT_ERROR
 */

struct __pyx_opt_args_5bytes_10ByteReader_readInt {
  int __pyx_n;
  int __pyx_unsigned;
  int big_endian;
};

/* "bytes.pxd":19
 *     cpdef long long readInt(self, bint unsigned = ?, bint big_endian = ?) \
 *                             except LONG_LONG_ERROR
 *     cpdef float readFloat(self, bint big_endian = ?) except FLOAT_ERROR             # <<<<<<<<<<<<<<
 *     cpdef readString(self, int size = ?)
 *     cpdef ByteReader readReader(self, int size = ?)
 */

struct __pyx_opt_args_5bytes_10ByteReader_readFloat {
  int __pyx_n;
  int big_endian;
};

/* "bytes.pxd":20
 *                             except LONG_LONG_ERROR
 *     cpdef float readFloat(self, bint big_endian = ?) except FLOAT_ERROR
 *     cpdef readString(self, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef ByteReader readReader(self, int size = ?)
 *     cpdef int dataLeft(self)
 */

struct __pyx_opt_args_5bytes_10ByteReader_readString {
  int __pyx_n;
  int size;
};

/* "bytes.pxd":21
 *     cpdef float readFloat(self, bint big_endian = ?) except FLOAT_ERROR
 *     cpdef readString(self, int size = ?)
 *     cpdef ByteReader readReader(self, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef int dataLeft(self)
 *     cdef void _skip(self, int bytes)
 */

struct __pyx_opt_args_5bytes_10ByteReader_readReader {
  int __pyx_n;
  int size;
};

/* "bytes.pxd":34
 *     cdef void writeSize(self, char * data, int size)
 *     cpdef write(self, data)
 *     cpdef writeByte(self, int value, bint unsigned = ?)             # <<<<<<<<<<<<<<
 *     cpdef writeShort(self, int value, bint unsigned = ?,
 *                      bint big_endian = ?)
 */

struct __pyx_opt_args_5bytes_10ByteWriter_writeByte {
  int __pyx_n;
  int __pyx_unsigned;
};

/* "bytes.pxd":35
 *     cpdef write(self, data)
 *     cpdef writeByte(self, int value, bint unsigned = ?)
 *     cpdef writeShort(self, int value, bint unsigned = ?,             # <<<<<<<<<<<<<<
 *                      bint big_endian = ?)
 *     cpdef writeInt(self, long long value, bint unsigned = ?,
 */

struct __pyx_opt_args_5bytes_10ByteWriter_writeShort {
  int __pyx_n;
  int __pyx_unsigned;
  int big_endian;
};

/* "bytes.pxd":37
 *     cpdef writeShort(self, int value, bint unsigned = ?,
 *                      bint big_endian = ?)
 *     cpdef writeInt(self, long long value, bint unsigned = ?,             # <<<<<<<<<<<<<<
 *                    bint big_endian = ?)
 *     cpdef writeFloat(self, float value, bint big_endian = ?)
 */

struct __pyx_opt_args_5bytes_10ByteWriter_writeInt {
  int __pyx_n;
  int __pyx_unsigned;
  int big_endian;
};

/* "bytes.pxd":39
 *     cpdef writeInt(self, long long value, bint unsigned = ?,
 *                    bint big_endian = ?)
 *     cpdef writeFloat(self, float value, bint big_endian = ?)             # <<<<<<<<<<<<<<
 *     cpdef writeStringSize(self, char * value, int size)
 *     cpdef writeString(self, value, int size = ?)
 */

struct __pyx_opt_args_5bytes_10ByteWriter_writeFloat {
  int __pyx_n;
  int big_endian;
};

/* "bytes.pxd":41
 *     cpdef writeFloat(self, float value, bint big_endian = ?)
 *     cpdef writeStringSize(self, char * value, int size)
 *     cpdef writeString(self, value, int size = ?)             # <<<<<<<<<<<<<<
 *     cpdef pad(self, int bytes)
 *     cpdef rewind(self, int bytes)
 */

struct __pyx_opt_args_5bytes_10ByteWriter_writeString {
  int __pyx_n;
  int size;
};

/* "bytes.pxd":29
 *     cpdef size_t tell(self)
 * 
 * cdef class ByteWriter:             # <<<<<<<<<<<<<<
 *     cdef void * stream
 * 
 */

struct __pyx_obj_5bytes_ByteWriter {
  PyObject_HEAD
  struct __pyx_vtabstruct_5bytes_ByteWriter *__pyx_vtab;
  void *stream;
};

/* "bytes.pxd":5
 * DEF FLOAT_ERROR = float('nan')
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     cdef char * data
 *     cdef char * pos
 */

struct __pyx_obj_5bytes_ByteReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5bytes_ByteReader *__pyx_vtab;
  char *data;
  char *pos;
  char *end;
  int start;
  int size;
  PyObject *input;
};


/* "bytes.pyx":55
 * DEF FLOAT_ERROR = float('nan')
 * 
 * cdef class ByteReader:             # <<<<<<<<<<<<<<
 *     def __init__(self, input, int start = 0, int size = -1):
 *         self.input = input
 */

struct __pyx_vtabstruct_5bytes_ByteReader {
  char *(*check_available)(struct __pyx_obj_5bytes_ByteReader *, int);
  PyObject *(*read)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_read *__pyx_optional_args);
  int (*readByte)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readByte *__pyx_optional_args);
  int (*readShort)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readShort *__pyx_optional_args);
  PY_LONG_LONG (*readInt)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readInt *__pyx_optional_args);
  float (*readFloat)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readFloat *__pyx_optional_args);
  PyObject *(*readString)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readString *__pyx_optional_args);
  struct __pyx_obj_5bytes_ByteReader *(*readReader)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readReader *__pyx_optional_args);
  int (*dataLeft)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch);
  void (*_skip)(struct __pyx_obj_5bytes_ByteReader *, int);
  PyObject *(*skipBytes)(struct __pyx_obj_5bytes_ByteReader *, int, int __pyx_skip_dispatch);
  PyObject *(*rewind)(struct __pyx_obj_5bytes_ByteReader *, int, int __pyx_skip_dispatch);
  PyObject *(*seek)(struct __pyx_obj_5bytes_ByteReader *, size_t, int __pyx_skip_dispatch);
  size_t (*tell)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5bytes_ByteReader *__pyx_vtabptr_5bytes_ByteReader;


/* "bytes.pyx":160
 *         return self.data[:self.size]
 * 
 * cdef class ByteWriter:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self.stream = create_stream()
 */

struct __pyx_vtabstruct_5bytes_ByteWriter {
  void (*writeSize)(struct __pyx_obj_5bytes_ByteWriter *, char *, int);
  PyObject *(*write)(struct __pyx_obj_5bytes_ByteWriter *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*writeByte)(struct __pyx_obj_5bytes_ByteWriter *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeByte *__pyx_optional_args);
  PyObject *(*writeShort)(struct __pyx_obj_5bytes_ByteWriter *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeShort *__pyx_optional_args);
  PyObject *(*writeInt)(struct __pyx_obj_5bytes_ByteWriter *, PY_LONG_LONG, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeInt *__pyx_optional_args);
  PyObject *(*writeFloat)(struct __pyx_obj_5bytes_ByteWriter *, float, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeFloat *__pyx_optional_args);
  PyObject *(*writeStringSize)(struct __pyx_obj_5bytes_ByteWriter *, char *, int, int __pyx_skip_dispatch);
  PyObject *(*writeString)(struct __pyx_obj_5bytes_ByteWriter *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeString *__pyx_optional_args);
  PyObject *(*pad)(struct __pyx_obj_5bytes_ByteWriter *, int, int __pyx_skip_dispatch);
  PyObject *(*rewind)(struct __pyx_obj_5bytes_ByteWriter *, int, int __pyx_skip_dispatch);
  size_t (*tell)(struct __pyx_obj_5bytes_ByteWriter *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5bytes_ByteWriter *__pyx_vtabptr_5bytes_ByteWriter;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from bytes */

static PyTypeObject *__pyx_ptype_5bytes_ByteReader = 0;
static PyTypeObject *__pyx_ptype_5bytes_ByteWriter = 0;
#define __Pyx_MODULE_NAME "bytes"
static int __pyx_module_is_main_bytes = 0;

/* Implementation of bytes */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_range;
static char __pyx_k_1[] = "not enough data";
static char __pyx_k_3[] = "\nReads/writes bytes\n";
static char __pyx_k__end[] = "end";
static char __pyx_k__pad[] = "pad";
static char __pyx_k__pos[] = "pos";
static char __pyx_k__data[] = "data";
static char __pyx_k__read[] = "read";
static char __pyx_k__seek[] = "seek";
static char __pyx_k__size[] = "size";
static char __pyx_k__tell[] = "tell";
static char __pyx_k___skip[] = "_skip";
static char __pyx_k__bytes[] = "bytes";
static char __pyx_k__input[] = "input";
static char __pyx_k__range[] = "range";
static char __pyx_k__start[] = "start";
static char __pyx_k__value[] = "value";
static char __pyx_k__write[] = "write";
static char __pyx_k__rewind[] = "rewind";
static char __pyx_k__stream[] = "stream";
static char __pyx_k__readInt[] = "readInt";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__dataLeft[] = "dataLeft";
static char __pyx_k__readByte[] = "readByte";
static char __pyx_k__unsigned[] = "unsigned";
static char __pyx_k__writeInt[] = "writeInt";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__readFloat[] = "readFloat";
static char __pyx_k__readShort[] = "readShort";
static char __pyx_k__skipBytes[] = "skipBytes";
static char __pyx_k__writeByte[] = "writeByte";
static char __pyx_k__NoDataLeft[] = "NoDataLeft";
static char __pyx_k__big_endian[] = "big_endian";
static char __pyx_k__readReader[] = "readReader";
static char __pyx_k__readString[] = "readString";
static char __pyx_k__writeFloat[] = "writeFloat";
static char __pyx_k__writeShort[] = "writeShort";
static char __pyx_k__writeString[] = "writeString";
static char __pyx_k__check_available[] = "check_available";
static char __pyx_k__writeStringSize[] = "writeStringSize";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__NoDataLeft;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___skip;
static PyObject *__pyx_n_s__big_endian;
static PyObject *__pyx_n_s__bytes;
static PyObject *__pyx_n_s__check_available;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__dataLeft;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__input;
static PyObject *__pyx_n_s__pad;
static PyObject *__pyx_n_s__pos;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__read;
static PyObject *__pyx_n_s__readByte;
static PyObject *__pyx_n_s__readFloat;
static PyObject *__pyx_n_s__readInt;
static PyObject *__pyx_n_s__readReader;
static PyObject *__pyx_n_s__readShort;
static PyObject *__pyx_n_s__readString;
static PyObject *__pyx_n_s__rewind;
static PyObject *__pyx_n_s__seek;
static PyObject *__pyx_n_s__size;
static PyObject *__pyx_n_s__skipBytes;
static PyObject *__pyx_n_s__start;
static PyObject *__pyx_n_s__stream;
static PyObject *__pyx_n_s__tell;
static PyObject *__pyx_n_s__unsigned;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__write;
static PyObject *__pyx_n_s__writeByte;
static PyObject *__pyx_n_s__writeFloat;
static PyObject *__pyx_n_s__writeInt;
static PyObject *__pyx_n_s__writeShort;
static PyObject *__pyx_n_s__writeString;
static PyObject *__pyx_n_s__writeStringSize;
static PyObject *__pyx_k_tuple_2;

/* "bytes.pyx":56
 * 
 * cdef class ByteReader:
 *     def __init__(self, input, int start = 0, int size = -1):             # <<<<<<<<<<<<<<
 *         self.input = input
 *         self.data = input
 */

static int __pyx_pf_5bytes_10ByteReader___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5bytes_10ByteReader___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input = 0;
  int __pyx_v_start;
  int __pyx_v_size;
  int __pyx_r;
  char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__input,&__pyx_n_s__start,&__pyx_n_s__size,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__input);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__size);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_input = values[0];
    if (values[1]) {
      __pyx_v_start = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_start = ((int)0);
    }
    if (values[2]) {
      __pyx_v_size = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_size = ((int)-1);
    }
  } else {
    __pyx_v_start = ((int)0);
    __pyx_v_size = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_size = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_start = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_input = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.__init__");
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "bytes.pyx":57
 * cdef class ByteReader:
 *     def __init__(self, input, int start = 0, int size = -1):
 *         self.input = input             # <<<<<<<<<<<<<<
 *         self.data = input
 *         self.data += start
 */
  __Pyx_INCREF(__pyx_v_input);
  __Pyx_GIVEREF(__pyx_v_input);
  __Pyx_GOTREF(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->input);
  __Pyx_DECREF(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->input);
  ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->input = __pyx_v_input;

  /* "bytes.pyx":58
 *     def __init__(self, input, int start = 0, int size = -1):
 *         self.input = input
 *         self.data = input             # <<<<<<<<<<<<<<
 *         self.data += start
 *         self.pos = self.data
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_input); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->data = __pyx_t_1;

  /* "bytes.pyx":59
 *         self.input = input
 *         self.data = input
 *         self.data += start             # <<<<<<<<<<<<<<
 *         self.pos = self.data
 *         if size == -1:
 */
  ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->data = (((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->data + __pyx_v_start);

  /* "bytes.pyx":60
 *         self.data = input
 *         self.data += start
 *         self.pos = self.data             # <<<<<<<<<<<<<<
 *         if size == -1:
 *             size = len(input) - start
 */
  ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->pos = ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->data;

  /* "bytes.pyx":61
 *         self.data += start
 *         self.pos = self.data
 *         if size == -1:             # <<<<<<<<<<<<<<
 *             size = len(input) - start
 *         self.size = size
 */
  __pyx_t_2 = (__pyx_v_size == -1);
  if (__pyx_t_2) {

    /* "bytes.pyx":62
 *         self.pos = self.data
 *         if size == -1:
 *             size = len(input) - start             # <<<<<<<<<<<<<<
 *         self.size = size
 *         self.end = self.data + size
 */
    __pyx_t_3 = __pyx_v_input;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_size = (__pyx_t_4 - __pyx_v_start);
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "bytes.pyx":63
 *         if size == -1:
 *             size = len(input) - start
 *         self.size = size             # <<<<<<<<<<<<<<
 *         self.end = self.data + size
 *         self.start = start
 */
  ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->size = __pyx_v_size;

  /* "bytes.pyx":64
 *             size = len(input) - start
 *         self.size = size
 *         self.end = self.data + size             # <<<<<<<<<<<<<<
 *         self.start = start
 * 
 */
  ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->end = (((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->data + __pyx_v_size);

  /* "bytes.pyx":65
 *         self.size = size
 *         self.end = self.data + size
 *         self.start = start             # <<<<<<<<<<<<<<
 * 
 *     cdef char * check_available(self, int size) except NULL:
 */
  ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->start = __pyx_v_start;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":67
 *         self.start = start
 * 
 *     cdef char * check_available(self, int size) except NULL:             # <<<<<<<<<<<<<<
 *         cdef char * data = self.pos
 *         if data + size > self.end:
 */

static  char *__pyx_f_5bytes_10ByteReader_check_available(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_v_size) {
  char *__pyx_v_data;
  char *__pyx_r;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("check_available");

  /* "bytes.pyx":68
 * 
 *     cdef char * check_available(self, int size) except NULL:
 *         cdef char * data = self.pos             # <<<<<<<<<<<<<<
 *         if data + size > self.end:
 *             raise NoDataLeft('not enough data')
 */
  __pyx_v_data = __pyx_v_self->pos;

  /* "bytes.pyx":69
 *     cdef char * check_available(self, int size) except NULL:
 *         cdef char * data = self.pos
 *         if data + size > self.end:             # <<<<<<<<<<<<<<
 *             raise NoDataLeft('not enough data')
 *         self.pos += size
 */
  __pyx_t_1 = ((__pyx_v_data + __pyx_v_size) > __pyx_v_self->end);
  if (__pyx_t_1) {

    /* "bytes.pyx":70
 *         cdef char * data = self.pos
 *         if data + size > self.end:
 *             raise NoDataLeft('not enough data')             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         return data
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__NoDataLeft); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "bytes.pyx":71
 *         if data + size > self.end:
 *             raise NoDataLeft('not enough data')
 *         self.pos += size             # <<<<<<<<<<<<<<
 *         return data
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_size);

  /* "bytes.pyx":72
 *             raise NoDataLeft('not enough data')
 *         self.pos += size
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     cpdef read(self, int bytes = -1):
 */
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.check_available");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":74
 *         return data
 * 
 *     cpdef read(self, int bytes = -1):             # <<<<<<<<<<<<<<
 *         cdef int left = self.dataLeft()
 *         if bytes == -1 or bytes > left:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_1read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteReader_read(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_read *__pyx_optional_args) {
  int __pyx_v_bytes = ((int)-1);
  int __pyx_v_left;
  PyObject *__pyx_v_ret;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("read");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_bytes = __pyx_optional_args->bytes;
    }
  }
  __pyx_v_ret = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__read); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_1read)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_bytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":75
 * 
 *     cpdef read(self, int bytes = -1):
 *         cdef int left = self.dataLeft()             # <<<<<<<<<<<<<<
 *         if bytes == -1 or bytes > left:
 *             bytes = left
 */
  __pyx_v_left = ((struct __pyx_vtabstruct_5bytes_ByteReader *)__pyx_v_self->__pyx_vtab)->dataLeft(__pyx_v_self, 0);

  /* "bytes.pyx":76
 *     cpdef read(self, int bytes = -1):
 *         cdef int left = self.dataLeft()
 *         if bytes == -1 or bytes > left:             # <<<<<<<<<<<<<<
 *             bytes = left
 *         ret = self.pos[:bytes]
 */
  __pyx_t_4 = (__pyx_v_bytes == -1);
  if (!__pyx_t_4) {
    __pyx_t_5 = (__pyx_v_bytes > __pyx_v_left);
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "bytes.pyx":77
 *         cdef int left = self.dataLeft()
 *         if bytes == -1 or bytes > left:
 *             bytes = left             # <<<<<<<<<<<<<<
 *         ret = self.pos[:bytes]
 *         self.pos += bytes
 */
    __pyx_v_bytes = __pyx_v_left;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "bytes.pyx":78
 *         if bytes == -1 or bytes > left:
 *             bytes = left
 *         ret = self.pos[:bytes]             # <<<<<<<<<<<<<<
 *         self.pos += bytes
 *         return ret
 */
  __pyx_t_1 = PyBytes_FromStringAndSize(__pyx_v_self->pos + 0, __pyx_v_bytes - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_ret));
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "bytes.pyx":79
 *             bytes = left
 *         ret = self.pos[:bytes]
 *         self.pos += bytes             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_bytes);

  /* "bytes.pyx":80
 *         ret = self.pos[:bytes]
 *         self.pos += bytes
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef int readByte(self, bint unsigned = False) except INT_ERROR:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.read");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":74
 *         return data
 * 
 *     cpdef read(self, int bytes = -1):             # <<<<<<<<<<<<<<
 *         cdef int left = self.dataLeft()
 *         if bytes == -1 or bytes > left:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_1read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_1read(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_bytes;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5bytes_10ByteReader_read __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__bytes,0};
  __Pyx_RefNannySetupContext("read");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bytes);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "read") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_bytes = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_bytes == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_bytes = ((int)-1);
    }
  } else {
    __pyx_v_bytes = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_bytes = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_bytes == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.read");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.bytes = __pyx_v_bytes;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->read(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.read");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":82
 *         return ret
 * 
 *     cpdef int readByte(self, bint unsigned = False) except INT_ERROR:             # <<<<<<<<<<<<<<
 *         cdef char * pos = self.check_available(1)
 *         if unsigned:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_2readByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  int __pyx_f_5bytes_10ByteReader_readByte(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readByte *__pyx_optional_args) {
  int __pyx_v_unsigned = ((int)0);
  char *__pyx_v_pos;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  __Pyx_RefNannySetupContext("readByte");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_unsigned = __pyx_optional_args->__pyx_unsigned;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readByte); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_2readByte)) {
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_unsigned); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":83
 * 
 *     cpdef int readByte(self, bint unsigned = False) except INT_ERROR:
 *         cdef char * pos = self.check_available(1)             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             return read_ubyte(pos)
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)__pyx_v_self->__pyx_vtab)->check_available(__pyx_v_self, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_pos = __pyx_t_5;

  /* "bytes.pyx":84
 *     cpdef int readByte(self, bint unsigned = False) except INT_ERROR:
 *         cdef char * pos = self.check_available(1)
 *         if unsigned:             # <<<<<<<<<<<<<<
 *             return read_ubyte(pos)
 *         else:
 */
  if (__pyx_v_unsigned) {

    /* "bytes.pyx":85
 *         cdef char * pos = self.check_available(1)
 *         if unsigned:
 *             return read_ubyte(pos)             # <<<<<<<<<<<<<<
 *         else:
 *             return read_byte(pos)
 */
    __pyx_r = read_ubyte(__pyx_v_pos);
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "bytes.pyx":87
 *             return read_ubyte(pos)
 *         else:
 *             return read_byte(pos)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int readShort(self, bint unsigned = False, bint big_endian = True) \
 */
    __pyx_r = read_byte(__pyx_v_pos);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.readByte");
  __pyx_r = -2147483648LL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":82
 *         return ret
 * 
 *     cpdef int readByte(self, bint unsigned = False) except INT_ERROR:             # <<<<<<<<<<<<<<
 *         cdef char * pos = self.check_available(1)
 *         if unsigned:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_2readByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_2readByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_unsigned;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  struct __pyx_opt_args_5bytes_10ByteReader_readByte __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__unsigned,0};
  __Pyx_RefNannySetupContext("readByte");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unsigned);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readByte") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_unsigned = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_unsigned = ((int)0);
    }
  } else {
    __pyx_v_unsigned = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_unsigned = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readByte", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.readByte");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.__pyx_unsigned = __pyx_v_unsigned;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->readByte(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1, &__pyx_t_2); if (unlikely(__pyx_t_1 == -2147483648LL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.readByte");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":89
 *             return read_byte(pos)
 * 
 *     cpdef int readShort(self, bint unsigned = False, bint big_endian = True) \             # <<<<<<<<<<<<<<
 *                         except INT_ERROR:
 *         cdef char * pos = self.check_available(2)
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_3readShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  int __pyx_f_5bytes_10ByteReader_readShort(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readShort *__pyx_optional_args) {
  int __pyx_v_unsigned = ((int)0);
  int __pyx_v_big_endian = ((int)1);
  char *__pyx_v_pos;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("readShort");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_unsigned = __pyx_optional_args->__pyx_unsigned;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_big_endian = __pyx_optional_args->big_endian;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readShort); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_3readShort)) {
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_unsigned); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_big_endian); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":91
 *     cpdef int readShort(self, bint unsigned = False, bint big_endian = True) \
 *                         except INT_ERROR:
 *         cdef char * pos = self.check_available(2)             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             return read_ushort(pos, big_endian)
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)__pyx_v_self->__pyx_vtab)->check_available(__pyx_v_self, 2); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_pos = __pyx_t_6;

  /* "bytes.pyx":92
 *                         except INT_ERROR:
 *         cdef char * pos = self.check_available(2)
 *         if unsigned:             # <<<<<<<<<<<<<<
 *             return read_ushort(pos, big_endian)
 *         else:
 */
  if (__pyx_v_unsigned) {

    /* "bytes.pyx":93
 *         cdef char * pos = self.check_available(2)
 *         if unsigned:
 *             return read_ushort(pos, big_endian)             # <<<<<<<<<<<<<<
 *         else:
 *             return read_short(pos, big_endian)
 */
    __pyx_r = read_ushort(__pyx_v_pos, __pyx_v_big_endian);
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "bytes.pyx":95
 *             return read_ushort(pos, big_endian)
 *         else:
 *             return read_short(pos, big_endian)             # <<<<<<<<<<<<<<
 * 
 *     cpdef long long readInt(self, bint unsigned = False,
 */
    __pyx_r = read_short(__pyx_v_pos, __pyx_v_big_endian);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bytes.ByteReader.readShort");
  __pyx_r = -2147483648LL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":89
 *             return read_byte(pos)
 * 
 *     cpdef int readShort(self, bint unsigned = False, bint big_endian = True) \             # <<<<<<<<<<<<<<
 *                         except INT_ERROR:
 *         cdef char * pos = self.check_available(2)
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_3readShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_3readShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_unsigned;
  int __pyx_v_big_endian;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  struct __pyx_opt_args_5bytes_10ByteReader_readShort __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__unsigned,&__pyx_n_s__big_endian,0};
  __Pyx_RefNannySetupContext("readShort");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unsigned);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__big_endian);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readShort") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_unsigned = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_unsigned = ((int)0);
    }
    if (values[1]) {
      __pyx_v_big_endian = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_big_endian = ((int)1);
    }
  } else {
    __pyx_v_unsigned = ((int)0);
    __pyx_v_big_endian = ((int)1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_big_endian = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_unsigned = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readShort", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.readShort");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.__pyx_unsigned = __pyx_v_unsigned;
  __pyx_t_2.big_endian = __pyx_v_big_endian;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->readShort(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1, &__pyx_t_2); if (unlikely(__pyx_t_1 == -2147483648LL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.readShort");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":97
 *             return read_short(pos, big_endian)
 * 
 *     cpdef long long readInt(self, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                             bint big_endian = True) except LONG_LONG_ERROR:
 *         cdef char * pos = self.check_available(4)
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_4readInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PY_LONG_LONG __pyx_f_5bytes_10ByteReader_readInt(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readInt *__pyx_optional_args) {
  int __pyx_v_unsigned = ((int)0);

  /* "bytes.pyx":98
 * 
 *     cpdef long long readInt(self, bint unsigned = False,
 *                             bint big_endian = True) except LONG_LONG_ERROR:             # <<<<<<<<<<<<<<
 *         cdef char * pos = self.check_available(4)
 *         if unsigned:
 */
  int __pyx_v_big_endian = ((int)1);
  char *__pyx_v_pos;
  PY_LONG_LONG __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PY_LONG_LONG __pyx_t_5;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("readInt");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_unsigned = __pyx_optional_args->__pyx_unsigned;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_big_endian = __pyx_optional_args->big_endian;
      }
    }
  }

  /* "bytes.pyx":97
 *             return read_short(pos, big_endian)
 * 
 *     cpdef long long readInt(self, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                             bint big_endian = True) except LONG_LONG_ERROR:
 *         cdef char * pos = self.check_available(4)
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readInt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_4readInt)) {
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_unsigned); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_big_endian); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_AsLongLong(__pyx_t_3); if (unlikely((__pyx_t_5 == (PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":99
 *     cpdef long long readInt(self, bint unsigned = False,
 *                             bint big_endian = True) except LONG_LONG_ERROR:
 *         cdef char * pos = self.check_available(4)             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             return read_uint(pos, big_endian)
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)__pyx_v_self->__pyx_vtab)->check_available(__pyx_v_self, 4); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_pos = __pyx_t_6;

  /* "bytes.pyx":100
 *                             bint big_endian = True) except LONG_LONG_ERROR:
 *         cdef char * pos = self.check_available(4)
 *         if unsigned:             # <<<<<<<<<<<<<<
 *             return read_uint(pos, big_endian)
 *         else:
 */
  if (__pyx_v_unsigned) {

    /* "bytes.pyx":101
 *         cdef char * pos = self.check_available(4)
 *         if unsigned:
 *             return read_uint(pos, big_endian)             # <<<<<<<<<<<<<<
 *         else:
 *             return read_int(pos, big_endian)
 */
    __pyx_r = read_uint(__pyx_v_pos, __pyx_v_big_endian);
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "bytes.pyx":103
 *             return read_uint(pos, big_endian)
 *         else:
 *             return read_int(pos, big_endian)             # <<<<<<<<<<<<<<
 * 
 *     cpdef float readFloat(self, bint big_endian = True) except? FLOAT_ERROR:
 */
    __pyx_r = read_int(__pyx_v_pos, __pyx_v_big_endian);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bytes.ByteReader.readInt");
  __pyx_r = -9223372036854775808LL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":97
 *             return read_short(pos, big_endian)
 * 
 *     cpdef long long readInt(self, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                             bint big_endian = True) except LONG_LONG_ERROR:
 *         cdef char * pos = self.check_available(4)
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_4readInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_4readInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_unsigned;
  int __pyx_v_big_endian;
  PyObject *__pyx_r = NULL;
  PY_LONG_LONG __pyx_t_1;
  struct __pyx_opt_args_5bytes_10ByteReader_readInt __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__unsigned,&__pyx_n_s__big_endian,0};
  __Pyx_RefNannySetupContext("readInt");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unsigned);
        if (value) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__big_endian);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readInt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_unsigned = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_unsigned = ((int)0);
    }
    if (values[1]) {
      __pyx_v_big_endian = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "bytes.pyx":98
 * 
 *     cpdef long long readInt(self, bint unsigned = False,
 *                             bint big_endian = True) except LONG_LONG_ERROR:             # <<<<<<<<<<<<<<
 *         cdef char * pos = self.check_available(4)
 *         if unsigned:
 */
      __pyx_v_big_endian = ((int)1);
    }
  } else {

    /* "bytes.pyx":97
 *             return read_short(pos, big_endian)
 * 
 *     cpdef long long readInt(self, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                             bint big_endian = True) except LONG_LONG_ERROR:
 *         cdef char * pos = self.check_available(4)
 */
    __pyx_v_unsigned = ((int)0);

    /* "bytes.pyx":98
 * 
 *     cpdef long long readInt(self, bint unsigned = False,
 *                             bint big_endian = True) except LONG_LONG_ERROR:             # <<<<<<<<<<<<<<
 *         cdef char * pos = self.check_available(4)
 *         if unsigned:
 */
    __pyx_v_big_endian = ((int)1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_big_endian = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_unsigned = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readInt", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.readInt");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "bytes.pyx":97
 *             return read_short(pos, big_endian)
 * 
 *     cpdef long long readInt(self, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                             bint big_endian = True) except LONG_LONG_ERROR:
 *         cdef char * pos = self.check_available(4)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.__pyx_unsigned = __pyx_v_unsigned;
  __pyx_t_2.big_endian = __pyx_v_big_endian;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->readInt(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1, &__pyx_t_2); if (unlikely(__pyx_t_1 == -9223372036854775808LL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyLong_FromLongLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.readInt");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":105
 *             return read_int(pos, big_endian)
 * 
 *     cpdef float readFloat(self, bint big_endian = True) except? FLOAT_ERROR:             # <<<<<<<<<<<<<<
 *         cdef char * pos = self.check_available(4)
 *         return read_float(pos, big_endian)
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_5readFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  float __pyx_f_5bytes_10ByteReader_readFloat(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readFloat *__pyx_optional_args) {
  int __pyx_v_big_endian = ((int)1);
  char *__pyx_v_pos;
  float __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  char *__pyx_t_5;
  __Pyx_RefNannySetupContext("readFloat");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_big_endian = __pyx_optional_args->big_endian;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readFloat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_5readFloat)) {
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_big_endian); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":106
 * 
 *     cpdef float readFloat(self, bint big_endian = True) except? FLOAT_ERROR:
 *         cdef char * pos = self.check_available(4)             # <<<<<<<<<<<<<<
 *         return read_float(pos, big_endian)
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)__pyx_v_self->__pyx_vtab)->check_available(__pyx_v_self, 4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_pos = __pyx_t_5;

  /* "bytes.pyx":107
 *     cpdef float readFloat(self, bint big_endian = True) except? FLOAT_ERROR:
 *         cdef char * pos = self.check_available(4)
 *         return read_float(pos, big_endian)             # <<<<<<<<<<<<<<
 * 
 *     cpdef readString(self, int size = -1):
 */
  __pyx_r = read_float(__pyx_v_pos, __pyx_v_big_endian);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.readFloat");
  __pyx_r = (Py_HUGE_VAL * 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":105
 *             return read_int(pos, big_endian)
 * 
 *     cpdef float readFloat(self, bint big_endian = True) except? FLOAT_ERROR:             # <<<<<<<<<<<<<<
 *         cdef char * pos = self.check_available(4)
 *         return read_float(pos, big_endian)
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_5readFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_5readFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_big_endian;
  PyObject *__pyx_r = NULL;
  float __pyx_t_1;
  struct __pyx_opt_args_5bytes_10ByteReader_readFloat __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__big_endian,0};
  __Pyx_RefNannySetupContext("readFloat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__big_endian);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readFloat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_big_endian = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_big_endian = ((int)1);
    }
  } else {
    __pyx_v_big_endian = ((int)1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_big_endian = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readFloat", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.readFloat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.big_endian = __pyx_v_big_endian;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->readFloat(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1, &__pyx_t_2); if (unlikely(__pyx_t_1 == (Py_HUGE_VAL * 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.readFloat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":109
 *         return read_float(pos, big_endian)
 * 
 *     cpdef readString(self, int size = -1):             # <<<<<<<<<<<<<<
 *         value = self.pos
 *         if size == -1:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_6readString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteReader_readString(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readString *__pyx_optional_args) {
  int __pyx_v_size = ((int)-1);
  PyObject *__pyx_v_value;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("readString");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_size = __pyx_optional_args->size;
    }
  }
  __pyx_v_value = Py_None; __Pyx_INCREF(Py_None);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_6readString)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":110
 * 
 *     cpdef readString(self, int size = -1):
 *         value = self.pos             # <<<<<<<<<<<<<<
 *         if size == -1:
 *             size = len(value) + 1
 */
  __pyx_t_1 = PyBytes_FromString(__pyx_v_self->pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(__pyx_v_value);
  __pyx_v_value = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bytes.pyx":111
 *     cpdef readString(self, int size = -1):
 *         value = self.pos
 *         if size == -1:             # <<<<<<<<<<<<<<
 *             size = len(value) + 1
 *         if size > self.end - self.pos:
 */
  __pyx_t_4 = (__pyx_v_size == -1);
  if (__pyx_t_4) {

    /* "bytes.pyx":112
 *         value = self.pos
 *         if size == -1:
 *             size = len(value) + 1             # <<<<<<<<<<<<<<
 *         if size > self.end - self.pos:
 *             size = self.end - self.pos
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_size = (__pyx_t_5 + 1);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "bytes.pyx":113
 *         if size == -1:
 *             size = len(value) + 1
 *         if size > self.end - self.pos:             # <<<<<<<<<<<<<<
 *             size = self.end - self.pos
 *             value = value[:size]
 */
  __pyx_t_4 = (__pyx_v_size > (__pyx_v_self->end - __pyx_v_self->pos));
  if (__pyx_t_4) {

    /* "bytes.pyx":114
 *             size = len(value) + 1
 *         if size > self.end - self.pos:
 *             size = self.end - self.pos             # <<<<<<<<<<<<<<
 *             value = value[:size]
 *         self.pos += size
 */
    __pyx_v_size = (__pyx_v_self->end - __pyx_v_self->pos);

    /* "bytes.pyx":115
 *         if size > self.end - self.pos:
 *             size = self.end - self.pos
 *             value = value[:size]             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         return value
 */
    __pyx_t_1 = __Pyx_PySequence_GetSlice(__pyx_v_value, 0, __pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_v_value);
    __pyx_v_value = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "bytes.pyx":116
 *             size = self.end - self.pos
 *             value = value[:size]
 *         self.pos += size             # <<<<<<<<<<<<<<
 *         return value
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_size);

  /* "bytes.pyx":117
 *             value = value[:size]
 *         self.pos += size
 *         return value             # <<<<<<<<<<<<<<
 * 
 *     cpdef ByteReader readReader(self, int size = -1):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_value);
  __pyx_r = __pyx_v_value;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.readString");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":109
 *         return read_float(pos, big_endian)
 * 
 *     cpdef readString(self, int size = -1):             # <<<<<<<<<<<<<<
 *         value = self.pos
 *         if size == -1:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_6readString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_6readString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5bytes_10ByteReader_readString __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__size,0};
  __Pyx_RefNannySetupContext("readString");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__size);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readString") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_size = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_size = ((int)-1);
    }
  } else {
    __pyx_v_size = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_size = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readString", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.readString");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.size = __pyx_v_size;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->readString(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.readString");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":119
 *         return value
 * 
 *     cpdef ByteReader readReader(self, int size = -1):             # <<<<<<<<<<<<<<
 *         cdef int left = self.dataLeft()
 *         if size == -1 or size > left:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_7readReader(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  struct __pyx_obj_5bytes_ByteReader *__pyx_f_5bytes_10ByteReader_readReader(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readReader *__pyx_optional_args) {
  int __pyx_v_size = ((int)-1);
  int __pyx_v_left;
  struct __pyx_obj_5bytes_ByteReader *__pyx_v_reader = 0;
  struct __pyx_obj_5bytes_ByteReader *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("readReader");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_size = __pyx_optional_args->size;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readReader); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_7readReader)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5bytes_ByteReader))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_5bytes_ByteReader *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":120
 * 
 *     cpdef ByteReader readReader(self, int size = -1):
 *         cdef int left = self.dataLeft()             # <<<<<<<<<<<<<<
 *         if size == -1 or size > left:
 *             size = left
 */
  __pyx_v_left = ((struct __pyx_vtabstruct_5bytes_ByteReader *)__pyx_v_self->__pyx_vtab)->dataLeft(__pyx_v_self, 0);

  /* "bytes.pyx":121
 *     cpdef ByteReader readReader(self, int size = -1):
 *         cdef int left = self.dataLeft()
 *         if size == -1 or size > left:             # <<<<<<<<<<<<<<
 *             size = left
 *         cdef ByteReader reader = ByteReader(self.input,
 */
  __pyx_t_4 = (__pyx_v_size == -1);
  if (!__pyx_t_4) {
    __pyx_t_5 = (__pyx_v_size > __pyx_v_left);
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "bytes.pyx":122
 *         cdef int left = self.dataLeft()
 *         if size == -1 or size > left:
 *             size = left             # <<<<<<<<<<<<<<
 *         cdef ByteReader reader = ByteReader(self.input,
 *             (self.pos - self.data) + self.start, size)
 */
    __pyx_v_size = __pyx_v_left;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "bytes.pyx":124
 *             size = left
 *         cdef ByteReader reader = ByteReader(self.input,
 *             (self.pos - self.data) + self.start, size)             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         return reader
 */
  __pyx_t_1 = PyInt_FromLong(((__pyx_v_self->pos - __pyx_v_self->data) + __pyx_v_self->start)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_self->input);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->input);
  __Pyx_GIVEREF(__pyx_v_self->input);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5bytes_ByteReader)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_reader = ((struct __pyx_obj_5bytes_ByteReader *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bytes.pyx":125
 *         cdef ByteReader reader = ByteReader(self.input,
 *             (self.pos - self.data) + self.start, size)
 *         self.pos += size             # <<<<<<<<<<<<<<
 *         return reader
 * 
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_size);

  /* "bytes.pyx":126
 *             (self.pos - self.data) + self.start, size)
 *         self.pos += size
 *         return reader             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t tell(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_reader));
  __pyx_r = __pyx_v_reader;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_5bytes_ByteReader *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.readReader");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_reader);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":119
 *         return value
 * 
 *     cpdef ByteReader readReader(self, int size = -1):             # <<<<<<<<<<<<<<
 *         cdef int left = self.dataLeft()
 *         if size == -1 or size > left:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_7readReader(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_7readReader(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5bytes_10ByteReader_readReader __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__size,0};
  __Pyx_RefNannySetupContext("readReader");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__size);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readReader") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_size = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_size = ((int)-1);
    }
  } else {
    __pyx_v_size = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_size = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readReader", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.readReader");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.size = __pyx_v_size;
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->readReader(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.readReader");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":128
 *         return reader
 * 
 *     cpdef size_t tell(self):             # <<<<<<<<<<<<<<
 *         return self.pos - self.data
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_8tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  size_t __pyx_f_5bytes_10ByteReader_tell(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch) {
  size_t __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("tell");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__tell); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_8tell)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AsSize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":129
 * 
 *     cpdef size_t tell(self):
 *         return self.pos - self.data             # <<<<<<<<<<<<<<
 * 
 *     cpdef int dataLeft(self):
 */
  __pyx_r = (__pyx_v_self->pos - __pyx_v_self->data);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("bytes.ByteReader.tell");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":128
 *         return reader
 * 
 *     cpdef size_t tell(self):             # <<<<<<<<<<<<<<
 *         return self.pos - self.data
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_8tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_8tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("tell");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->tell(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.tell");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":131
 *         return self.pos - self.data
 * 
 *     cpdef int dataLeft(self):             # <<<<<<<<<<<<<<
 *         return self.end - self.pos
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_9dataLeft(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  int __pyx_f_5bytes_10ByteReader_dataLeft(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("dataLeft");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__dataLeft); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_9dataLeft)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":132
 * 
 *     cpdef int dataLeft(self):
 *         return self.end - self.pos             # <<<<<<<<<<<<<<
 * 
 *     cpdef seek(self, size_t pos):
 */
  __pyx_r = (__pyx_v_self->end - __pyx_v_self->pos);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("bytes.ByteReader.dataLeft");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":131
 *         return self.pos - self.data
 * 
 *     cpdef int dataLeft(self):             # <<<<<<<<<<<<<<
 *         return self.end - self.pos
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_9dataLeft(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_9dataLeft(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dataLeft");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->dataLeft(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.dataLeft");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":134
 *         return self.end - self.pos
 * 
 *     cpdef seek(self, size_t pos):             # <<<<<<<<<<<<<<
 *         self.pos = self.data + pos
 *         if self.pos > self.end:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_10seek(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteReader_seek(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, size_t __pyx_v_pos, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("seek");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__seek); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_10seek)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_pos); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":135
 * 
 *     cpdef seek(self, size_t pos):
 *         self.pos = self.data + pos             # <<<<<<<<<<<<<<
 *         if self.pos > self.end:
 *             self.pos = self.end
 */
  __pyx_v_self->pos = (__pyx_v_self->data + __pyx_v_pos);

  /* "bytes.pyx":136
 *     cpdef seek(self, size_t pos):
 *         self.pos = self.data + pos
 *         if self.pos > self.end:             # <<<<<<<<<<<<<<
 *             self.pos = self.end
 *         if self.pos < self.data:
 */
  __pyx_t_4 = (__pyx_v_self->pos > __pyx_v_self->end);
  if (__pyx_t_4) {

    /* "bytes.pyx":137
 *         self.pos = self.data + pos
 *         if self.pos > self.end:
 *             self.pos = self.end             # <<<<<<<<<<<<<<
 *         if self.pos < self.data:
 *             self.pos = self.data
 */
    __pyx_v_self->pos = __pyx_v_self->end;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "bytes.pyx":138
 *         if self.pos > self.end:
 *             self.pos = self.end
 *         if self.pos < self.data:             # <<<<<<<<<<<<<<
 *             self.pos = self.data
 * 
 */
  __pyx_t_4 = (__pyx_v_self->pos < __pyx_v_self->data);
  if (__pyx_t_4) {

    /* "bytes.pyx":139
 *             self.pos = self.end
 *         if self.pos < self.data:
 *             self.pos = self.data             # <<<<<<<<<<<<<<
 * 
 *     cdef void _skip(self, int bytes):
 */
    __pyx_v_self->pos = __pyx_v_self->data;
    goto __pyx_L4;
  }
  __pyx_L4:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.seek");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":134
 *         return self.end - self.pos
 * 
 *     cpdef seek(self, size_t pos):             # <<<<<<<<<<<<<<
 *         self.pos = self.data + pos
 *         if self.pos > self.end:
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_10seek(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_10seek(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos) {
  size_t __pyx_v_pos;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("seek");
  assert(__pyx_arg_pos); {
    __pyx_v_pos = __Pyx_PyInt_AsSize_t(__pyx_arg_pos); if (unlikely((__pyx_v_pos == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.seek");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->seek(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), __pyx_v_pos, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.seek");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":141
 *             self.pos = self.data
 * 
 *     cdef void _skip(self, int bytes):             # <<<<<<<<<<<<<<
 *         self.pos += bytes
 *         if self.pos > self.end:
 */

static  void __pyx_f_5bytes_10ByteReader__skip(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_v_bytes) {
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_skip");

  /* "bytes.pyx":142
 * 
 *     cdef void _skip(self, int bytes):
 *         self.pos += bytes             # <<<<<<<<<<<<<<
 *         if self.pos > self.end:
 *             self.pos = self.end
 */
  __pyx_v_self->pos = (__pyx_v_self->pos + __pyx_v_bytes);

  /* "bytes.pyx":143
 *     cdef void _skip(self, int bytes):
 *         self.pos += bytes
 *         if self.pos > self.end:             # <<<<<<<<<<<<<<
 *             self.pos = self.end
 *         if self.pos < self.data:
 */
  __pyx_t_1 = (__pyx_v_self->pos > __pyx_v_self->end);
  if (__pyx_t_1) {

    /* "bytes.pyx":144
 *         self.pos += bytes
 *         if self.pos > self.end:
 *             self.pos = self.end             # <<<<<<<<<<<<<<
 *         if self.pos < self.data:
 *             self.pos = self.data
 */
    __pyx_v_self->pos = __pyx_v_self->end;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "bytes.pyx":145
 *         if self.pos > self.end:
 *             self.pos = self.end
 *         if self.pos < self.data:             # <<<<<<<<<<<<<<
 *             self.pos = self.data
 * 
 */
  __pyx_t_1 = (__pyx_v_self->pos < __pyx_v_self->data);
  if (__pyx_t_1) {

    /* "bytes.pyx":146
 *             self.pos = self.end
 *         if self.pos < self.data:
 *             self.pos = self.data             # <<<<<<<<<<<<<<
 * 
 *     cpdef skipBytes(self, int bytes):
 */
    __pyx_v_self->pos = __pyx_v_self->data;
    goto __pyx_L4;
  }
  __pyx_L4:;

  __Pyx_RefNannyFinishContext();
}

/* "bytes.pyx":148
 *             self.pos = self.data
 * 
 *     cpdef skipBytes(self, int bytes):             # <<<<<<<<<<<<<<
 *         self._skip(bytes)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_11skipBytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteReader_skipBytes(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_v_bytes, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("skipBytes");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__skipBytes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_11skipBytes)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_bytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":149
 * 
 *     cpdef skipBytes(self, int bytes):
 *         self._skip(bytes)             # <<<<<<<<<<<<<<
 * 
 *     cpdef rewind(self, int value):
 */
  ((struct __pyx_vtabstruct_5bytes_ByteReader *)__pyx_v_self->__pyx_vtab)->_skip(__pyx_v_self, __pyx_v_bytes);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.skipBytes");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":148
 *             self.pos = self.data
 * 
 *     cpdef skipBytes(self, int bytes):             # <<<<<<<<<<<<<<
 *         self._skip(bytes)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_11skipBytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_11skipBytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes) {
  int __pyx_v_bytes;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("skipBytes");
  assert(__pyx_arg_bytes); {
    __pyx_v_bytes = __Pyx_PyInt_AsInt(__pyx_arg_bytes); if (unlikely((__pyx_v_bytes == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.skipBytes");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->skipBytes(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), __pyx_v_bytes, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.skipBytes");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":151
 *         self._skip(bytes)
 * 
 *     cpdef rewind(self, int value):             # <<<<<<<<<<<<<<
 *         self._skip(-value)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_12rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteReader_rewind(struct __pyx_obj_5bytes_ByteReader *__pyx_v_self, int __pyx_v_value, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("rewind");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rewind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteReader_12rewind)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":152
 * 
 *     cpdef rewind(self, int value):
 *         self._skip(-value)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  ((struct __pyx_vtabstruct_5bytes_ByteReader *)__pyx_v_self->__pyx_vtab)->_skip(__pyx_v_self, (-__pyx_v_value));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteReader.rewind");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":151
 *         self._skip(bytes)
 * 
 *     cpdef rewind(self, int value):             # <<<<<<<<<<<<<<
 *         self._skip(-value)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_12rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_12rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rewind");
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_AsInt(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteReader.rewind");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteReader *)((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->__pyx_vtab)->rewind(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self), __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.rewind");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":154
 *         self._skip(-value)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.size
 * 
 */

static Py_ssize_t __pyx_pf_5bytes_10ByteReader_13__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_5bytes_10ByteReader_13__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannySetupContext("__len__");

  /* "bytes.pyx":155
 * 
 *     def __len__(self):
 *         return self.size             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_r = ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->size;
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":157
 *         return self.size
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.data[:self.size]
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteReader_14__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteReader_14__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str__");

  /* "bytes.pyx":158
 * 
 *     def __str__(self):
 *         return self.data[:self.size]             # <<<<<<<<<<<<<<
 * 
 * cdef class ByteWriter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromStringAndSize(((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->data + 0, ((struct __pyx_obj_5bytes_ByteReader *)__pyx_v_self)->size - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteReader.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":161
 * 
 * cdef class ByteWriter:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.stream = create_stream()
 * 
 */

static int __pyx_pf_5bytes_10ByteWriter___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5bytes_10ByteWriter___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "bytes.pyx":162
 * cdef class ByteWriter:
 *     def __init__(self):
 *         self.stream = create_stream()             # <<<<<<<<<<<<<<
 * 
 *     cdef void writeSize(self, char * data, int size):
 */
  ((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->stream = create_stream();

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":164
 *         self.stream = create_stream()
 * 
 *     cdef void writeSize(self, char * data, int size):             # <<<<<<<<<<<<<<
 *         write(self.stream, data, size)
 * 
 */

static  void __pyx_f_5bytes_10ByteWriter_writeSize(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, char *__pyx_v_data, int __pyx_v_size) {
  __Pyx_RefNannySetupContext("writeSize");

  /* "bytes.pyx":165
 * 
 *     cdef void writeSize(self, char * data, int size):
 *         write(self.stream, data, size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef write(self, data):
 */
  write(__pyx_v_self->stream, __pyx_v_data, __pyx_v_size);

  __Pyx_RefNannyFinishContext();
}

/* "bytes.pyx":167
 *         write(self.stream, data, size)
 * 
 *     cpdef write(self, data):             # <<<<<<<<<<<<<<
 *         write(self.stream, data, len(data))
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_1write(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_write(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, PyObject *__pyx_v_data, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  void *__pyx_t_4;
  char *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("write");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__write); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_1write)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_data);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_data);
      __Pyx_GIVEREF(__pyx_v_data);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":168
 * 
 *     cpdef write(self, data):
 *         write(self.stream, data, len(data))             # <<<<<<<<<<<<<<
 * 
 *     cpdef writeByte(self, int value, bint unsigned = False):
 */
  __pyx_t_4 = __pyx_v_self->stream;
  __pyx_t_5 = PyBytes_AsString(__pyx_v_data); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_data;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  write(__pyx_t_4, __pyx_t_5, __pyx_t_6);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteWriter.write");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":167
 *         write(self.stream, data, size)
 * 
 *     cpdef write(self, data):             # <<<<<<<<<<<<<<
 *         write(self.stream, data, len(data))
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_1write(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_1write(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("write");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_data;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->write(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bytes.ByteWriter.write");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":170
 *         write(self.stream, data, len(data))
 * 
 *     cpdef writeByte(self, int value, bint unsigned = False):             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             write_ubyte(self.stream, value)
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_2writeByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_writeByte(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, int __pyx_v_value, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeByte *__pyx_optional_args) {
  int __pyx_v_unsigned = ((int)0);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("writeByte");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_unsigned = __pyx_optional_args->__pyx_unsigned;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__writeByte); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_2writeByte)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_unsigned); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":171
 * 
 *     cpdef writeByte(self, int value, bint unsigned = False):
 *         if unsigned:             # <<<<<<<<<<<<<<
 *             write_ubyte(self.stream, value)
 *         else:
 */
  if (__pyx_v_unsigned) {

    /* "bytes.pyx":172
 *     cpdef writeByte(self, int value, bint unsigned = False):
 *         if unsigned:
 *             write_ubyte(self.stream, value)             # <<<<<<<<<<<<<<
 *         else:
 *             write_byte(self.stream, value)
 */
    write_ubyte(__pyx_v_self->stream, __pyx_v_value);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "bytes.pyx":174
 *             write_ubyte(self.stream, value)
 *         else:
 *             write_byte(self.stream, value)             # <<<<<<<<<<<<<<
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,
 */
    write_byte(__pyx_v_self->stream, __pyx_v_value);
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bytes.ByteWriter.writeByte");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":170
 *         write(self.stream, data, len(data))
 * 
 *     cpdef writeByte(self, int value, bint unsigned = False):             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             write_ubyte(self.stream, value)
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_2writeByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_2writeByte(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_value;
  int __pyx_v_unsigned;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5bytes_10ByteWriter_writeByte __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__value,&__pyx_n_s__unsigned,0};
  __Pyx_RefNannySetupContext("writeByte");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unsigned);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "writeByte") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_value = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_unsigned = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_unsigned = ((int)0);
    }
  } else {
    __pyx_v_unsigned = ((int)0);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_unsigned = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_value = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeByte", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteWriter.writeByte");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.__pyx_unsigned = __pyx_v_unsigned;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->writeByte(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_v_value, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.writeByte");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":176
 *             write_byte(self.stream, value)
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                      bint big_endian = True):
 *         if unsigned:
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_3writeShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_writeShort(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, int __pyx_v_value, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeShort *__pyx_optional_args) {
  int __pyx_v_unsigned = ((int)0);

  /* "bytes.pyx":177
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,
 *                      bint big_endian = True):             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             write_ushort(self.stream, value, big_endian)
 */
  int __pyx_v_big_endian = ((int)1);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("writeShort");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_unsigned = __pyx_optional_args->__pyx_unsigned;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_big_endian = __pyx_optional_args->big_endian;
      }
    }
  }

  /* "bytes.pyx":176
 *             write_byte(self.stream, value)
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                      bint big_endian = True):
 *         if unsigned:
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__writeShort); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_3writeShort)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_unsigned); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_big_endian); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":178
 *     cpdef writeShort(self, int value, bint unsigned = False,
 *                      bint big_endian = True):
 *         if unsigned:             # <<<<<<<<<<<<<<
 *             write_ushort(self.stream, value, big_endian)
 *         else:
 */
  if (__pyx_v_unsigned) {

    /* "bytes.pyx":179
 *                      bint big_endian = True):
 *         if unsigned:
 *             write_ushort(self.stream, value, big_endian)             # <<<<<<<<<<<<<<
 *         else:
 *             write_short(self.stream, value, big_endian)
 */
    write_ushort(__pyx_v_self->stream, __pyx_v_value, __pyx_v_big_endian);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "bytes.pyx":181
 *             write_ushort(self.stream, value, big_endian)
 *         else:
 *             write_short(self.stream, value, big_endian)             # <<<<<<<<<<<<<<
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,
 */
    write_short(__pyx_v_self->stream, __pyx_v_value, __pyx_v_big_endian);
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bytes.ByteWriter.writeShort");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":176
 *             write_byte(self.stream, value)
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                      bint big_endian = True):
 *         if unsigned:
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_3writeShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_3writeShort(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_value;
  int __pyx_v_unsigned;
  int __pyx_v_big_endian;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5bytes_10ByteWriter_writeShort __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__value,&__pyx_n_s__unsigned,&__pyx_n_s__big_endian,0};
  __Pyx_RefNannySetupContext("writeShort");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unsigned);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__big_endian);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "writeShort") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_value = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_unsigned = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_unsigned = ((int)0);
    }
    if (values[2]) {
      __pyx_v_big_endian = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "bytes.pyx":177
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,
 *                      bint big_endian = True):             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             write_ushort(self.stream, value, big_endian)
 */
      __pyx_v_big_endian = ((int)1);
    }
  } else {

    /* "bytes.pyx":176
 *             write_byte(self.stream, value)
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                      bint big_endian = True):
 *         if unsigned:
 */
    __pyx_v_unsigned = ((int)0);

    /* "bytes.pyx":177
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,
 *                      bint big_endian = True):             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             write_ushort(self.stream, value, big_endian)
 */
    __pyx_v_big_endian = ((int)1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_big_endian = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_unsigned = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_value = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeShort", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteWriter.writeShort");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "bytes.pyx":176
 *             write_byte(self.stream, value)
 * 
 *     cpdef writeShort(self, int value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                      bint big_endian = True):
 *         if unsigned:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.__pyx_unsigned = __pyx_v_unsigned;
  __pyx_t_2.big_endian = __pyx_v_big_endian;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->writeShort(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_v_value, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.writeShort");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":183
 *             write_short(self.stream, value, big_endian)
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                    bint big_endian = True):
 *         if unsigned:
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_4writeInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_writeInt(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, PY_LONG_LONG __pyx_v_value, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeInt *__pyx_optional_args) {
  int __pyx_v_unsigned = ((int)0);

  /* "bytes.pyx":184
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,
 *                    bint big_endian = True):             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             write_uint(self.stream, value, big_endian)
 */
  int __pyx_v_big_endian = ((int)1);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("writeInt");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_unsigned = __pyx_optional_args->__pyx_unsigned;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_big_endian = __pyx_optional_args->big_endian;
      }
    }
  }

  /* "bytes.pyx":183
 *             write_short(self.stream, value, big_endian)
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                    bint big_endian = True):
 *         if unsigned:
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__writeInt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_4writeInt)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyLong_FromLongLong(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_unsigned); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_big_endian); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":185
 *     cpdef writeInt(self, long long value, bint unsigned = False,
 *                    bint big_endian = True):
 *         if unsigned:             # <<<<<<<<<<<<<<
 *             write_uint(self.stream, value, big_endian)
 *         else:
 */
  if (__pyx_v_unsigned) {

    /* "bytes.pyx":186
 *                    bint big_endian = True):
 *         if unsigned:
 *             write_uint(self.stream, value, big_endian)             # <<<<<<<<<<<<<<
 *         else:
 *             write_int(self.stream, value, big_endian)
 */
    write_uint(__pyx_v_self->stream, __pyx_v_value, __pyx_v_big_endian);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "bytes.pyx":188
 *             write_uint(self.stream, value, big_endian)
 *         else:
 *             write_int(self.stream, value, big_endian)             # <<<<<<<<<<<<<<
 * 
 *     cpdef writeFloat(self, float value, bint big_endian = True):
 */
    write_int(__pyx_v_self->stream, __pyx_v_value, __pyx_v_big_endian);
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bytes.ByteWriter.writeInt");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":183
 *             write_short(self.stream, value, big_endian)
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                    bint big_endian = True):
 *         if unsigned:
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_4writeInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_4writeInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PY_LONG_LONG __pyx_v_value;
  int __pyx_v_unsigned;
  int __pyx_v_big_endian;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5bytes_10ByteWriter_writeInt __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__value,&__pyx_n_s__unsigned,&__pyx_n_s__big_endian,0};
  __Pyx_RefNannySetupContext("writeInt");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unsigned);
        if (value) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__big_endian);
        if (value) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "writeInt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_value = __Pyx_PyInt_AsLongLong(values[0]); if (unlikely((__pyx_v_value == (PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_unsigned = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_unsigned = ((int)0);
    }
    if (values[2]) {
      __pyx_v_big_endian = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "bytes.pyx":184
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,
 *                    bint big_endian = True):             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             write_uint(self.stream, value, big_endian)
 */
      __pyx_v_big_endian = ((int)1);
    }
  } else {

    /* "bytes.pyx":183
 *             write_short(self.stream, value, big_endian)
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                    bint big_endian = True):
 *         if unsigned:
 */
    __pyx_v_unsigned = ((int)0);

    /* "bytes.pyx":184
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,
 *                    bint big_endian = True):             # <<<<<<<<<<<<<<
 *         if unsigned:
 *             write_uint(self.stream, value, big_endian)
 */
    __pyx_v_big_endian = ((int)1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_big_endian = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_unsigned = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_unsigned == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_value = __Pyx_PyInt_AsLongLong(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_value == (PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeInt", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteWriter.writeInt");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "bytes.pyx":183
 *             write_short(self.stream, value, big_endian)
 * 
 *     cpdef writeInt(self, long long value, bint unsigned = False,             # <<<<<<<<<<<<<<
 *                    bint big_endian = True):
 *         if unsigned:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.__pyx_unsigned = __pyx_v_unsigned;
  __pyx_t_2.big_endian = __pyx_v_big_endian;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->writeInt(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_v_value, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.writeInt");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":190
 *             write_int(self.stream, value, big_endian)
 * 
 *     cpdef writeFloat(self, float value, bint big_endian = True):             # <<<<<<<<<<<<<<
 *         write_float(self.stream, value, big_endian)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_5writeFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_writeFloat(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, float __pyx_v_value, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeFloat *__pyx_optional_args) {
  int __pyx_v_big_endian = ((int)1);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("writeFloat");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_big_endian = __pyx_optional_args->big_endian;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__writeFloat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_5writeFloat)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_big_endian); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":191
 * 
 *     cpdef writeFloat(self, float value, bint big_endian = True):
 *         write_float(self.stream, value, big_endian)             # <<<<<<<<<<<<<<
 * 
 *     cpdef writeStringSize(self, char * value, int size):
 */
  write_float(__pyx_v_self->stream, __pyx_v_value, __pyx_v_big_endian);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bytes.ByteWriter.writeFloat");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":190
 *             write_int(self.stream, value, big_endian)
 * 
 *     cpdef writeFloat(self, float value, bint big_endian = True):             # <<<<<<<<<<<<<<
 *         write_float(self.stream, value, big_endian)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_5writeFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_5writeFloat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_value;
  int __pyx_v_big_endian;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5bytes_10ByteWriter_writeFloat __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__value,&__pyx_n_s__big_endian,0};
  __Pyx_RefNannySetupContext("writeFloat");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__big_endian);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "writeFloat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_big_endian = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_big_endian = ((int)1);
    }
  } else {
    __pyx_v_big_endian = ((int)1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_big_endian = __Pyx_PyObject_IsTrue(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_big_endian == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_value = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeFloat", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteWriter.writeFloat");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.big_endian = __pyx_v_big_endian;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->writeFloat(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_v_value, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.writeFloat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":193
 *         write_float(self.stream, value, big_endian)
 * 
 *     cpdef writeStringSize(self, char * value, int size):             # <<<<<<<<<<<<<<
 *         write_string(self.stream, value, size)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_6writeStringSize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_writeStringSize(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, char *__pyx_v_value, int __pyx_v_size, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("writeStringSize");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__writeStringSize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_6writeStringSize)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyBytes_FromString(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":194
 * 
 *     cpdef writeStringSize(self, char * value, int size):
 *         write_string(self.stream, value, size)             # <<<<<<<<<<<<<<
 * 
 *     cpdef writeString(self, value, int size = -1):
 */
  write_string(__pyx_v_self->stream, __pyx_v_value, __pyx_v_size);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bytes.ByteWriter.writeStringSize");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":193
 *         write_float(self.stream, value, big_endian)
 * 
 *     cpdef writeStringSize(self, char * value, int size):             # <<<<<<<<<<<<<<
 *         write_string(self.stream, value, size)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_6writeStringSize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_6writeStringSize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_value;
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__value,&__pyx_n_s__size,0};
  __Pyx_RefNannySetupContext("writeStringSize");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__size);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("writeStringSize", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "writeStringSize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_value = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_size = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_value = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_size = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeStringSize", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteWriter.writeStringSize");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->writeStringSize(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_v_value, __pyx_v_size, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.writeStringSize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":196
 *         write_string(self.stream, value, size)
 * 
 *     cpdef writeString(self, value, int size = -1):             # <<<<<<<<<<<<<<
 *         write_string(self.stream, value, len(value))
 *         if size != -1:
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_7writeString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_writeString(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, PyObject *__pyx_v_value, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeString *__pyx_optional_args) {
  int __pyx_v_size = ((int)-1);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  void *__pyx_t_4;
  char *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("writeString");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_size = __pyx_optional_args->size;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__writeString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_7writeString)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_INCREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":197
 * 
 *     cpdef writeString(self, value, int size = -1):
 *         write_string(self.stream, value, len(value))             # <<<<<<<<<<<<<<
 *         if size != -1:
 *             self.pad(size - (len(value) + 1))
 */
  __pyx_t_4 = __pyx_v_self->stream;
  __pyx_t_5 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  write_string(__pyx_t_4, __pyx_t_5, __pyx_t_6);

  /* "bytes.pyx":198
 *     cpdef writeString(self, value, int size = -1):
 *         write_string(self.stream, value, len(value))
 *         if size != -1:             # <<<<<<<<<<<<<<
 *             self.pad(size - (len(value) + 1))
 * 
 */
  __pyx_t_7 = (__pyx_v_size != -1);
  if (__pyx_t_7) {

    /* "bytes.pyx":199
 *         write_string(self.stream, value, len(value))
 *         if size != -1:
 *             self.pad(size - (len(value) + 1))             # <<<<<<<<<<<<<<
 * 
 *     cpdef pad(self, int bytes):
 */
    __pyx_t_1 = __pyx_v_value;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)__pyx_v_self->__pyx_vtab)->pad(__pyx_v_self, (__pyx_v_size - (__pyx_t_6 + 1)), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteWriter.writeString");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":196
 *         write_string(self.stream, value, size)
 * 
 *     cpdef writeString(self, value, int size = -1):             # <<<<<<<<<<<<<<
 *         write_string(self.stream, value, len(value))
 *         if size != -1:
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_7writeString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_7writeString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_5bytes_10ByteWriter_writeString __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__value,&__pyx_n_s__size,0};
  __Pyx_RefNannySetupContext("writeString");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__size);
        if (value) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "writeString") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_value = values[0];
    if (values[1]) {
      __pyx_v_size = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_size = ((int)-1);
    }
  } else {
    __pyx_v_size = ((int)-1);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_size = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeString", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteWriter.writeString");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.size = __pyx_v_size;
  __pyx_t_2 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->writeString(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_t_1, 1, &__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bytes.ByteWriter.writeString");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":201
 *             self.pad(size - (len(value) + 1))
 * 
 *     cpdef pad(self, int bytes):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(bytes):
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_8pad(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_pad(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, int __pyx_v_bytes, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("pad");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__pad); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_8pad)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_bytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":203
 *     cpdef pad(self, int bytes):
 *         cdef int i
 *         for i in range(bytes):             # <<<<<<<<<<<<<<
 *             write_ubyte(self.stream, 0)
 * 
 */
  __pyx_t_4 = __pyx_v_bytes;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "bytes.pyx":204
 *         cdef int i
 *         for i in range(bytes):
 *             write_ubyte(self.stream, 0)             # <<<<<<<<<<<<<<
 * 
 *     cpdef rewind(self, int bytes):
 */
    write_ubyte(__pyx_v_self->stream, 0);
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteWriter.pad");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":201
 *             self.pad(size - (len(value) + 1))
 * 
 *     cpdef pad(self, int bytes):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(bytes):
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_8pad(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_8pad(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes) {
  int __pyx_v_bytes;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pad");
  assert(__pyx_arg_bytes); {
    __pyx_v_bytes = __Pyx_PyInt_AsInt(__pyx_arg_bytes); if (unlikely((__pyx_v_bytes == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteWriter.pad");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->pad(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_v_bytes, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.pad");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":206
 *             write_ubyte(self.stream, 0)
 * 
 *     cpdef rewind(self, int bytes):             # <<<<<<<<<<<<<<
 *         rewind_stream(self.stream, bytes)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_9rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes); /*proto*/
static  PyObject *__pyx_f_5bytes_10ByteWriter_rewind(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, int __pyx_v_bytes, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("rewind");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__rewind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_9rewind)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_bytes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":207
 * 
 *     cpdef rewind(self, int bytes):
 *         rewind_stream(self.stream, bytes)             # <<<<<<<<<<<<<<
 * 
 *     cpdef size_t tell(self):
 */
  rewind_stream(__pyx_v_self->stream, __pyx_v_bytes);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bytes.ByteWriter.rewind");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":206
 *             write_ubyte(self.stream, 0)
 * 
 *     cpdef rewind(self, int bytes):             # <<<<<<<<<<<<<<
 *         rewind_stream(self.stream, bytes)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_9rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_9rewind(PyObject *__pyx_v_self, PyObject *__pyx_arg_bytes) {
  int __pyx_v_bytes;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("rewind");
  assert(__pyx_arg_bytes); {
    __pyx_v_bytes = __Pyx_PyInt_AsInt(__pyx_arg_bytes); if (unlikely((__pyx_v_bytes == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bytes.ByteWriter.rewind");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->rewind(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), __pyx_v_bytes, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.rewind");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":209
 *         rewind_stream(self.stream, bytes)
 * 
 *     cpdef size_t tell(self):             # <<<<<<<<<<<<<<
 *         return get_stream_pos(self.stream)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_10tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  size_t __pyx_f_5bytes_10ByteWriter_tell(struct __pyx_obj_5bytes_ByteWriter *__pyx_v_self, int __pyx_skip_dispatch) {
  size_t __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("tell");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__tell); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_5bytes_10ByteWriter_10tell)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AsSize_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "bytes.pyx":210
 * 
 *     cpdef size_t tell(self):
 *         return get_stream_pos(self.stream)             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_r = get_stream_pos(__pyx_v_self->stream);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("bytes.ByteWriter.tell");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":209
 *         rewind_stream(self.stream, bytes)
 * 
 *     cpdef size_t tell(self):             # <<<<<<<<<<<<<<
 *         return get_stream_pos(self.stream)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_10tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_10tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("tell");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((struct __pyx_vtabstruct_5bytes_ByteWriter *)((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->__pyx_vtab)->tell(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.tell");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":212
 *         return get_stream_pos(self.stream)
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return get_stream(self.stream)
 * 
 */

static PyObject *__pyx_pf_5bytes_10ByteWriter_11__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_5bytes_10ByteWriter_11__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__str__");

  /* "bytes.pyx":213
 * 
 *     def __str__(self):
 *         return get_stream(self.stream)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = get_stream(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->stream); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bytes.ByteWriter.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bytes.pyx":215
 *         return get_stream(self.stream)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         delete_stream(self.stream)
 * 
 */

static void __pyx_pf_5bytes_10ByteWriter_12__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_5bytes_10ByteWriter_12__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "bytes.pyx":216
 * 
 *     def __dealloc__(self):
 *         delete_stream(self.stream)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  delete_stream(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->stream);

  __Pyx_RefNannyFinishContext();
}

/* "bytes.pyx":218
 *         delete_stream(self.stream)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return get_stream_size(self.stream)
 */

static Py_ssize_t __pyx_pf_5bytes_10ByteWriter_13__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_5bytes_10ByteWriter_13__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannySetupContext("__len__");

  /* "bytes.pyx":219
 * 
 *     def __len__(self):
 *         return get_stream_size(self.stream)             # <<<<<<<<<<<<<<
 */
  __pyx_r = get_stream_size(((struct __pyx_obj_5bytes_ByteWriter *)__pyx_v_self)->stream);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5bytes_ByteReader __pyx_vtable_5bytes_ByteReader;

static PyObject *__pyx_tp_new_5bytes_ByteReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5bytes_ByteReader *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_5bytes_ByteReader *)o);
  p->__pyx_vtab = __pyx_vtabptr_5bytes_ByteReader;
  p->input = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5bytes_ByteReader(PyObject *o) {
  struct __pyx_obj_5bytes_ByteReader *p = (struct __pyx_obj_5bytes_ByteReader *)o;
  Py_XDECREF(p->input);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5bytes_ByteReader(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5bytes_ByteReader *p = (struct __pyx_obj_5bytes_ByteReader *)o;
  if (p->input) {
    e = (*v)(p->input, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5bytes_ByteReader(PyObject *o) {
  struct __pyx_obj_5bytes_ByteReader *p = (struct __pyx_obj_5bytes_ByteReader *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->input);
  p->input = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5bytes_ByteReader[] = {
  {__Pyx_NAMESTR("read"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_1read, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("readByte"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_2readByte, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("readShort"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_3readShort, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("readInt"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_4readInt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("readFloat"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_5readFloat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("readString"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_6readString, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("readReader"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_7readReader, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("tell"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_8tell, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dataLeft"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_9dataLeft, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("seek"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_10seek, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("skipBytes"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_11skipBytes, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("rewind"), (PyCFunction)__pyx_pf_5bytes_10ByteReader_12rewind, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ByteReader = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ByteReader = {
  __pyx_pf_5bytes_10ByteReader_13__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ByteReader = {
  __pyx_pf_5bytes_10ByteReader_13__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ByteReader = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5bytes_ByteReader = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("bytes.ByteReader"), /*tp_name*/
  sizeof(struct __pyx_obj_5bytes_ByteReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5bytes_ByteReader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ByteReader, /*tp_as_number*/
  &__pyx_tp_as_sequence_ByteReader, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ByteReader, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_5bytes_10ByteReader_14__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ByteReader, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5bytes_ByteReader, /*tp_traverse*/
  __pyx_tp_clear_5bytes_ByteReader, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5bytes_ByteReader, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_5bytes_10ByteReader___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5bytes_ByteReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_5bytes_ByteWriter __pyx_vtable_5bytes_ByteWriter;

static PyObject *__pyx_tp_new_5bytes_ByteWriter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5bytes_ByteWriter *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_5bytes_ByteWriter *)o);
  p->__pyx_vtab = __pyx_vtabptr_5bytes_ByteWriter;
  return o;
}

static void __pyx_tp_dealloc_5bytes_ByteWriter(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_5bytes_10ByteWriter_12__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5bytes_ByteWriter[] = {
  {__Pyx_NAMESTR("write"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_1write, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("writeByte"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_2writeByte, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("writeShort"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_3writeShort, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("writeInt"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_4writeInt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("writeFloat"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_5writeFloat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("writeStringSize"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_6writeStringSize, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("writeString"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_7writeString, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("pad"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_8pad, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("rewind"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_9rewind, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("tell"), (PyCFunction)__pyx_pf_5bytes_10ByteWriter_10tell, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ByteWriter = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ByteWriter = {
  __pyx_pf_5bytes_10ByteWriter_13__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ByteWriter = {
  __pyx_pf_5bytes_10ByteWriter_13__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ByteWriter = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5bytes_ByteWriter = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("bytes.ByteWriter"), /*tp_name*/
  sizeof(struct __pyx_obj_5bytes_ByteWriter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5bytes_ByteWriter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ByteWriter, /*tp_as_number*/
  &__pyx_tp_as_sequence_ByteWriter, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ByteWriter, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_5bytes_10ByteWriter_11__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ByteWriter, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5bytes_ByteWriter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_5bytes_10ByteWriter___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5bytes_ByteWriter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("bytes"),
    __Pyx_DOCSTR(__pyx_k_3), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__NoDataLeft, __pyx_k__NoDataLeft, sizeof(__pyx_k__NoDataLeft), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___skip, __pyx_k___skip, sizeof(__pyx_k___skip), 0, 0, 1, 1},
  {&__pyx_n_s__big_endian, __pyx_k__big_endian, sizeof(__pyx_k__big_endian), 0, 0, 1, 1},
  {&__pyx_n_s__bytes, __pyx_k__bytes, sizeof(__pyx_k__bytes), 0, 0, 1, 1},
  {&__pyx_n_s__check_available, __pyx_k__check_available, sizeof(__pyx_k__check_available), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__dataLeft, __pyx_k__dataLeft, sizeof(__pyx_k__dataLeft), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__input, __pyx_k__input, sizeof(__pyx_k__input), 0, 0, 1, 1},
  {&__pyx_n_s__pad, __pyx_k__pad, sizeof(__pyx_k__pad), 0, 0, 1, 1},
  {&__pyx_n_s__pos, __pyx_k__pos, sizeof(__pyx_k__pos), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__read, __pyx_k__read, sizeof(__pyx_k__read), 0, 0, 1, 1},
  {&__pyx_n_s__readByte, __pyx_k__readByte, sizeof(__pyx_k__readByte), 0, 0, 1, 1},
  {&__pyx_n_s__readFloat, __pyx_k__readFloat, sizeof(__pyx_k__readFloat), 0, 0, 1, 1},
  {&__pyx_n_s__readInt, __pyx_k__readInt, sizeof(__pyx_k__readInt), 0, 0, 1, 1},
  {&__pyx_n_s__readReader, __pyx_k__readReader, sizeof(__pyx_k__readReader), 0, 0, 1, 1},
  {&__pyx_n_s__readShort, __pyx_k__readShort, sizeof(__pyx_k__readShort), 0, 0, 1, 1},
  {&__pyx_n_s__readString, __pyx_k__readString, sizeof(__pyx_k__readString), 0, 0, 1, 1},
  {&__pyx_n_s__rewind, __pyx_k__rewind, sizeof(__pyx_k__rewind), 0, 0, 1, 1},
  {&__pyx_n_s__seek, __pyx_k__seek, sizeof(__pyx_k__seek), 0, 0, 1, 1},
  {&__pyx_n_s__size, __pyx_k__size, sizeof(__pyx_k__size), 0, 0, 1, 1},
  {&__pyx_n_s__skipBytes, __pyx_k__skipBytes, sizeof(__pyx_k__skipBytes), 0, 0, 1, 1},
  {&__pyx_n_s__start, __pyx_k__start, sizeof(__pyx_k__start), 0, 0, 1, 1},
  {&__pyx_n_s__stream, __pyx_k__stream, sizeof(__pyx_k__stream), 0, 0, 1, 1},
  {&__pyx_n_s__tell, __pyx_k__tell, sizeof(__pyx_k__tell), 0, 0, 1, 1},
  {&__pyx_n_s__unsigned, __pyx_k__unsigned, sizeof(__pyx_k__unsigned), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__write, __pyx_k__write, sizeof(__pyx_k__write), 0, 0, 1, 1},
  {&__pyx_n_s__writeByte, __pyx_k__writeByte, sizeof(__pyx_k__writeByte), 0, 0, 1, 1},
  {&__pyx_n_s__writeFloat, __pyx_k__writeFloat, sizeof(__pyx_k__writeFloat), 0, 0, 1, 1},
  {&__pyx_n_s__writeInt, __pyx_k__writeInt, sizeof(__pyx_k__writeInt), 0, 0, 1, 1},
  {&__pyx_n_s__writeShort, __pyx_k__writeShort, sizeof(__pyx_k__writeShort), 0, 0, 1, 1},
  {&__pyx_n_s__writeString, __pyx_k__writeString, sizeof(__pyx_k__writeString), 0, 0, 1, 1},
  {&__pyx_n_s__writeStringSize, __pyx_k__writeStringSize, sizeof(__pyx_k__writeStringSize), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "bytes.pyx":70
 *         cdef char * data = self.pos
 *         if data + size > self.end:
 *             raise NoDataLeft('not enough data')             # <<<<<<<<<<<<<<
 *         self.pos += size
 *         return data
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initbytes(void); /*proto*/
PyMODINIT_FUNC initbytes(void)
#else
PyMODINIT_FUNC PyInit_bytes(void); /*proto*/
PyMODINIT_FUNC PyInit_bytes(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_bytes(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("bytes"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_3), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_bytes) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_5bytes_ByteReader = &__pyx_vtable_5bytes_ByteReader;
  __pyx_vtable_5bytes_ByteReader.check_available = (char *(*)(struct __pyx_obj_5bytes_ByteReader *, int))__pyx_f_5bytes_10ByteReader_check_available;
  __pyx_vtable_5bytes_ByteReader.read = (PyObject *(*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_read *__pyx_optional_args))__pyx_f_5bytes_10ByteReader_read;
  __pyx_vtable_5bytes_ByteReader.readByte = (int (*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readByte *__pyx_optional_args))__pyx_f_5bytes_10ByteReader_readByte;
  __pyx_vtable_5bytes_ByteReader.readShort = (int (*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readShort *__pyx_optional_args))__pyx_f_5bytes_10ByteReader_readShort;
  __pyx_vtable_5bytes_ByteReader.readInt = (PY_LONG_LONG (*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readInt *__pyx_optional_args))__pyx_f_5bytes_10ByteReader_readInt;
  __pyx_vtable_5bytes_ByteReader.readFloat = (float (*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readFloat *__pyx_optional_args))__pyx_f_5bytes_10ByteReader_readFloat;
  __pyx_vtable_5bytes_ByteReader.readString = (PyObject *(*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readString *__pyx_optional_args))__pyx_f_5bytes_10ByteReader_readString;
  __pyx_vtable_5bytes_ByteReader.readReader = (struct __pyx_obj_5bytes_ByteReader *(*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteReader_readReader *__pyx_optional_args))__pyx_f_5bytes_10ByteReader_readReader;
  __pyx_vtable_5bytes_ByteReader.dataLeft = (int (*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteReader_dataLeft;
  __pyx_vtable_5bytes_ByteReader._skip = (void (*)(struct __pyx_obj_5bytes_ByteReader *, int))__pyx_f_5bytes_10ByteReader__skip;
  __pyx_vtable_5bytes_ByteReader.skipBytes = (PyObject *(*)(struct __pyx_obj_5bytes_ByteReader *, int, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteReader_skipBytes;
  __pyx_vtable_5bytes_ByteReader.rewind = (PyObject *(*)(struct __pyx_obj_5bytes_ByteReader *, int, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteReader_rewind;
  __pyx_vtable_5bytes_ByteReader.seek = (PyObject *(*)(struct __pyx_obj_5bytes_ByteReader *, size_t, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteReader_seek;
  __pyx_vtable_5bytes_ByteReader.tell = (size_t (*)(struct __pyx_obj_5bytes_ByteReader *, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteReader_tell;
  if (PyType_Ready(&__pyx_type_5bytes_ByteReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_5bytes_ByteReader.tp_dict, __pyx_vtabptr_5bytes_ByteReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ByteReader", (PyObject *)&__pyx_type_5bytes_ByteReader) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5bytes_ByteReader = &__pyx_type_5bytes_ByteReader;
  __pyx_vtabptr_5bytes_ByteWriter = &__pyx_vtable_5bytes_ByteWriter;
  __pyx_vtable_5bytes_ByteWriter.writeSize = (void (*)(struct __pyx_obj_5bytes_ByteWriter *, char *, int))__pyx_f_5bytes_10ByteWriter_writeSize;
  __pyx_vtable_5bytes_ByteWriter.write = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, PyObject *, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteWriter_write;
  __pyx_vtable_5bytes_ByteWriter.writeByte = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeByte *__pyx_optional_args))__pyx_f_5bytes_10ByteWriter_writeByte;
  __pyx_vtable_5bytes_ByteWriter.writeShort = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeShort *__pyx_optional_args))__pyx_f_5bytes_10ByteWriter_writeShort;
  __pyx_vtable_5bytes_ByteWriter.writeInt = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, PY_LONG_LONG, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeInt *__pyx_optional_args))__pyx_f_5bytes_10ByteWriter_writeInt;
  __pyx_vtable_5bytes_ByteWriter.writeFloat = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, float, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeFloat *__pyx_optional_args))__pyx_f_5bytes_10ByteWriter_writeFloat;
  __pyx_vtable_5bytes_ByteWriter.writeStringSize = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, char *, int, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteWriter_writeStringSize;
  __pyx_vtable_5bytes_ByteWriter.writeString = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5bytes_10ByteWriter_writeString *__pyx_optional_args))__pyx_f_5bytes_10ByteWriter_writeString;
  __pyx_vtable_5bytes_ByteWriter.pad = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, int, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteWriter_pad;
  __pyx_vtable_5bytes_ByteWriter.rewind = (PyObject *(*)(struct __pyx_obj_5bytes_ByteWriter *, int, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteWriter_rewind;
  __pyx_vtable_5bytes_ByteWriter.tell = (size_t (*)(struct __pyx_obj_5bytes_ByteWriter *, int __pyx_skip_dispatch))__pyx_f_5bytes_10ByteWriter_tell;
  if (PyType_Ready(&__pyx_type_5bytes_ByteWriter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_5bytes_ByteWriter.tp_dict, __pyx_vtabptr_5bytes_ByteWriter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ByteWriter", (PyObject *)&__pyx_type_5bytes_ByteWriter) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5bytes_ByteWriter = &__pyx_type_5bytes_ByteWriter;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "bytes.pyx":48
 *     size_t get_stream_pos(void * stream)
 * 
 * class NoDataLeft(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__NoDataLeft, __pyx_n_s__bytes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__NoDataLeft, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "bytes.pyx":1
 * # Copyright (c) Mathias Kaerlev 2011-2012.             # <<<<<<<<<<<<<<
 * 
 * # This file is part of pyspades.
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init bytes");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init bytes");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
    /* Default metaclass */
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, "__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;

    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;

    /* Python2 __metaclass__ */
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
